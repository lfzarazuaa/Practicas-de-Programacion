// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(InventoryContext))]
    [Migration("20200719195154_AddData")]
    partial class AddData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.CategoryEntity", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = "AOL",
                            CategoryName = "Alimentos de origen animal"
                        },
                        new
                        {
                            CategoryId = "ASH",
                            CategoryName = "Aseo Hogar"
                        },
                        new
                        {
                            CategoryId = "ASP",
                            CategoryName = "Aseo Personal"
                        },
                        new
                        {
                            CategoryId = "MVL",
                            CategoryName = "Equipo de computo móvil"
                        },
                        new
                        {
                            CategoryId = "BNC",
                            CategoryName = "Bancos de piezas"
                        },
                        new
                        {
                            CategoryId = "HGR",
                            CategoryName = "Hogar"
                        },
                        new
                        {
                            CategoryId = "PRF",
                            CategoryName = "Perfumería"
                        },
                        new
                        {
                            CategoryId = "SLD",
                            CategoryName = "Salud"
                        },
                        new
                        {
                            CategoryId = "VDJ",
                            CategoryName = "Video Juegos"
                        });
                });

            modelBuilder.Entity("Entities.InputOutputEntity", b =>
                {
                    b.Property<string>("InputOutputId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("InputOutputDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInput")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("StorageId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InputOutputId");

                    b.HasIndex("StorageId");

                    b.ToTable("InputOutputs");
                });

            modelBuilder.Entity("Entities.ProductEntity", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(600)")
                        .HasMaxLength(600);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = "CEP-1Y8091",
                            CategoryId = "ASP",
                            ProductDescription = "Un cepillo de dientes para enjuage bucal.",
                            ProductName = "Cepillo de dientes",
                            TotalQuantity = 0
                        },
                        new
                        {
                            ProductId = "CRD-1283",
                            CategoryId = "AOL",
                            ProductDescription = "Carne de los cerdos del monte",
                            ProductName = "Carne de cerdo",
                            TotalQuantity = 0
                        },
                        new
                        {
                            ProductId = "ESC-87067",
                            CategoryId = "ASH",
                            ProductDescription = "Escoba para el hogar",
                            ProductName = "Escoba",
                            TotalQuantity = 0
                        },
                        new
                        {
                            ProductId = "JBN-123456",
                            CategoryId = "ASP",
                            ProductDescription = "Mi jabón Juanito para el aseo personal ok.",
                            ProductName = "Jabón Juanito",
                            TotalQuantity = 0
                        },
                        new
                        {
                            ProductId = "JUV-51658",
                            CategoryId = "HGR",
                            ProductDescription = "Globo color naranja",
                            ProductName = "Globo",
                            TotalQuantity = 0
                        },
                        new
                        {
                            ProductId = "KBJ-6789",
                            CategoryId = "SLD",
                            ProductDescription = "Vendaje para uso comercial",
                            ProductName = "Venda",
                            TotalQuantity = 0
                        },
                        new
                        {
                            ProductId = "KSP-10348",
                            CategoryId = "PRF",
                            ProductDescription = "Perfume marca Jafre",
                            ProductName = "Jafre",
                            TotalQuantity = 0
                        },
                        new
                        {
                            ProductId = "RRR-576894",
                            CategoryId = "VDJ",
                            ProductDescription = "Juego de estrategia naval",
                            ProductName = "Game Of War",
                            TotalQuantity = 0
                        },
                        new
                        {
                            ProductId = "SND-1325",
                            CategoryId = "HGR",
                            ProductDescription = "Par de Sandalias Blazor",
                            ProductName = "Sandalia",
                            TotalQuantity = 0
                        },
                        new
                        {
                            ProductId = "TBC-916313",
                            CategoryId = "SLD",
                            ProductDescription = "Medicamento efervescente",
                            ProductName = "Tabcin",
                            TotalQuantity = 0
                        });
                });

            modelBuilder.Entity("Entities.StorageEntity", b =>
                {
                    b.Property<string>("StorageId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PartialQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StorageId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("Entities.WarehouseEntity", b =>
                {
                    b.Property<string>("WarehouseId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WarehouseAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            WarehouseId = "8e2214b6-3fc8-43e2-9268-973508d8be36",
                            WarehouseAddress = "Calle 8 con 23",
                            WarehouseName = "Bodega Central"
                        },
                        new
                        {
                            WarehouseId = "70618960-17d2-4812-a697-1410593d340d",
                            WarehouseAddress = "Calle norte con occidente",
                            WarehouseName = "Bodega Norte"
                        },
                        new
                        {
                            WarehouseId = "105a21a0-834c-46b8-a3cb-82dc9012b717",
                            WarehouseAddress = "Cerro de la estrella #455",
                            WarehouseName = "Bodega del Este"
                        },
                        new
                        {
                            WarehouseId = "4726576e-2268-4137-8c5e-52ea317b19e5",
                            WarehouseAddress = "Calle 5 con 48",
                            WarehouseName = "Bodega del Oeste"
                        },
                        new
                        {
                            WarehouseId = "89f0ac35-871e-4357-b736-cd40de0b33bf",
                            WarehouseAddress = "Miramontes #227",
                            WarehouseName = "Eje Central de Abasto"
                        });
                });

            modelBuilder.Entity("Entities.InputOutputEntity", b =>
                {
                    b.HasOne("Entities.StorageEntity", "Storage")
                        .WithMany("InputOutputs")
                        .HasForeignKey("StorageId");
                });

            modelBuilder.Entity("Entities.ProductEntity", b =>
                {
                    b.HasOne("Entities.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Entities.StorageEntity", b =>
                {
                    b.HasOne("Entities.ProductEntity", "Product")
                        .WithMany("Storages")
                        .HasForeignKey("ProductId");

                    b.HasOne("Entities.WarehouseEntity", "Warehouse")
                        .WithMany("Storages")
                        .HasForeignKey("WarehouseId");
                });
#pragma warning restore 612, 618
        }
    }
}
