@using Entities @* Usar la capa entidades *@
@using Business

@inject NavigationManager NavManager

    <div>
        <EditForm Model="oProduct">
            <div class="form-group">
                <label>Referencia:</label>
                <InputText @bind-Value="oProduct.ProductId" class="form-control"></InputText>
            </div>
            <div class="form-group">
                <label>Nombre del producto:</label>
                <InputText @bind-Value="oProduct.ProductName" class="form-control"></InputText>
            </div>
            <div class="form-group">
                <label>Descripción:</label>
                <InputText @bind-Value="oProduct.ProductDescription" class="form-control"></InputText>
            </div>
            <div class="form-group">
                <label>Categoría:</label>
                <InputSelect @bind-Value="oProduct.CategoryId" class="form-control">
                    @foreach (var category in categories)
                    {
                        <option value="@category.CategoryId">@category.CategoryName</option>
                    }
                </InputSelect>
            </div>
            @*//<p class="form-group">El valor del Id es @oProduct.CategoryId</p>*@
            <input type="button" value="Agregar Producto" @onclick="SaveProduct" />
            @*<input type="button" value="Agregar Productos bonitos pero ninguno como Kytzia my love" @onclick="SaveProduct" />*@
        </EditForm>

        <ErrorMessageComponent ErrorMessages="@errorMessages"></ErrorMessageComponent>

    </div>

@code {
    ProductEntity oProduct = new ProductEntity();//Crea el objeto para entidad de producto.
    List<CategoryEntity> categories = new List<CategoryEntity>();//Crea objeto para guardar la lista de las categorías existentes.
    Business_Response errorMessages = new Business_Response();//Crea objeto para guardar los mensajes de error al capturar la información.
    
    protected override async Task OnInitializedAsync()//Cuando se inicializo el componente.
    {
        categories = Business_Category.CategoryList();//Leer todas las categorías para mostrarlas en lista.
        oProduct.CategoryId = categories.FirstOrDefault().CategoryId;//Regresar la primera consulta para elegir los datos.
    }

    private void SaveProduct()
    {
        errorMessages = Business_Product.ValidateCreateProduct(oProduct);//Validar si el producto cumple con los requisitos para ser creado.
        if (!errorMessages.Error)//Si hubo algun error actualiza los mensajes.
        {
            Business_Product.CreateProduct(oProduct);//Llamada al método estático de guardar producto para no tener que instanciarlo.
            NavManager.NavigateTo("product/list");
        }

    }

}
