.Net framework comenzó con su versión 1.0 (2002) y evolucionó a la versión 1.1(2003) sin embargo no fue lo que se esperaba.
El framework .net 2.0 (2005) fue un inició casi desde cero, convirtiéndose en el núcleo hasta el framework 4.8 donde aun no era multiplataforma.
Con .net Core 1.0 (2016) se logró evolucionar el framework a uno multiplataforma (varios S.0.), el framework .net core 3.1 (2019) será modificado a un framework universal llamado .net 5 (2020).
Con blazor podemos trabajar del lado del cliente sin necesidad de conectarse al servidor, similar a lo que hace javascript.
Con blazor se hace un proceso mas rápido, mejora la experiencia de usuario y en el desarrollo.
Blazor Server y  WebAssembly(Blazor Client Server).
En Blazor Server se comunica el cliente con el servidor para realizar las peticiones mientras que en WebAssembly todo se maneja del lado del cliente.
Blazor Server se basa en Signal R el cual usa websockets para trabajar información en tiempo real, proporcionando compatibilidad para hospedar componentes de Razor en el servidor en una aplicación ASP.NET Core.
https://docs.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-3.1
Dependencias: Estructuras de código y librerías para utilizar en nuestra aplicación, se divide en analizadores y frameworks.
Las propiedades son los settings generales que utiliza nuestra aplicación, se dice sobre que puerto trabajará bajo que dirección y con que herramienta se ejecutará.
En la carpeta Data es donde se realiza el llamado a los datos de nuestra aplicación para posteriormente cargarlos.
En pages viene como se veran las páginas en cuanto a su parte visual (html).
Host es la página principal sobre la cual se monta toda la estructura.
En el import se cargan todos los espacios de nombre necesarios a la aplicación.
En shared se cargan las plantillas a usar.
Program es un archivo en .net en donde se indica cual es la estructura de inicio, por default es Startup (archivo de configuración).
En Startup se dice toda la configuración para arrancar, carga RazorPages, ServerSideBlazor y Singleton.
En wwwroot se llaman todos los estilos (css).
Las páginas con componentes Razor tienen una extensión .razor.
Cada página tiene una estructura llamada enrutado, nos permite organizar toda la información de acuerdo a los parámetros que queremos darle @page "/counter".
Para realizar el enrutamiento a la pagina por defecto se usa @page "/" la cual nos lleva al index por defecto.
@code{} //Para indicar que habra código en c#.
Razor nos permite combinar código del lado del cliente con código del lado del lado del servidor.
<div> //Llama un código del lado del servidor sin recargar.
    @message
</div>
@code{
    string message = "Un contenido.";
}

<input type="text" value="@message"/> //Relaciona el valor del input con la variable pero solo lo lee una vez.
Con bind se lográ vincular la información para que se actualice ya sea por código o por interacción con el usuario.
//Código para leer un formulario con razor.
<input type="text" @bind-value="@message"/> Comunicación bidireccional con la variable.
<input type="text" @bind-value="@message1" />
<br/>
<input type="text" @bind-value="@message2" />
<br/>
<input type="button" value="Haga clic aqui" @onclick="ChangeText" />
<div>
    <p>Mensaje 1: @messageInp1</p>
    <p>Mensaje 2: @messageInp2</p>
</div>

@code{
    string message1 = "Un contenido A";
    string message2 = "Un contenido B";
    string messageInp1 = "";
    string messageInp2 = "";
    private void ChangeText()
    {
        messageInp1 = message1;
        messageInp2 = message2;
    }
}
En _Imports.razor se carga la ruta relativa de la carpeta de donde tenemos las páginas que queremos mandar a llamar, esto para lograr cargarlas desde otra parte y asi tener un mejor control sobre el archivo.
[Parameter] //Declaración de un parámetro.
    public string Message { get; set; } //Parámetro por defecto público para poder ingresar datos con una misma estructura.
protected override async Task OnInitializedAsync() //Transfiere el parámetro justo cuando se cargó el html.
{
    message = Message;//Se actualiza el mensaje cuando se crea el componente.
}
Arquitectura: Tiene que ver con todas las características generales del programa, bases que va a tener, librerías, etc.
Patron de diseño: Como se van a almacenar las cosas internamente.
Algunos patrones de diseño son mvc y singleton.
Para la Arquitectura se usará una capa transversal llamada Entidades que se puede comunicar con caulquier otra capa.
Con Entity framework nos vamos a poder conectar con la base de datos de una manera organizada y estructurada.
Con Codefix vamos a poder organizar toda la base de datos desde código.
Para tener un programa se debe considerar primero el esquema de la base de datos.
Al agregar una biblioteca de clases (class library) se debe verificar que se use el framework adecuado (.net core) y el lenguaje usado c#.
En la biblioteca de clases al momento de agregar una nueva clase se debe tener cuidado que estan sean públicas para que puedan ser accedidas posteriormente.
Con la palabra reservada [Key] (using System.ComponentModel.DataAnnotations) se hace referencia a que la propiedad será la llave primaria en la base de datos.
[StringLength(50)] Data Annotation que indica que la cadena será de 50 carácteres de longitud.
[Required] Indica que esa propiedad va a ser obligatoria al momento de ingresarla en la base de datos.
public string CategoryId { get; set; }
https://docs.microsoft.com/es-es/dotnet/api/system.componentmodel.dataannotations?view=netcore-3.1
Para relacionar una entidad en Core Entity se sugiere crear la lista donde se guarden todos los objetos contenidos, ademas que en la clase donde se tiene el Id a llamar tambien se tenga el objeto al que está haciendo referencia.
Para trabajar con EntityCore se debe instalar la dependencia en la parte de dependencias y administrar paquetes Nuget, ahi se busca EntityFrameworkCore y se instala la ultima versión estabale.
Para usar EntityFrameworkCore se usa la herencia en la clase: 
public class InventoryContext:DbContext
Para sincronizar dos proyectos distintos se debe dar clic en dependencias, agregar referencia y elegir el proyecto al cual se quiere referenciar.
public class InventoryContext:DbContext //Extiende de la clase DbContext.
{
    public DbSet<ProductEntity> Products { get; set; }//Tabla de productos.
}
Para la conexión con la base de datos (cadena de conexión a la db) se usa el método OnConfiguring.
Para usar sqlserver se necesita instalar la libreria EntityFrameworkCore.Sqlserver
protected override void OnConfiguring(DbContextOptionsBuilder options)
        {
            if (!options.IsConfigured)//Si no hay una conexión establecida.
            {
                options.UseSqlServer("Server=SQLEXPRESS; Database=InventoryDb; UserId=sa; Password=letmein;");
            }
        }
Para construir nuestra base de datos desde código se da clic en search, se digita package manager console (Consola del administrador de paquetes), desde aqui también se pueden instalar paquetes.
Para crear el proyecto de migración se digita en consola "add-migration FirstMigration", para el cual se debe agregar otro paquete "EntityFrameworkCore.Tools", la cual contiene toda la herramienta de migración.
Al volver a ejecutar el comando "add-migration FirstMigration" ahora nos dice que hay un error ya que no está llamando al proyecto adecuado, para esto se debe convertir al proyecto DataAccess como el proyecto de inicio (clic derecho y establecer como proyecto de inicio).
En la consola del administrador de comandos en la parte superior se debe seleccionar DataAccess y al ejecutar el comando se creara la carpeta migraciones la cual contiene todo el código para generar las tablas y administrar la base de datos.
Para remover las migraciones creadas hasta el momento se debe usar Remove-Migration.
Con la migración aun no se tiene construida la base de datos pero ya se cuenta con el código para crearla y manejarla.
protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);//Ejecuta lo que ya se tenía definido previamente para OnModelCreating.

            //Si no hay datos en la tabla CategoryEntity inserta los datos ingresados (default).
            modelBuilder.Entity<CategoryEntity>().HasData(
                new CategoryEntity {CategoryId="ASH", CategoryName="Aseo Hogar"},//Catergoria de Aseo Personal.
                new CategoryEntity {CategoryId="ASP", CategoryName="Aseo Personal"},
                new CategoryEntity {CategoryId="HGR", CategoryName="Hogar"},
                new CategoryEntity {CategoryId="PRF", CategoryName="Perfumería"},
                new CategoryEntity {CategoryId="SLD", CategoryName="Salud"},
                new CategoryEntity {CategoryId="VDJ", CategoryName="Video Juegos"}
                );
            //Si no hay datos en la tabla WarehouseEntity inserta los datos ingresados (default).
            modelBuilder.Entity<WarehouseEntity>().HasData(
                new WarehouseEntity {WarehouseId=Guid.NewGuid().ToString(), WarehouseName="Bodega Cental", WarehouseAddress="Calle 8 con 23"},
                new WarehouseEntity {WarehouseId=Guid.NewGuid().ToString(), WarehouseName="Bodega Norte", WarehouseAddress="Calle norte con occidente"},
                new WarehouseEntity {WarehouseId=Guid.NewGuid().ToString(), WarehouseName="Bodega Cental", WarehouseAddress="Calle 8 con 23"}
                );
        }
En la consola del administrador de paquetes se ejecuta update-database para crear la base de datos con las tablas propuestas, para ver los cambios se debe dar refresh en el administrador de bases de datos.
Para cargar los datos se debe ejecutar "add-migration AddData" en la consola del administrador de paquetes y posteriormente ejecutar update-database. 
Para reiniciar la base de datos borrarla, ejecutar add-migration FirstMigration, add-migration AddData, update-database.
La capa de negocio es la encargada de crear las consultas específicas para intercambiar la información de la base de datos y los formularios.
Para la capa de negocio se crea un nuevo proyecto como biblioteca de clases.
En la capa de negocios de debe agregar una referencia hacia la capa de entidades y otra hacia la capa de Acceso a Datos.
En la capa de inventory se debe agregar una referencia hacia la capa de negocio y entidades.
Con las referencias asi se tiene toda la relación entre las distintas capas de la aplicación.
Para crear el componente para agregar a la base de datos se debe recomienda crear una carpeta de componentes en inventory con cada una de las tablas a usar y como identificador usar component para distinguirlo de una vista.
Se debe modificar _Imports.razor con @using Inventory.Components.Products
@using Entities @* Usar la capa entidades *@
@using Business
<div>
    <EditForm Model="oProduct">
        <div class="form-group">
            <label>Referencia:</label>
            <InputText @bind-Value="oProduct.ProductId" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label>Nombre del producto:</label>
            <InputText @bind-Value="oProduct.ProductName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label>Descripción:</label>
            <InputText @bind-Value="oProduct.ProductDescription" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label>Categoría:</label>
            <InputSelect @bind-Value="oProduct.CategoryId" class="form-control">
                @foreach(var category in categories)
                {
                    <option value="@category.CategoryId">@category.CategoryName</option>
                }
            </InputSelect>
        </div>

        <input type="button" value="Agregar Producto" @onclick="SaveProduct" />
    </EditForm>
</div>

@code {
    ProductEntity oProduct = new ProductEntity();//Crea el objeto para entidad de producto.
    List<CategoryEntity> categories = new List<CategoryEntity>();//Crea objeto para guardar la lista de las categorias existentes.
    
    protected override async Task OnInitializedAsync()//Cuando se inicializo el componente.
    {
        categories = Business_Category.CategoryList();//Leer todas las categorias para mostrarlas en lista.
    }

    private void SaveProduct()
    {
        Business_Product.CreateProduct(oProduct);//Llamada al método estático de guardar producto para no tener que instanciarlo.
    }
}
//Listar los datos.
@using Entities
@using Business

<table class="table table-hover table-bordered">
    <thead>
        <tr>
            <th>Referencia</th>
            <th>Nombre producto</th>
            <th>Descripción del producto.</th>
            <th>Categoria</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var product in products)
        {
            <tr>
                <td>@product.ProductId</td>
                <td>@product.ProductName</td>
                <td>@product.ProductDescription</td>
                <td>@product.CategoryId</td>
            </tr>
        }
    </tbody>
</table>

@code {
    List<ProductEntity> products = new List<ProductEntity>();//Inicializar listado de productos.

    protected override async Task OnInitializedAsync()//Cuando se cargen los elementos
    {
        products = Business_Product.ProductList();//Actualiza los valores de los productos.
    }
}
Para crear una página de navegación es recomendable ponerle el sufijo Page, ademas que no se recomienda incluir código razor sino llamarlo todo mediante componentes.
@inject NavigationManager NavManager
NavManager.NavigateTo("product/list"); //Permite redireccionar a un link mediante código razor.
Guardar almacenamiento verificando que no se repita el producto registrado.
oStorage.StorageId = $"{oStorage.WarehouseId}-{oStorage.ProductId}";//Asigna un identificador al almacenamiento.
    if(Business_Storage.IsProductInWarehouse(oStorage.StorageId))
    { //Si ya está registrado el producto en esa bodega no lo almacena nuevamente.
        message = "El producto ya existe en la bodega.";
    }
    else{ //Almacena el producto en la bodega.
        oStorage.LastUpdate = DateTime.Now;//Asigna la hora actual.
        Business_Storage.CreateStorage(oStorage);//Guarda el objeto en la base de datos.
        message = "Producto registrado exitosamente.";
    }

//Método para buscar por Id relacional sobre una tabla, guardando el objeto al que se llama por Id relacional.
public static List<StorageEntity> StoragesProductsByWarehouse(string idWarehouse)
    {
        using var db = new InventoryContext(); //Ejecuta dispose (Limpiar memoria) cuando ya no se usa db. 
        return db.Storages
            .Include(s=> s.Product)//Objeto relacional Product.
            .Include(s=> s.Warehouse)//Objeto relacional Warehouse.
            .Where(s => s.WarehouseId == idWarehouse)//Sentencia Where para definir condiciones de búsqueda.
            .ToList();
    }

// Seleccionar un Id relacional llamando a un segundo objeto relacional.
<InputSelect @bind-Value="oInputOutput.StorageId" class="form-control">
    <option value="">Seleccionar un producto.</option>
    @foreach (var storage in storages)
    {
        <option value="@storage.StorageId">@storage.Product.ProductName</option>
    }
</InputSelect>

Para publicar la página web se debe primeramente cambiar la cadena de conexión de la base de datos de una local a una alojada en la web como sql azure.
https://www.youtube.com/watch?v=NfETGeQ-GHY
Posteriormente se debe registrar una cuenta en ms azure para poder publicar el sitio web.
Una vez registrado se debe seleccionar en publicar en Inventory y de allí pasar a la configuración avanzada del proyecto se debe seleccionar release y marco de trabajo, se acepta el perfil y se procede al siguiente paso.
En el siguiente paso se le asigna un nombre al sitio y se configura el plan que se quiera seleccionar conforme a su costo y prestaciones.
Posteriormente se genera el sitio y se aloja en la web, para publicarlo se da clic en deploy o publicar en la ventana que aparece al cargar la página.