C# fue creado por Anders Hejilsberg.
Lenguaje Multiparadigma.
Fuertemente tipado (definir los tipos de datos).
Imperativo (sentencias que se tienen que ejecutar).
Declarativo (sin flujo de programación predeterminado).
Funcional.
Genérico (información en memoria).
Orientado a objetos (basado en clases).
Orientado a componentes (permitir conexiones desacopladas entre softwares).
Principios de c#
	Simple,moderno,de propósito general, orientado a objetos.
	Robusto(muchas funcionalidades),durable,productividdad para el programador.
	Ambientes distribuidos (multiconexiones).
	Portabilidad (diferentes SO).
	Soporte para internacionalización (varias codificaciones).
	Uso en servidores y entornos embebidos.
	Bajo uso de procesador y memoria.
Reutilizar códigos para reducir dificultades.
Versión 1.0
	Características similares a JAVA.
Versión 2.0
	Generics(),Partial types(definir un pedazo de clase en un archivo y otra en otro para grandes equipos de trabajo).
	Mas productividdad en grandes cadenas de datos.
Versión 3.0
	Herramientas para codificar mas rapido y no caer en lo repetitvo.
Versión 4.0
	Tipos dinamicos de datos para no definir tipos en cada momento.
Versión 5.0
	Hacer múltiples hilos de ejecución usar varios núcleos de la cpu.
Versión 6.0
	Hacer azúcar sintactico (reducir líneas de código para funcionalidades).
Versión 7.0
	---
---------------------
ctrl+barra_espaciadora%%sugerencias a poner de variables.
ctrl+punto%%sugerencias para generar método o constructor.
ctrl+k ctrl+f%%Formatear el documento.
alt+shift%%Seleccionar multiplemente.
https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf %%Consultar todos los atajos.
cw%%Método writeline.
class,prop, propfull%%Permite crear clases, setter y getter.
F2 o click derecho "Rename Symbol"%%Renombra todas las entidades con la nueva cadena, aplica para modificar varios archivos.
$ $"Nombre{Nombre}" %% Permite poner cadenas con variables.
En C# todo es un objeto que hereda de la clase object.
type variable=dato%% Se asignan valores por defecto que no necesariamente se tienen que declarar.
 => %%Asignar mas cortamente.
 (Var1,Var2) =  (Var1,Var2);%%Asignación de tuplas.
 public string Ciudad { get; set; }%% Crear getter y setter.
 type var=dato%%Declarar uso de los parámetros opcionales.
 var:dato%%Usar parámetros opcionales.
La Firma del método es que valor tiene cual devuelve y que recibe.
Extensión jchanon c# para facilitar crear clases en c#.
%%3 formas de mostrar las cadenas en pantalla.
System.Console.WriteLine(curso1.Nombre + "," + curso1.UniqueId);%%
System.Console.WriteLine($"{curso2.Nombre},{curso2.UniqueId}");%%
System.Console.WriteLine(curso3);%% Se necesita hacer override a ToString();
%%Tipos de colecciones
Simples-Manipulan todo como tipos object%%ArrayList,BitArray,Queue,Stack,Sorted.
Specialized-Implementaciones comunes%%StringCollection,BitVector,ListDictionary,NameValueCollection.
Generic-Usan generics para crear implementaciones optimizadas de colección según el tipo de dato configurado.%%Dictionary<T,K>,List<T>,Queue<T>,Stack<T>,HachSet<T>,SortedSet<T>.
Concurrent-Preparadas para acceso concurrente (varios nucleos)%%ConcurrentBag<T>,ConcurrentStack<T>,ConcurrentQueue<T>.
lista.Add%%Agrega un nuevo elemento.
lista.AddRange%%Agrega una nueva lista a lo que ya se tenía.
lista.Clear();%%Limpia la colección de todos los datos.
lista.Remove();%%Elimina el dato usando su HashCode como identificador.
lista.RemoveAll();%%Elimina el con todos los que cumplan con una condicón usa un Predicate para lograrlo.
lista.RemoveAt();%%Remueve por indice.
objeto.GetHashCode();%%Obtener el código hash identificador.
Predicate%%Específica que parámetros de entrada y salida de tener un método.
delegate%% tipo que encapsula de forma segura un método, en una función anónima.
(objeto) => objeto.atributo == variable%%Función lambda para retorno de true/false.
static %% Tipo de clase que no permite nuevas clases es basicamente un objeto.
Por regla general si un método tiene mas de 50 líneas probablemente está mal diseñado.
--------------------------
Herencia%%Se pueden heredar distintos métodos ya sea implementados o que la clase hijo tenga que implementar a su manera.
public class ClaseA:ClaseB%% implementar herencia de métodos.
Modificadores de acceso%%
abstract%%Indica que la clase no crea objetos pero es usada usa para herencia.
sealed&&No permite que la clase pueda ser usada para herencia como clase padre.
Polimorfismo%%Todos las clases hijo pueden tratarse como objetos padre.
ObjetoBase ob=ObjetoHijo%%Guardar en un objeto Padre el Objeto Hijo.
objetohijo= (tipoHijo) objetopadreh;%%objetopadreh es tipoHijo guardado en un objetobase, para usar cast el objeto original debe ser del tipo Hijo de lo contrario generará una exepción en poliformismo.
.GetType()%%Regresa el tipo del objeto como fue construido originalmete.
El poliformismo puede presentar problemas si no se sabe bien que tipo de dato es.
objeto is tipo%%Is-Manda un true si es de ese tipo de dato.
tipo variable=objeto as tipo%%As-Si es del tipo lo asigna completo sino retorna null.
override string ToString()%%Modificar método ToString() del objeto para mostrarlo en consolo y en el debug.