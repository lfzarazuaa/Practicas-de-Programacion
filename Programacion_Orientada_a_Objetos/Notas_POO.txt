Algunos de los lenguajes de programación Orientados a Objetos son:
Java:
– Orientado a Objetos naturalmente
– Es muy útilizado en Android
– Y es usado del lado del servidor o Server Side
PHP
– Lenguaje interpretado
– Pensado para la Web
Python
– Diseñado para ser fácil de usar
– Múltiples usos: Web, Server Side, Análisis de Datos, Machine Learning, etc
Javascript
– Lenguaje interpretado
– Orientado a Objetos pero basado en prototipos
– Pensado para la Web
C#
Ruby
Kotlin
OMT: Object Modeling Techniques. Es una metodología para el análisis orientado a objetos.
UML: Unified Modeling Language o Lenguaje de Modelado Unificado. Tomó las bases y técnicas de OMT unificándolas. Tenemos más opciones de diagramas como lo son Clases, Casos de Uso, Objetos, Actividades, Iteración, Estados, Implementación.
Con UML se ven: Clases, casos de usos, objetos, actividades, iteración, estados. implementación.
En los UML: En la parte superior se colocan los atributos o propiedades, y debajo las operciones de la clase. Notarás que el primer caractér con el que empiezan es un símbolo. Este denotará la visibilidad del atributo o método, esto es un termino que tiene que ver con Encapsulamiento y veremos más adelante a detalle.
Estos son los niveles de visibilidad que puedes tener:
- private
+ public
# protected
~ default.
Asociación: Como su nombre lo dice, notarás que cada vez que esté referenciada este tipo de flecha(-->) significará que ese elemento contiene al otro en su definición. La flecha apuntará hacia la dependencia.
Con esto vemos que la ClaseA está asociada y depende de la ClaseB.
Herencia: Siempre que veamos este tipo de flecha(--|>) se estará expresando la herencia.
La dirección de la flecha irá desde el hijo hasta el padre.
Agregación: Este se parece a la asociación en que un elemento dependerá del otro, pero en este caso será: Un elemento dependerá de muchos otros. Aquí tomamos como referencia la multiplicidad del elemento. Lo que comúnmente conocerías en Bases de Datos como Relaciones uno a muchos.
Con esto decimos que la ClaseA contiene varios elementos de la ClaseB. Estos últimos son comúnmente representados con listas o colecciones de datos.
Composición: Este es similar al anterior solo que su relación es totalmente compenetrada de tal modo que conceptualmente una de estás clases no podría vivir si no existiera la otra.
En la POO lo primero que se debe hacer es identificar los objetos, haciendo un análisis primero observando los objetos involucrados.
Los objetos siempre son sustantivos y contienen propiedades y comportamientos.
Los objetos pueden ser físicos o conceptuales(simbología de procesos que están ocurriendo).
Un ejemplo de objeto físico es un usuario y uno conceptuales es sesión.
Las Propiedades también pueden llamarse atributos y estos también serán sustantivos. Algunos atributos o propiedades son nombre, tamaño, forma, estado, etc. Son todas las características del objeto.
Los Comportamientos serán todas las operaciones que el objeto puede hacer, suelen ser verbos o sustantivos y verbo. Algunos ejemplos pueden ser que el usuario pueda hacer login y logout.
Una Clase es el modelo por el cual nuestros objetos se van a construir y nos van a permitir generar más objetos.
Analizamos Objetos para crear Clases. Las Clases son los modelos sobres los cuales construiremos nuestros objetos.
Abstracción es cuando separamos los datos de un objeto para generar un molde.
La modularidad va muy relacionada con las clases y es un principio de la Programación Orientado a Objetos y va de la mano con el Diseño Modular que significa dividir un sistema en partes pequeñas y estas serán nuestros módulos pudiendo funcionar de manera independiente.
La modularidad de nuestro código nos va a permitir:
- Reutilizar código.
- Evitar colapsos.
- Hacer nuestro código más mantenible.
- Legibilidad.
- Resolución rápida de problemas.
- Una buena práctica es separando las clases en archivos diferentes.
Identificar las necesidades del proyecto, con su flujo y distintos posibles objetos.
Una clase en UML puede ser dividida en Identidad (Nombre de la clase), Estado (Atributos) y comportamiento(Métodos).
Para definir las clase Person en distintos lenguajes:
Java - class Person {}
Python - class Person:
JavaScript - function Person() {}
PHP - class Person{}
