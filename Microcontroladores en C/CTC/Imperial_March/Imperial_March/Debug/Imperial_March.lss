
Imperial_March.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000210  00800060  00000188  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800270  00800270  0000042c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000643  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000590  00000000  00000000  00000b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000250  00000000  00000000  00001093  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000012e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000352  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000097  00000000  00000000  0000169e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001735  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  8a:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_9>:
#include <avr/interrupt.h>
uint16_t contador=0,j=0;
const uint16_t Notas[132]={3034,65535,3034,65535,3034,65535,3822,65535,2551,65535,3034,65535,3822,65535,2551,65535,3034,65535,2025,65535,2025,65535,2025,65535,1911,65535,2551,65535,3214,65535,3822,65535,2551,65535,3034,65535,1517,65535,3034,65535,3034,65535,1517,65535,1607,65535,1703,65535,1703,65535,1517,65535,1703,65535,65535,65535,2863,65535,2145,65535,2273,65535,2408,65535,2551,65535,2863,65535,2551,65535,65535,65535,3822,65535,3214,65535,3822,65535,3034,65535,2551,65535,3034,65535,2551,65535,2025,65535,1517,65535,3034,65535,3034,65535,1517,65535,1607,65535,1703,65535,1703,65535,1517,65535,1703,65535,65535,65535,2863,65535,2145,65535,2273,65535,2408,65535,2551,65535,2863,65535,2551,65535,65535,65535,3822,65535,3214,65535,3822,65535,3034,65535};
const uint16_t Tiempo[132]={500,63,500,63,500,63,250,63,125,63,500,63,250,63,125,63,1000,63,500,63,500,63,500,63,250,63,125,63,500,63,250,63,125,63,1000,63,500,63,250,63,125,63,500,63,250,63,125,63,125,63,125,63,250,63,250,63,250,63,500,63,250,63,125,63,125,63,125,63,250,63,250,63,250,63,500,63,250,63,125,63,500,63,250,63,125,63,1000,63,500,63,250,63,125,63,500,63,250,63,125,63,125,63,125,63,250,63,250,63,250,63,500,63,250,63,125,63,125,63,125,63,250,63,250,63,250,63,500,63,250,63,125,63};
	
ISR(TIMER0_OVF_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	ef 93       	push	r30
  aa:	ff 93       	push	r31
	TCNT0=130;
  ac:	82 e8       	ldi	r24, 0x82	; 130
  ae:	82 bf       	out	0x32, r24	; 50
	j++;
  b0:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <__data_end>
  b4:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <__data_end+0x1>
  b8:	2f 5f       	subi	r18, 0xFF	; 255
  ba:	3f 4f       	sbci	r19, 0xFF	; 255
  bc:	30 93 71 02 	sts	0x0271, r19	; 0x800271 <__data_end+0x1>
  c0:	20 93 70 02 	sts	0x0270, r18	; 0x800270 <__data_end>
	if (j>Tiempo[contador])
  c4:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <contador>
  c8:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <contador+0x1>
  cc:	fc 01       	movw	r30, r24
  ce:	ee 0f       	add	r30, r30
  d0:	ff 1f       	adc	r31, r31
  d2:	e0 5a       	subi	r30, 0xA0	; 160
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	40 81       	ld	r20, Z
  d8:	51 81       	ldd	r21, Z+1	; 0x01
  da:	42 17       	cp	r20, r18
  dc:	53 07       	cpc	r21, r19
  de:	78 f5       	brcc	.+94     	; 0x13e <__vector_9+0xac>
	{
		if (Notas[contador]==65535)
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	fc 01       	movw	r30, r24
  e6:	e8 59       	subi	r30, 0x98	; 152
  e8:	fe 4f       	sbci	r31, 0xFE	; 254
  ea:	80 81       	ld	r24, Z
  ec:	91 81       	ldd	r25, Z+1	; 0x01
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	19 f4       	brne	.+6      	; 0xf8 <__vector_9+0x66>
		{
			TCCR1A=(1<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<FOC1A)|(0<<FOC1B)|(0<<WGM11)|(0<<WGM10);//Modo CTC cambiar a bajo.
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	8f bd       	out	0x2f, r24	; 47
  f6:	02 c0       	rjmp	.+4      	; 0xfc <__vector_9+0x6a>
		}
		else{
			TCCR1A=(0<<COM1A1)|(1<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<FOC1A)|(0<<FOC1B)|(0<<WGM11)|(0<<WGM10);//Modo CTC alternar estados.
  f8:	80 e4       	ldi	r24, 0x40	; 64
  fa:	8f bd       	out	0x2f, r24	; 47
		}
		OCR1A=Notas[contador];
  fc:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <contador>
 100:	f0 91 73 02 	lds	r31, 0x0273	; 0x800273 <contador+0x1>
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	e8 59       	subi	r30, 0x98	; 152
 10a:	fe 4f       	sbci	r31, 0xFE	; 254
 10c:	80 81       	ld	r24, Z
 10e:	91 81       	ldd	r25, Z+1	; 0x01
 110:	9b bd       	out	0x2b, r25	; 43
 112:	8a bd       	out	0x2a, r24	; 42
		j=0;
 114:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <__data_end+0x1>
 118:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <__data_end>
		contador++;
 11c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <contador>
 120:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <contador+0x1>
 124:	01 96       	adiw	r24, 0x01	; 1
		if(contador>132){
 126:	85 38       	cpi	r24, 0x85	; 133
 128:	91 05       	cpc	r25, r1
 12a:	28 f4       	brcc	.+10     	; 0x136 <__vector_9+0xa4>
		else{
			TCCR1A=(0<<COM1A1)|(1<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<FOC1A)|(0<<FOC1B)|(0<<WGM11)|(0<<WGM10);//Modo CTC alternar estados.
		}
		OCR1A=Notas[contador];
		j=0;
		contador++;
 12c:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <contador+0x1>
 130:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <contador>
 134:	04 c0       	rjmp	.+8      	; 0x13e <__vector_9+0xac>
		if(contador>132){
		contador=0;}
 136:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <contador+0x1>
 13a:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <contador>
	}
}
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	5f 91       	pop	r21
 148:	4f 91       	pop	r20
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <main>:
int main(void)
{
	DDRD=(1<<PD5);
 158:	80 e2       	ldi	r24, 0x20	; 32
 15a:	81 bb       	out	0x11, r24	; 17
	///Configuracion Timer0 a 1ms en Modo Normal
	TCCR0=(0<<FOC0)|(0<<WGM00)|(0<<COM01)|(0<<COM00)|(0<<WGM01)|(0<<CS02)|(1<<CS01)|(1<<CS00);//Desconectar OC0,Modo Normal, con prescalador de 64.
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	83 bf       	out	0x33, r24	; 51
	TIMSK=(0<<OCIE2)|(0<<TOIE2)|(0<<TICIE1)|(0<<OCIE1A)|(0<<OCIE1B)|(0<<TOIE1)|(0<<OCIE0)|(1<<TOIE0);//Interrupción por TOIE0.
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	89 bf       	out	0x39, r24	; 57
	TCNT0=130;
 164:	82 e8       	ldi	r24, 0x82	; 130
 166:	82 bf       	out	0x32, r24	; 50
	//Configuracion Timer 1 en CTC
	TCCR1A=(0<<COM1A1)|(1<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<FOC1A)|(0<<FOC1B)|(0<<WGM11)|(0<<WGM10);//Conectar OC1A y Modo CTC.
 168:	80 e4       	ldi	r24, 0x40	; 64
 16a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(0<<ICNC1)|(0<<ICES1)|(0<<5)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);//Modo CTC y Prescalador a 8.
 16c:	8a e0       	ldi	r24, 0x0A	; 10
 16e:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x0000;
 170:	1d bc       	out	0x2d, r1	; 45
 172:	1c bc       	out	0x2c, r1	; 44
	ICR1=0x0000;
 174:	17 bc       	out	0x27, r1	; 39
 176:	16 bc       	out	0x26, r1	; 38
	OCR1A=0x0000;
 178:	1b bc       	out	0x2b, r1	; 43
 17a:	1a bc       	out	0x2a, r1	; 42
	OCR1B=0x0000;
 17c:	19 bc       	out	0x29, r1	; 41
 17e:	18 bc       	out	0x28, r1	; 40
	sei();
 180:	78 94       	sei
 182:	ff cf       	rjmp	.-2      	; 0x182 <main+0x2a>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
