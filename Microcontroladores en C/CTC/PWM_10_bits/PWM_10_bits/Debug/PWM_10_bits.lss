
PWM_10_bits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cdf  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000be5  00000000  00000000  00000faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d8  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b1  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008d  00000000  00000000  00002541  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000025ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	02 d0       	rcall	.+4      	; 0xfa <main>
  f6:	77 c0       	rjmp	.+238    	; 0x1e6 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
int main(void)
{
	uint8_t cont=0;
	DDRB=(1<<PB7)|(1<<PB6)|(1<<PB5);
  fa:	80 ee       	ldi	r24, 0xE0	; 224
  fc:	84 b9       	out	0x04, r24	; 4
	DDRL=(1<<PL5)|(1<<PL4)|(1<<PL3);
  fe:	88 e3       	ldi	r24, 0x38	; 56
 100:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
	//PORTB=(0<<PB7)|(0<<PB6);
	//PORTL=(0<<PL5)|(0<<PL4)|(0<<PL3);
	//Configuracion Timer 1 en CTC
	TCCR1A=(0<<COM1A1)|(1<<COM1A0)|(0<<COM1B1)|(1<<COM1B0)|(0<<COM1C1)|(1<<COM1C0)|(0<<WGM11)|(0<<WGM10);//Conectar OC1A y Modo CTC.
 104:	e0 e8       	ldi	r30, 0x80	; 128
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	84 e5       	ldi	r24, 0x54	; 84
 10a:	80 83       	st	Z, r24
	TCCR1B=(0<<ICNC1)|(0<<ICES1)|(0<<5)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(0<<CS11)|(1<<CS10);//Modo CTC y Prescalador a 1.
 10c:	89 e0       	ldi	r24, 0x09	; 9
 10e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TCCR1C=(0<<FOC1A)|(1<<FOC1B)|(1<<FOC1C)|(0<<4)|(0<<3)|(0<<2)|(0<<1)|(0<<0);//Forzar comparaciones B y C.
 112:	80 e6       	ldi	r24, 0x60	; 96
 114:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
	TIMSK1=(0<<7)|(0<<6)|(0<<ICIE1)|(0<<4)|(0<<OCIE1C)|(0<<OCIE1B)|(0<<OCIE1A)|(0<<TOIE1);//Sin Interrupciones.
 118:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	TCNT1=0x0000;
 11c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 120:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	ICR1=0x0000;
 124:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 128:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	OCR1A=128;//66;
 12c:	f0 93 89 00 	sts	0x0089, r31	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 130:	e0 93 88 00 	sts	0x0088, r30	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	OCR2A=66*2/3;
 134:	8c e2       	ldi	r24, 0x2C	; 44
 136:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
	OCR1C=66*1/3;
 13a:	86 e1       	ldi	r24, 0x16	; 22
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
 142:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
	//Configuración Timer 5 en modo PWM Phase Correct 10 bits
	TCCR5A=(1<<COM5A1)|(0<<COM5A0)|(1<<COM5B1)|(0<<COM5B0)|(1<<COM5C1)|(0<<COM5C0)|(1<<WGM51)|(1<<WGM50);//Conectar OC3A OC3B OC3C y Modo PWM 10 bits.
 146:	8b ea       	ldi	r24, 0xAB	; 171
 148:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
	TCCR5B=(0<<ICNC5)|(0<<ICES5)|(0<<5)|(0<<WGM53)|(0<<WGM52)|(1<<CS52)|(1<<CS51)|(0<<CS50);//Modo Nomal con fuente externa de reloj.
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
	TCCR5C=(0<<FOC5A)|(0<<FOC5B)|(0<<FOC5C)|(0<<4)|(0<<3)|(0<<2)|(0<<1)|(0<<0);//Sin forzar las 3 comparaciones.
 152:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__TEXT_REGION_LENGTH__+0x700122>
	TIMSK5=(0<<7)|(0<<6)|(0<<ICIE5)|(0<<4)|(0<<OCIE5C)|(0<<OCIE5B)|(0<<OCIE5A)|(0<<TOIE5);//Sin interrupciones.
 156:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
	TCNT5=0x0000;
 15a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 15e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	ICR5=0x0000;
 162:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 166:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
	OCR5A=1023*7/8;
 16a:	8f e7       	ldi	r24, 0x7F	; 127
 16c:	93 e0       	ldi	r25, 0x03	; 3
 16e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 172:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5B=1023*6/8;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	92 e0       	ldi	r25, 0x02	; 2
 17a:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 17e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
	OCR5C=1023*5/8;
 182:	8f e7       	ldi	r24, 0x7F	; 127
 184:	92 e0       	ldi	r25, 0x02	; 2
 186:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 18a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
#include <util/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>
int main(void)
{
	uint8_t cont=0;
 18e:	20 e0       	ldi	r18, 0x00	; 0
	OCR5C=1023*5/8;
	/* Replace with your application code */
	while (1)
	{
		_delay_ms(10);
		OCR5A=OCR5A+1;
 190:	e8 e2       	ldi	r30, 0x28	; 40
 192:	f1 e0       	ldi	r31, 0x01	; 1
		 //{
			 //OCR1A=255;
		 //}
		 else
		 {
			 OCR1A=66;
 194:	a8 e8       	ldi	r26, 0x88	; 136
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	42 e4       	ldi	r20, 0x42	; 66
 19a:	50 e0       	ldi	r21, 0x00	; 0
			 cont=0;
 19c:	30 e0       	ldi	r19, 0x00	; 0
		 PORTB^=(1<<PB7);
		 OCR5A=0;
		 cont++;
		 if (cont==1)
		 {
			 OCR1A=128;
 19e:	c0 e8       	ldi	r28, 0x80	; 128
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
		OCR5A=OCR5A+1;
		if (OCR5A>900)
		{
		 PORTB^=(1<<PB7);
		 OCR5A=0;
		 cont++;
 1a2:	61 e0       	ldi	r22, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	8f e3       	ldi	r24, 0x3F	; 63
 1a6:	9c e9       	ldi	r25, 0x9C	; 156
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0xae>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0xb4>
 1ae:	00 00       	nop
	OCR5C=1023*5/8;
	/* Replace with your application code */
	while (1)
	{
		_delay_ms(10);
		OCR5A=OCR5A+1;
 1b0:	80 81       	ld	r24, Z
 1b2:	91 81       	ldd	r25, Z+1	; 0x01
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	91 83       	std	Z+1, r25	; 0x01
 1b8:	80 83       	st	Z, r24
		if (OCR5A>900)
 1ba:	80 81       	ld	r24, Z
 1bc:	91 81       	ldd	r25, Z+1	; 0x01
 1be:	85 38       	cpi	r24, 0x85	; 133
 1c0:	93 40       	sbci	r25, 0x03	; 3
 1c2:	80 f3       	brcs	.-32     	; 0x1a4 <main+0xaa>
		{
		 PORTB^=(1<<PB7);
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	80 58       	subi	r24, 0x80	; 128
 1c8:	85 b9       	out	0x05, r24	; 5
		 OCR5A=0;
 1ca:	11 82       	std	Z+1, r1	; 0x01
 1cc:	10 82       	st	Z, r1
		 cont++;
		 if (cont==1)
 1ce:	21 11       	cpse	r18, r1
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <main+0xe2>
		 {
			 OCR1A=128;
 1d2:	11 96       	adiw	r26, 0x01	; 1
 1d4:	dc 93       	st	X, r29
 1d6:	ce 93       	st	-X, r28
		OCR5A=OCR5A+1;
		if (OCR5A>900)
		{
		 PORTB^=(1<<PB7);
		 OCR5A=0;
		 cont++;
 1d8:	26 2f       	mov	r18, r22
 1da:	e4 cf       	rjmp	.-56     	; 0x1a4 <main+0xaa>
		 //{
			 //OCR1A=255;
		 //}
		 else
		 {
			 OCR1A=66;
 1dc:	11 96       	adiw	r26, 0x01	; 1
 1de:	5c 93       	st	X, r21
 1e0:	4e 93       	st	-X, r20
			 cont=0;
 1e2:	23 2f       	mov	r18, r19
 1e4:	df cf       	rjmp	.-66     	; 0x1a4 <main+0xaa>

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
