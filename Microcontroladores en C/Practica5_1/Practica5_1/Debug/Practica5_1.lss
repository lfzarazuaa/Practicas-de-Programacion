
Practica5_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005cc  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000555  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020e  00000000  00000000  00000cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000320  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_4>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_4>:
#define F_CPU 1000000UL
#include <util/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#define Carga_Inicial 12;//Carga inicial para oscilar a 4Hz.
ISR(TIMER2_OVF_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
   TCNT2=Carga_Inicial;
  78:	8c e0       	ldi	r24, 0x0C	; 12
  7a:	84 bd       	out	0x24, r24	; 36
   if(PORTB>=0x80){
  7c:	c7 9b       	sbis	0x18, 7	; 24
  7e:	05 c0       	rjmp	.+10     	; 0x8a <__vector_4+0x1e>
     PORTB=(PORTB<<1)|0x01;}
  80:	88 b3       	in	r24, 0x18	; 24
  82:	88 0f       	add	r24, r24
  84:	81 60       	ori	r24, 0x01	; 1
  86:	88 bb       	out	0x18, r24	; 24
  88:	03 c0       	rjmp	.+6      	; 0x90 <__vector_4+0x24>
   else{
	 PORTB=PORTB<<1;}	
  8a:	88 b3       	in	r24, 0x18	; 24
  8c:	88 0f       	add	r24, r24
  8e:	88 bb       	out	0x18, r24	; 24
}
  90:	8f 91       	pop	r24
  92:	0f 90       	pop	r0
  94:	0f be       	out	0x3f, r0	; 63
  96:	0f 90       	pop	r0
  98:	1f 90       	pop	r1
  9a:	18 95       	reti

0000009c <main>:
int main(void)
{
    cli();
  9c:	f8 94       	cli
    DDRB=(1<<DDB7)|(1<<DDB6)|(1<<DDB5)|(1<<DDB4)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);//Todo el puerto es salida
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
    PORTB=(0<<PB7)|(0<<PB6)|(0<<PB5)|(1<<PB4)|(0<<PB3)|(0<<PB2)|(0<<PB1)|(1<<PB0);//Valor inicial de 00010001.
  a2:	81 e1       	ldi	r24, 0x11	; 17
  a4:	88 bb       	out	0x18, r24	; 24
	//Configuración del Timer 2
	TCCR2=(0<<FOC2)|(0<<WGM20)|(0<<COM21)|(0<<COM20)|(0<<WGM21)|(1<<CS22)|(1<<CS21)|(1<<CS20);//Sin comparación, modo normal,0C2 desconectado,prescalador a 1024.
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	85 bd       	out	0x25, r24	; 37
    TIMSK=(0<<OCIE2)|(1<<TOIE2)|(0<<TICIE1)|(0<<OCIE1A)|(0<<OCIE1B)|(0<<TOIE1)|(0<<OCIE0)|(0<<TOIE0);//Interrupción solo por overflow de Timer 2.
  aa:	80 e4       	ldi	r24, 0x40	; 64
  ac:	89 bf       	out	0x39, r24	; 57
    TCNT2=Carga_Inicial;
  ae:	8c e0       	ldi	r24, 0x0C	; 12
  b0:	84 bd       	out	0x24, r24	; 36
    OCR2=0X00;
  b2:	13 bc       	out	0x23, r1	; 35
    sei();
  b4:	78 94       	sei
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x1a>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
