
Practica5_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d7  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000555  00000000  00000000  0000078b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000214  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000329  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001265  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000012ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_8>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_8>:
#define F_CPU 1000000UL
#include <util/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#define Carga_Inicial 34286;//Carga inicial para oscilar a 4Hz.
ISR(TIMER1_OVF_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	TCNT1=Carga_Inicial;
  7a:	8e ee       	ldi	r24, 0xEE	; 238
  7c:	95 e8       	ldi	r25, 0x85	; 133
  7e:	9d bd       	out	0x2d, r25	; 45
  80:	8c bd       	out	0x2c, r24	; 44
	if(PORTB>=0x80){
  82:	c7 9b       	sbis	0x18, 7	; 24
  84:	05 c0       	rjmp	.+10     	; 0x90 <__vector_8+0x24>
	PORTB=(PORTB<<1)|0x01;}
  86:	88 b3       	in	r24, 0x18	; 24
  88:	88 0f       	add	r24, r24
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	88 bb       	out	0x18, r24	; 24
  8e:	03 c0       	rjmp	.+6      	; 0x96 <__vector_8+0x2a>
	else{
	PORTB=PORTB<<1;}
  90:	88 b3       	in	r24, 0x18	; 24
  92:	88 0f       	add	r24, r24
  94:	88 bb       	out	0x18, r24	; 24
}
  96:	9f 91       	pop	r25
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <main>:
int main(void)
{
	cli();
  a4:	f8 94       	cli
	DDRB=(1<<DDB7)|(1<<DDB6)|(1<<DDB5)|(1<<DDB4)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);//Todo el puerto es salida
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 bb       	out	0x17, r24	; 23
	PORTB=(0<<PB7)|(0<<PB6)|(1<<PB5)|(1<<PB4)|(0<<PB3)|(0<<PB2)|(0<<PB1)|(1<<PB0);//Valor inicial de 10110001
  aa:	81 e3       	ldi	r24, 0x31	; 49
  ac:	88 bb       	out	0x18, r24	; 24
	//Configuración del Timer 1
	TCCR1A=(0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<FOC1A)|(0<<FOC1B)|(0<<WGM11)|(0<<WGM10);//Sin comparación, modo normal,0C2 desconectado,
  ae:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(0<<ICNC1)|(0<<ICES1)|(0<<5)|(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);//prescalador a 8.
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	8e bd       	out	0x2e, r24	; 46
	TIMSK=(0<<OCIE2)|(0<<TOIE2)|(0<<TICIE1)|(0<<OCIE1A)|(0<<OCIE1B)|(1<<TOIE1)|(0<<OCIE0)|(0<<TOIE0);//Interrupción por overflow de Timer 1.
  b4:	84 e0       	ldi	r24, 0x04	; 4
  b6:	89 bf       	out	0x39, r24	; 57
	TCNT1=Carga_Inicial;
  b8:	8e ee       	ldi	r24, 0xEE	; 238
  ba:	95 e8       	ldi	r25, 0x85	; 133
  bc:	9d bd       	out	0x2d, r25	; 45
  be:	8c bd       	out	0x2c, r24	; 44
	OCR1A=0X00;
  c0:	1b bc       	out	0x2b, r1	; 43
  c2:	1a bc       	out	0x2a, r1	; 42
	sei();
  c4:	78 94       	sei
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x22>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
