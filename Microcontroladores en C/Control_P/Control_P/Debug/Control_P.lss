
Control_P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  0000080c  000008a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000080c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800206  00800206  000008a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e3d  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c78  00000000  00000000  00001795  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e3  00000000  00000000  0000240d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000028f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000631  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ec  00000000  00000000  00002fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00003095  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	99 c0       	rjmp	.+306    	; 0x138 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e0       	ldi	r30, 0x0C	; 12
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 31       	cpi	r26, 0x17	; 23
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	a1 d0       	rcall	.+322    	; 0x262 <main>
 120:	73 c3       	rjmp	.+1766   	; 0x808 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Calcular_Referencia>:


void Calcular_Referencia(uint8_t Posicion)//Función que cálcula y válida el número ingresado por dígitos.
{
	if (Posicion<=255){//Si es menor a 360 cambia la referencia a esa posición y lo indica en el display.
		Referencia=Posicion*160/255;
 124:	20 ea       	ldi	r18, 0xA0	; 160
 126:	82 9f       	mul	r24, r18
 128:	c0 01       	movw	r24, r0
 12a:	11 24       	eor	r1, r1
 12c:	6f ef       	ldi	r22, 0xFF	; 255
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	44 d3       	rcall	.+1672   	; 0x7ba <__divmodhi4>
 132:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <Referencia>
 136:	08 95       	ret

00000138 <__vector_1>:
	}
}

ISR(INT0_vect){//Interrupción para detectar un cambio de posición
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
	if (PIND&(1<<PIND1))//Verifica si giro en Sentido Horario.
 144:	49 9b       	sbis	0x09, 1	; 9
 146:	0e c0       	rjmp	.+28     	; 0x164 <__vector_1+0x2c>
	{	Direccion=1;//Giro Horario
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <Direccion>
		if (Contador_Posicion==160){Contador_Posicion=0;}//Como el motor posee 160 divisiones de posición al sobrepasarlas regresa a 0.
 14e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 152:	80 3a       	cpi	r24, 0xA0	; 160
 154:	19 f4       	brne	.+6      	; 0x15c <__vector_1+0x24>
 156:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
 15a:	11 c0       	rjmp	.+34     	; 0x17e <__vector_1+0x46>
		else{Contador_Posicion++;}//Incrementa su posición en 1.
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 162:	0d c0       	rjmp	.+26     	; 0x17e <__vector_1+0x46>
	}
	else//Giro Antihorario
	{	Direccion=0;
 164:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <Direccion>
		if (Contador_Posicion==0){Contador_Posicion=160;}//Como el motor posee 160 divisiones de posición al llegar a 0 regresa a 160.
 168:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 16c:	81 11       	cpse	r24, r1
 16e:	04 c0       	rjmp	.+8      	; 0x178 <__vector_1+0x40>
 170:	80 ea       	ldi	r24, 0xA0	; 160
 172:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 176:	03 c0       	rjmp	.+6      	; 0x17e <__vector_1+0x46>
		else{Contador_Posicion--;}}//Decrementa su posición en 1.
 178:	81 50       	subi	r24, 0x01	; 1
 17a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
}
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <Leer_ADC>:

uint8_t Leer_ADC(){
	ADCSRA=(1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(0<<ADPS2)|(0<<ADPS1)|(4<<ADPS0);
 18a:	84 ec       	ldi	r24, 0xC4	; 196
 18c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	while(ADCSRA==((1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(0<<ADPS2)|(0<<ADPS1)|(4<<ADPS0))){}
 190:	ea e7       	ldi	r30, 0x7A	; 122
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	84 3c       	cpi	r24, 0xC4	; 196
 198:	e9 f3       	breq	.-6      	; 0x194 <Leer_ADC+0xa>
	return ADCH;
 19a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
 19e:	08 95       	ret

000001a0 <Giro_motor>:
		_delay_ms(1);//Tiempo de espera de 1 ms.
		Giro_motor();//Ejecuta el giro del motor para llevarlo a la posición de referencia.
	}
}

void Giro_motor(void){
 1a0:	cf 92       	push	r12
 1a2:	df 92       	push	r13
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
	if(U<-Margen_Error){//Giro en sentido antihorario si el error es muy grande.
 1a8:	c0 90 13 02 	lds	r12, 0x0213	; 0x800213 <U>
 1ac:	d0 90 14 02 	lds	r13, 0x0214	; 0x800214 <U+0x1>
 1b0:	e0 90 15 02 	lds	r14, 0x0215	; 0x800215 <U+0x2>
 1b4:	f0 90 16 02 	lds	r15, 0x0216	; 0x800216 <U+0x3>
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	40 e4       	ldi	r20, 0x40	; 64
 1be:	50 ec       	ldi	r21, 0xC0	; 192
 1c0:	c7 01       	movw	r24, r14
 1c2:	b6 01       	movw	r22, r12
 1c4:	49 d1       	rcall	.+658    	; 0x458 <__cmpsf2>
 1c6:	88 23       	and	r24, r24
 1c8:	dc f4       	brge	.+54     	; 0x200 <Giro_motor+0x60>
		OCR1B=(uint16_t) Valor_Inicial_PWM+(U/160)*(Valor_Inicial_PWM-1023);//Calcula el valor del PWM en sentido antihorario.
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	40 e2       	ldi	r20, 0x20	; 32
 1d0:	53 e4       	ldi	r21, 0x43	; 67
 1d2:	c7 01       	movw	r24, r14
 1d4:	b6 01       	movw	r22, r12
 1d6:	44 d1       	rcall	.+648    	; 0x460 <__divsf3>
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e8       	ldi	r19, 0x80	; 128
 1dc:	49 e7       	ldi	r20, 0x79	; 121
 1de:	54 ec       	ldi	r21, 0xC4	; 196
 1e0:	89 d2       	rcall	.+1298   	; 0x6f4 <__mulsf3>
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	48 ec       	ldi	r20, 0xC8	; 200
 1e8:	51 e4       	ldi	r21, 0x41	; 65
 1ea:	d2 d0       	rcall	.+420    	; 0x390 <__addsf3>
 1ec:	a1 d1       	rcall	.+834    	; 0x530 <__fixunssfsi>
 1ee:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 1f2:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
		OCR1A=0;//Apaga la salida para girar en sentido antihorario.
 1f6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 1fa:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 1fe:	2c c0       	rjmp	.+88     	; 0x258 <Giro_motor+0xb8>
	}
	else{//Giro en sentido horario o sin giro
		if (U>Margen_Error){//Giro en sentido horario si el error es muy grande.
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	40 e4       	ldi	r20, 0x40	; 64
 206:	50 e4       	ldi	r21, 0x40	; 64
 208:	c7 01       	movw	r24, r14
 20a:	b6 01       	movw	r22, r12
 20c:	6f d2       	rcall	.+1246   	; 0x6ec <__gesf2>
 20e:	18 16       	cp	r1, r24
 210:	dc f4       	brge	.+54     	; 0x248 <Giro_motor+0xa8>
			OCR1A=(uint16_t) Valor_Inicial_PWM+(U/160)*(1023-Valor_Inicial_PWM);//Calcula el valor del PWM en sentido horario.
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	40 e2       	ldi	r20, 0x20	; 32
 218:	53 e4       	ldi	r21, 0x43	; 67
 21a:	c7 01       	movw	r24, r14
 21c:	b6 01       	movw	r22, r12
 21e:	20 d1       	rcall	.+576    	; 0x460 <__divsf3>
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e8       	ldi	r19, 0x80	; 128
 224:	49 e7       	ldi	r20, 0x79	; 121
 226:	54 e4       	ldi	r21, 0x44	; 68
 228:	65 d2       	rcall	.+1226   	; 0x6f4 <__mulsf3>
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	48 ec       	ldi	r20, 0xC8	; 200
 230:	51 e4       	ldi	r21, 0x41	; 65
 232:	ae d0       	rcall	.+348    	; 0x390 <__addsf3>
 234:	7d d1       	rcall	.+762    	; 0x530 <__fixunssfsi>
 236:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 23a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
			OCR1B=0;//Apaga la salida para girar en sentido horario.
 23e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 242:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 246:	08 c0       	rjmp	.+16     	; 0x258 <Giro_motor+0xb8>
		}
		else{//Sin giro.
			OCR1A=0;//Apaga la salida.
 248:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 24c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
			OCR1B=0;//Apaga la salida.
 250:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 254:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
		}
	}
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	df 90       	pop	r13
 25e:	cf 90       	pop	r12
 260:	08 95       	ret

00000262 <main>:
	while(ADCSRA==((1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(0<<ADPS2)|(0<<ADPS1)|(4<<ADPS0))){}
	return ADCH;
}
int main(void)
{
	cli();//Impide interrupciones
 262:	f8 94       	cli
	DDRB=(1<<PB7)|(1<<PB6)|(1<<PB5);//Pines de PWM
 264:	80 ee       	ldi	r24, 0xE0	; 224
 266:	84 b9       	out	0x04, r24	; 4
	DDRD=(0<<PIND7)|(0<<PIND6)|(0<<PIND5)|(0<<PIND4)|(0<<PIND3)|(0<<PIND2)|(0<<PIND1)|(0<<PIND0);//Pines para la entrada del motor.
 268:	1a b8       	out	0x0a, r1	; 10
	PORTD=0x07;//Activar pullup en para entradas de motor;
 26a:	87 e0       	ldi	r24, 0x07	; 7
 26c:	8b b9       	out	0x0b, r24	; 11
	DDRK=0xFF;
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	//Configurar Timer0 en modo CTC a 1ms
	TCCR0A=(0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<3)|(0<<2)|(1<<WGM01)|(0<<WGM00);//Desconectar OC0A y Modo CTC.
 274:	92 e0       	ldi	r25, 0x02	; 2
 276:	94 bd       	out	0x24, r25	; 36
	TCCR0B=(0<<FOC0A)|(0<<FOC0B)|(0<<5)|(0<<4)|(0<<WGM02)|(1<<CS02)|(0<<CS01)|(0<<CS00);//Modo CTC y Prescalador a 64.
 278:	84 e0       	ldi	r24, 0x04	; 4
 27a:	85 bd       	out	0x25, r24	; 37
	TIMSK0=(0<<7)|(0<<6)|(0<<5)|(0<<4)|(0<<3)|(0<<OCIE0B)|(0<<OCIE0A)|(0<<TOIE0);//Interrupciones solo por OCIE0A.
 27c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	TCNT0=0x00;
 280:	16 bc       	out	0x26, r1	; 38
	OCR0A=249;
 282:	89 ef       	ldi	r24, 0xF9	; 249
 284:	87 bd       	out	0x27, r24	; 39
	OCR0B=0x00;
 286:	18 bc       	out	0x28, r1	; 40
	//Configurar ADC
	ADMUX=(0<<REFS1)|(1<<REFS0)|(1<<ADLAR)|(0<<MUX4)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);//(AREF Conectado) REFS1:0=0, Ajustado a la izquierda(ADLAR=0), ACD0 Seleccionado MUX5:0=0.
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA=(1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(0<<ADPS2)|(0<<ADPS1)|(4<<ADPS0);//Activar ADC ADEN=1, Sin comenzar conversión ADSC=0,Desactivar Trigger ADATE=0, Bandera sin activar ADIF=0,Desactivar Interupción de conversión completa ADIE=0,División de 16 para ahorrar energia ADPS2:0=4
 28e:	84 e8       	ldi	r24, 0x84	; 132
 290:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB=(0<<7)|(0<<ACME)|(0<<5)|(0<<4)|(0<<MUX5)|(0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0);//Timer 0 Compare Match A ADTS2:0=3.
 294:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	//Solo lectura ADC,ADCH,ADCL=
	////Desactivar entradas digitales para ahorro de energia
	DIDR0=(0<<ADC7D)|(0<<ADC6D)|(0<<ADC5D)|(0<<ADC4D)|(0<<ADC3D)|(0<<ADC2D)|(0<<ADC1D)|(1<<ADC0D);
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	//DIDR1=(0<<7)|(0<<6)|(0<<5)|(0<<4)|(0<<3)|(0<<2)|(0<<AIN1D)|(0<<AIN0D);
	DIDR2=(0<<ADC15D)|(0<<ADC14D)|(0<<ADC13D)|(0<<ADC12D)|(0<<ADC11D)|(0<<ADC10D)|(0<<ADC9D)|(0<<ADC8D);
 29e:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	//Configuración Timer1 PWM 10 bits phase correct
	TCCR1A=(1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(1<<COM1C1)|(0<<COM1C0)|(1<<WGM11)|(1<<WGM10);//Phase Correct PWM 10 bits OCR1A OCR1B y OCR1C conectados.
 2a2:	2b ea       	ldi	r18, 0xAB	; 171
 2a4:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B=(0<<ICNC1)|(0<<ICES1)|(0<<5)|(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);//Modo Phase Correct PWM 10 bits y Prescalador a 8.
 2a8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TCCR1C=(0<<FOC1A)|(0<<FOC1B)|(0<<FOC1C)|(0<<4)|(0<<3)|(0<<2)|(0<<1)|(0<<0);//Sin forzar comparaciones.
 2ac:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
	TIMSK1=(0<<7)|(0<<6)|(0<<ICIE1)|(0<<4)|(0<<OCIE1C)|(0<<OCIE1B)|(0<<OCIE1A)|(0<<TOIE1);//Sin interrupciones de PWM.
 2b0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	TCNT1=0x0000;
 2b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 2b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	ICR1=0x0000;
 2bc:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 2c0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	OCR1A=0x0000;
 2c4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 2c8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	OCR2A=0x0000;
 2cc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
	OCR1C=0x0000;
 2d0:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
 2d4:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
	//Referencia=80;
	//Configuración de Int0 para lectura de motor;
	MCUCR=(0<<JTD)|(0<<6)|(0<<5)|(0<<PUD)|(0<<3)|(0<<2)|(0<<IVSEL)|(0<<IVCE);
 2d8:	15 be       	out	0x35, r1	; 53
	EICRA=(0<<ISC31)|(0<<ISC30)|(0<<ISC21)|(0<<ISC20)|(0<<ISC11)|(0<<ISC10)|(1<<ISC01)|(1<<ISC00);//Configuración Flancos de subida en INT0 e INT1.
 2da:	93 e0       	ldi	r25, 0x03	; 3
 2dc:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	EIMSK=(0<<INT7)|(0<<INT6)|(0<<INT5)|(0<<INT4)|(0<<INT3)|(0<<INT2)|(0<<INT1)|(1<<INT0);//Habilitar Interrupcion por INT0.
 2e0:	8d bb       	out	0x1d, r24	; 29
	//
	sei();
 2e2:	78 94       	sei
	while (1)
	{
		Valor_ADC=Leer_ADC();
	    Calcular_Referencia(Valor_ADC);
		Error=(float)Referencia-Contador_Posicion;//Calcula el Error con respecto a la referencia.
		PORTK=Contador_Posicion*255/160;
 2e4:	dd 24       	eor	r13, r13
 2e6:	da 94       	dec	r13
 2e8:	0f 2e       	mov	r0, r31
 2ea:	f0 ea       	ldi	r31, 0xA0	; 160
 2ec:	ef 2e       	mov	r14, r31
 2ee:	f1 2c       	mov	r15, r1
 2f0:	f0 2d       	mov	r31, r0
 2f2:	08 e0       	ldi	r16, 0x08	; 8
 2f4:	11 e0       	ldi	r17, 0x01	; 1
	sei();
	//Calcular_Referencia(150);
	/* Replace with your application code */
	while (1)
	{
		Valor_ADC=Leer_ADC();
 2f6:	49 df       	rcall	.-366    	; 0x18a <Leer_ADC>
 2f8:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Valor_ADC>
	    Calcular_Referencia(Valor_ADC);
 2fc:	13 df       	rcall	.-474    	; 0x124 <Calcular_Referencia>
 2fe:	c0 91 06 02 	lds	r28, 0x0206	; 0x800206 <__data_end>
		Error=(float)Referencia-Contador_Posicion;//Calcula el Error con respecto a la referencia.
 302:	d0 e0       	ldi	r29, 0x00	; 0
 304:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <Referencia>
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	3c d1       	rcall	.+632    	; 0x588 <__floatunsisf>
 310:	4b 01       	movw	r8, r22
 312:	5c 01       	movw	r10, r24
 314:	be 01       	movw	r22, r28
 316:	0d 2e       	mov	r0, r29
 318:	00 0c       	add	r0, r0
 31a:	88 0b       	sbc	r24, r24
 31c:	99 0b       	sbc	r25, r25
 31e:	36 d1       	rcall	.+620    	; 0x58c <__floatsisf>
 320:	9b 01       	movw	r18, r22
 322:	ac 01       	movw	r20, r24
 324:	c5 01       	movw	r24, r10
 326:	b4 01       	movw	r22, r8
 328:	32 d0       	rcall	.+100    	; 0x38e <__subsf3>
 32a:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <Error>
 32e:	70 93 10 02 	sts	0x0210, r23	; 0x800210 <Error+0x1>
 332:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Error+0x2>
 336:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <Error+0x3>
 33a:	dc 9e       	mul	r13, r28
		PORTK=Contador_Posicion*255/160;
 33c:	c0 01       	movw	r24, r0
 33e:	dd 9e       	mul	r13, r29
 340:	90 0d       	add	r25, r0
 342:	11 24       	eor	r1, r1
 344:	b7 01       	movw	r22, r14
 346:	39 d2       	rcall	.+1138   	; 0x7ba <__divmodhi4>
 348:	f8 01       	movw	r30, r16
 34a:	60 83       	st	Z, r22
 34c:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <Error>
		U=k*Error;//Calculo de la parte propocional del control.
 350:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <Error+0x1>
 354:	40 91 11 02 	lds	r20, 0x0211	; 0x800211 <Error+0x2>
 358:	50 91 12 02 	lds	r21, 0x0212	; 0x800212 <Error+0x3>
 35c:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__data_start>
 360:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__data_start+0x1>
 364:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_start+0x2>
 368:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_start+0x3>
 36c:	c3 d1       	rcall	.+902    	; 0x6f4 <__mulsf3>
 36e:	60 93 13 02 	sts	0x0213, r22	; 0x800213 <U>
 372:	70 93 14 02 	sts	0x0214, r23	; 0x800214 <U+0x1>
 376:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <U+0x2>
 37a:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <U+0x3>
 37e:	8f e9       	ldi	r24, 0x9F	; 159
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 380:	9f e0       	ldi	r25, 0x0F	; 15
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <main+0x120>
 386:	00 c0       	rjmp	.+0      	; 0x388 <main+0x126>
 388:	00 00       	nop
 38a:	0a df       	rcall	.-492    	; 0x1a0 <Giro_motor>
		_delay_ms(1);//Tiempo de espera de 1 ms.
		Giro_motor();//Ejecuta el giro del motor para llevarlo a la posición de referencia.
 38c:	b4 cf       	rjmp	.-152    	; 0x2f6 <main+0x94>

0000038e <__subsf3>:
 38e:	50 58       	subi	r21, 0x80	; 128

00000390 <__addsf3>:
 390:	bb 27       	eor	r27, r27
 392:	aa 27       	eor	r26, r26
 394:	0e d0       	rcall	.+28     	; 0x3b2 <__addsf3x>
 396:	70 c1       	rjmp	.+736    	; 0x678 <__fp_round>
 398:	61 d1       	rcall	.+706    	; 0x65c <__fp_pscA>
 39a:	30 f0       	brcs	.+12     	; 0x3a8 <__addsf3+0x18>
 39c:	66 d1       	rcall	.+716    	; 0x66a <__fp_pscB>
 39e:	20 f0       	brcs	.+8      	; 0x3a8 <__addsf3+0x18>
 3a0:	31 f4       	brne	.+12     	; 0x3ae <__addsf3+0x1e>
 3a2:	9f 3f       	cpi	r25, 0xFF	; 255
 3a4:	11 f4       	brne	.+4      	; 0x3aa <__addsf3+0x1a>
 3a6:	1e f4       	brtc	.+6      	; 0x3ae <__addsf3+0x1e>
 3a8:	56 c1       	rjmp	.+684    	; 0x656 <__fp_nan>
 3aa:	0e f4       	brtc	.+2      	; 0x3ae <__addsf3+0x1e>
 3ac:	e0 95       	com	r30
 3ae:	e7 fb       	bst	r30, 7
 3b0:	4c c1       	rjmp	.+664    	; 0x64a <__fp_inf>

000003b2 <__addsf3x>:
 3b2:	e9 2f       	mov	r30, r25
 3b4:	72 d1       	rcall	.+740    	; 0x69a <__fp_split3>
 3b6:	80 f3       	brcs	.-32     	; 0x398 <__addsf3+0x8>
 3b8:	ba 17       	cp	r27, r26
 3ba:	62 07       	cpc	r22, r18
 3bc:	73 07       	cpc	r23, r19
 3be:	84 07       	cpc	r24, r20
 3c0:	95 07       	cpc	r25, r21
 3c2:	18 f0       	brcs	.+6      	; 0x3ca <__addsf3x+0x18>
 3c4:	71 f4       	brne	.+28     	; 0x3e2 <__addsf3x+0x30>
 3c6:	9e f5       	brtc	.+102    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3c8:	8a c1       	rjmp	.+788    	; 0x6de <__fp_zero>
 3ca:	0e f4       	brtc	.+2      	; 0x3ce <__addsf3x+0x1c>
 3cc:	e0 95       	com	r30
 3ce:	0b 2e       	mov	r0, r27
 3d0:	ba 2f       	mov	r27, r26
 3d2:	a0 2d       	mov	r26, r0
 3d4:	0b 01       	movw	r0, r22
 3d6:	b9 01       	movw	r22, r18
 3d8:	90 01       	movw	r18, r0
 3da:	0c 01       	movw	r0, r24
 3dc:	ca 01       	movw	r24, r20
 3de:	a0 01       	movw	r20, r0
 3e0:	11 24       	eor	r1, r1
 3e2:	ff 27       	eor	r31, r31
 3e4:	59 1b       	sub	r21, r25
 3e6:	99 f0       	breq	.+38     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3e8:	59 3f       	cpi	r21, 0xF9	; 249
 3ea:	50 f4       	brcc	.+20     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ec:	50 3e       	cpi	r21, 0xE0	; 224
 3ee:	68 f1       	brcs	.+90     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3f0:	1a 16       	cp	r1, r26
 3f2:	f0 40       	sbci	r31, 0x00	; 0
 3f4:	a2 2f       	mov	r26, r18
 3f6:	23 2f       	mov	r18, r19
 3f8:	34 2f       	mov	r19, r20
 3fa:	44 27       	eor	r20, r20
 3fc:	58 5f       	subi	r21, 0xF8	; 248
 3fe:	f3 cf       	rjmp	.-26     	; 0x3e6 <__addsf3x+0x34>
 400:	46 95       	lsr	r20
 402:	37 95       	ror	r19
 404:	27 95       	ror	r18
 406:	a7 95       	ror	r26
 408:	f0 40       	sbci	r31, 0x00	; 0
 40a:	53 95       	inc	r21
 40c:	c9 f7       	brne	.-14     	; 0x400 <__LOCK_REGION_LENGTH__>
 40e:	7e f4       	brtc	.+30     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 410:	1f 16       	cp	r1, r31
 412:	ba 0b       	sbc	r27, r26
 414:	62 0b       	sbc	r22, r18
 416:	73 0b       	sbc	r23, r19
 418:	84 0b       	sbc	r24, r20
 41a:	ba f0       	brmi	.+46     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 41c:	91 50       	subi	r25, 0x01	; 1
 41e:	a1 f0       	breq	.+40     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 420:	ff 0f       	add	r31, r31
 422:	bb 1f       	adc	r27, r27
 424:	66 1f       	adc	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	88 1f       	adc	r24, r24
 42a:	c2 f7       	brpl	.-16     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 42c:	0e c0       	rjmp	.+28     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 42e:	ba 0f       	add	r27, r26
 430:	62 1f       	adc	r22, r18
 432:	73 1f       	adc	r23, r19
 434:	84 1f       	adc	r24, r20
 436:	48 f4       	brcc	.+18     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 438:	87 95       	ror	r24
 43a:	77 95       	ror	r23
 43c:	67 95       	ror	r22
 43e:	b7 95       	ror	r27
 440:	f7 95       	ror	r31
 442:	9e 3f       	cpi	r25, 0xFE	; 254
 444:	08 f0       	brcs	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 446:	b3 cf       	rjmp	.-154    	; 0x3ae <__addsf3+0x1e>
 448:	93 95       	inc	r25
 44a:	88 0f       	add	r24, r24
 44c:	08 f0       	brcs	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44e:	99 27       	eor	r25, r25
 450:	ee 0f       	add	r30, r30
 452:	97 95       	ror	r25
 454:	87 95       	ror	r24
 456:	08 95       	ret

00000458 <__cmpsf2>:
 458:	d4 d0       	rcall	.+424    	; 0x602 <__fp_cmp>
 45a:	08 f4       	brcc	.+2      	; 0x45e <__cmpsf2+0x6>
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	08 95       	ret

00000460 <__divsf3>:
 460:	0c d0       	rcall	.+24     	; 0x47a <__divsf3x>
 462:	0a c1       	rjmp	.+532    	; 0x678 <__fp_round>
 464:	02 d1       	rcall	.+516    	; 0x66a <__fp_pscB>
 466:	40 f0       	brcs	.+16     	; 0x478 <__divsf3+0x18>
 468:	f9 d0       	rcall	.+498    	; 0x65c <__fp_pscA>
 46a:	30 f0       	brcs	.+12     	; 0x478 <__divsf3+0x18>
 46c:	21 f4       	brne	.+8      	; 0x476 <__divsf3+0x16>
 46e:	5f 3f       	cpi	r21, 0xFF	; 255
 470:	19 f0       	breq	.+6      	; 0x478 <__divsf3+0x18>
 472:	eb c0       	rjmp	.+470    	; 0x64a <__fp_inf>
 474:	51 11       	cpse	r21, r1
 476:	34 c1       	rjmp	.+616    	; 0x6e0 <__fp_szero>
 478:	ee c0       	rjmp	.+476    	; 0x656 <__fp_nan>

0000047a <__divsf3x>:
 47a:	0f d1       	rcall	.+542    	; 0x69a <__fp_split3>
 47c:	98 f3       	brcs	.-26     	; 0x464 <__divsf3+0x4>

0000047e <__divsf3_pse>:
 47e:	99 23       	and	r25, r25
 480:	c9 f3       	breq	.-14     	; 0x474 <__divsf3+0x14>
 482:	55 23       	and	r21, r21
 484:	b1 f3       	breq	.-20     	; 0x472 <__divsf3+0x12>
 486:	95 1b       	sub	r25, r21
 488:	55 0b       	sbc	r21, r21
 48a:	bb 27       	eor	r27, r27
 48c:	aa 27       	eor	r26, r26
 48e:	62 17       	cp	r22, r18
 490:	73 07       	cpc	r23, r19
 492:	84 07       	cpc	r24, r20
 494:	38 f0       	brcs	.+14     	; 0x4a4 <__divsf3_pse+0x26>
 496:	9f 5f       	subi	r25, 0xFF	; 255
 498:	5f 4f       	sbci	r21, 0xFF	; 255
 49a:	22 0f       	add	r18, r18
 49c:	33 1f       	adc	r19, r19
 49e:	44 1f       	adc	r20, r20
 4a0:	aa 1f       	adc	r26, r26
 4a2:	a9 f3       	breq	.-22     	; 0x48e <__divsf3_pse+0x10>
 4a4:	33 d0       	rcall	.+102    	; 0x50c <__divsf3_pse+0x8e>
 4a6:	0e 2e       	mov	r0, r30
 4a8:	3a f0       	brmi	.+14     	; 0x4b8 <__divsf3_pse+0x3a>
 4aa:	e0 e8       	ldi	r30, 0x80	; 128
 4ac:	30 d0       	rcall	.+96     	; 0x50e <__divsf3_pse+0x90>
 4ae:	91 50       	subi	r25, 0x01	; 1
 4b0:	50 40       	sbci	r21, 0x00	; 0
 4b2:	e6 95       	lsr	r30
 4b4:	00 1c       	adc	r0, r0
 4b6:	ca f7       	brpl	.-14     	; 0x4aa <__divsf3_pse+0x2c>
 4b8:	29 d0       	rcall	.+82     	; 0x50c <__divsf3_pse+0x8e>
 4ba:	fe 2f       	mov	r31, r30
 4bc:	27 d0       	rcall	.+78     	; 0x50c <__divsf3_pse+0x8e>
 4be:	66 0f       	add	r22, r22
 4c0:	77 1f       	adc	r23, r23
 4c2:	88 1f       	adc	r24, r24
 4c4:	bb 1f       	adc	r27, r27
 4c6:	26 17       	cp	r18, r22
 4c8:	37 07       	cpc	r19, r23
 4ca:	48 07       	cpc	r20, r24
 4cc:	ab 07       	cpc	r26, r27
 4ce:	b0 e8       	ldi	r27, 0x80	; 128
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <__divsf3_pse+0x56>
 4d2:	bb 0b       	sbc	r27, r27
 4d4:	80 2d       	mov	r24, r0
 4d6:	bf 01       	movw	r22, r30
 4d8:	ff 27       	eor	r31, r31
 4da:	93 58       	subi	r25, 0x83	; 131
 4dc:	5f 4f       	sbci	r21, 0xFF	; 255
 4de:	2a f0       	brmi	.+10     	; 0x4ea <__divsf3_pse+0x6c>
 4e0:	9e 3f       	cpi	r25, 0xFE	; 254
 4e2:	51 05       	cpc	r21, r1
 4e4:	68 f0       	brcs	.+26     	; 0x500 <__divsf3_pse+0x82>
 4e6:	b1 c0       	rjmp	.+354    	; 0x64a <__fp_inf>
 4e8:	fb c0       	rjmp	.+502    	; 0x6e0 <__fp_szero>
 4ea:	5f 3f       	cpi	r21, 0xFF	; 255
 4ec:	ec f3       	brlt	.-6      	; 0x4e8 <__divsf3_pse+0x6a>
 4ee:	98 3e       	cpi	r25, 0xE8	; 232
 4f0:	dc f3       	brlt	.-10     	; 0x4e8 <__divsf3_pse+0x6a>
 4f2:	86 95       	lsr	r24
 4f4:	77 95       	ror	r23
 4f6:	67 95       	ror	r22
 4f8:	b7 95       	ror	r27
 4fa:	f7 95       	ror	r31
 4fc:	9f 5f       	subi	r25, 0xFF	; 255
 4fe:	c9 f7       	brne	.-14     	; 0x4f2 <__divsf3_pse+0x74>
 500:	88 0f       	add	r24, r24
 502:	91 1d       	adc	r25, r1
 504:	96 95       	lsr	r25
 506:	87 95       	ror	r24
 508:	97 f9       	bld	r25, 7
 50a:	08 95       	ret
 50c:	e1 e0       	ldi	r30, 0x01	; 1
 50e:	66 0f       	add	r22, r22
 510:	77 1f       	adc	r23, r23
 512:	88 1f       	adc	r24, r24
 514:	bb 1f       	adc	r27, r27
 516:	62 17       	cp	r22, r18
 518:	73 07       	cpc	r23, r19
 51a:	84 07       	cpc	r24, r20
 51c:	ba 07       	cpc	r27, r26
 51e:	20 f0       	brcs	.+8      	; 0x528 <__divsf3_pse+0xaa>
 520:	62 1b       	sub	r22, r18
 522:	73 0b       	sbc	r23, r19
 524:	84 0b       	sbc	r24, r20
 526:	ba 0b       	sbc	r27, r26
 528:	ee 1f       	adc	r30, r30
 52a:	88 f7       	brcc	.-30     	; 0x50e <__divsf3_pse+0x90>
 52c:	e0 95       	com	r30
 52e:	08 95       	ret

00000530 <__fixunssfsi>:
 530:	bc d0       	rcall	.+376    	; 0x6aa <__fp_splitA>
 532:	88 f0       	brcs	.+34     	; 0x556 <__fixunssfsi+0x26>
 534:	9f 57       	subi	r25, 0x7F	; 127
 536:	90 f0       	brcs	.+36     	; 0x55c <__fixunssfsi+0x2c>
 538:	b9 2f       	mov	r27, r25
 53a:	99 27       	eor	r25, r25
 53c:	b7 51       	subi	r27, 0x17	; 23
 53e:	a0 f0       	brcs	.+40     	; 0x568 <__fixunssfsi+0x38>
 540:	d1 f0       	breq	.+52     	; 0x576 <__fixunssfsi+0x46>
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	88 1f       	adc	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	1a f0       	brmi	.+6      	; 0x552 <__fixunssfsi+0x22>
 54c:	ba 95       	dec	r27
 54e:	c9 f7       	brne	.-14     	; 0x542 <__fixunssfsi+0x12>
 550:	12 c0       	rjmp	.+36     	; 0x576 <__fixunssfsi+0x46>
 552:	b1 30       	cpi	r27, 0x01	; 1
 554:	81 f0       	breq	.+32     	; 0x576 <__fixunssfsi+0x46>
 556:	c3 d0       	rcall	.+390    	; 0x6de <__fp_zero>
 558:	b1 e0       	ldi	r27, 0x01	; 1
 55a:	08 95       	ret
 55c:	c0 c0       	rjmp	.+384    	; 0x6de <__fp_zero>
 55e:	67 2f       	mov	r22, r23
 560:	78 2f       	mov	r23, r24
 562:	88 27       	eor	r24, r24
 564:	b8 5f       	subi	r27, 0xF8	; 248
 566:	39 f0       	breq	.+14     	; 0x576 <__fixunssfsi+0x46>
 568:	b9 3f       	cpi	r27, 0xF9	; 249
 56a:	cc f3       	brlt	.-14     	; 0x55e <__fixunssfsi+0x2e>
 56c:	86 95       	lsr	r24
 56e:	77 95       	ror	r23
 570:	67 95       	ror	r22
 572:	b3 95       	inc	r27
 574:	d9 f7       	brne	.-10     	; 0x56c <__fixunssfsi+0x3c>
 576:	3e f4       	brtc	.+14     	; 0x586 <__fixunssfsi+0x56>
 578:	90 95       	com	r25
 57a:	80 95       	com	r24
 57c:	70 95       	com	r23
 57e:	61 95       	neg	r22
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	8f 4f       	sbci	r24, 0xFF	; 255
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	08 95       	ret

00000588 <__floatunsisf>:
 588:	e8 94       	clt
 58a:	09 c0       	rjmp	.+18     	; 0x59e <__floatsisf+0x12>

0000058c <__floatsisf>:
 58c:	97 fb       	bst	r25, 7
 58e:	3e f4       	brtc	.+14     	; 0x59e <__floatsisf+0x12>
 590:	90 95       	com	r25
 592:	80 95       	com	r24
 594:	70 95       	com	r23
 596:	61 95       	neg	r22
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	8f 4f       	sbci	r24, 0xFF	; 255
 59c:	9f 4f       	sbci	r25, 0xFF	; 255
 59e:	99 23       	and	r25, r25
 5a0:	a9 f0       	breq	.+42     	; 0x5cc <__floatsisf+0x40>
 5a2:	f9 2f       	mov	r31, r25
 5a4:	96 e9       	ldi	r25, 0x96	; 150
 5a6:	bb 27       	eor	r27, r27
 5a8:	93 95       	inc	r25
 5aa:	f6 95       	lsr	r31
 5ac:	87 95       	ror	r24
 5ae:	77 95       	ror	r23
 5b0:	67 95       	ror	r22
 5b2:	b7 95       	ror	r27
 5b4:	f1 11       	cpse	r31, r1
 5b6:	f8 cf       	rjmp	.-16     	; 0x5a8 <__floatsisf+0x1c>
 5b8:	fa f4       	brpl	.+62     	; 0x5f8 <__floatsisf+0x6c>
 5ba:	bb 0f       	add	r27, r27
 5bc:	11 f4       	brne	.+4      	; 0x5c2 <__floatsisf+0x36>
 5be:	60 ff       	sbrs	r22, 0
 5c0:	1b c0       	rjmp	.+54     	; 0x5f8 <__floatsisf+0x6c>
 5c2:	6f 5f       	subi	r22, 0xFF	; 255
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	8f 4f       	sbci	r24, 0xFF	; 255
 5c8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ca:	16 c0       	rjmp	.+44     	; 0x5f8 <__floatsisf+0x6c>
 5cc:	88 23       	and	r24, r24
 5ce:	11 f0       	breq	.+4      	; 0x5d4 <__floatsisf+0x48>
 5d0:	96 e9       	ldi	r25, 0x96	; 150
 5d2:	11 c0       	rjmp	.+34     	; 0x5f6 <__floatsisf+0x6a>
 5d4:	77 23       	and	r23, r23
 5d6:	21 f0       	breq	.+8      	; 0x5e0 <__floatsisf+0x54>
 5d8:	9e e8       	ldi	r25, 0x8E	; 142
 5da:	87 2f       	mov	r24, r23
 5dc:	76 2f       	mov	r23, r22
 5de:	05 c0       	rjmp	.+10     	; 0x5ea <__floatsisf+0x5e>
 5e0:	66 23       	and	r22, r22
 5e2:	71 f0       	breq	.+28     	; 0x600 <__floatsisf+0x74>
 5e4:	96 e8       	ldi	r25, 0x86	; 134
 5e6:	86 2f       	mov	r24, r22
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	2a f0       	brmi	.+10     	; 0x5f8 <__floatsisf+0x6c>
 5ee:	9a 95       	dec	r25
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	88 1f       	adc	r24, r24
 5f6:	da f7       	brpl	.-10     	; 0x5ee <__floatsisf+0x62>
 5f8:	88 0f       	add	r24, r24
 5fa:	96 95       	lsr	r25
 5fc:	87 95       	ror	r24
 5fe:	97 f9       	bld	r25, 7
 600:	08 95       	ret

00000602 <__fp_cmp>:
 602:	99 0f       	add	r25, r25
 604:	00 08       	sbc	r0, r0
 606:	55 0f       	add	r21, r21
 608:	aa 0b       	sbc	r26, r26
 60a:	e0 e8       	ldi	r30, 0x80	; 128
 60c:	fe ef       	ldi	r31, 0xFE	; 254
 60e:	16 16       	cp	r1, r22
 610:	17 06       	cpc	r1, r23
 612:	e8 07       	cpc	r30, r24
 614:	f9 07       	cpc	r31, r25
 616:	c0 f0       	brcs	.+48     	; 0x648 <__fp_cmp+0x46>
 618:	12 16       	cp	r1, r18
 61a:	13 06       	cpc	r1, r19
 61c:	e4 07       	cpc	r30, r20
 61e:	f5 07       	cpc	r31, r21
 620:	98 f0       	brcs	.+38     	; 0x648 <__fp_cmp+0x46>
 622:	62 1b       	sub	r22, r18
 624:	73 0b       	sbc	r23, r19
 626:	84 0b       	sbc	r24, r20
 628:	95 0b       	sbc	r25, r21
 62a:	39 f4       	brne	.+14     	; 0x63a <__fp_cmp+0x38>
 62c:	0a 26       	eor	r0, r26
 62e:	61 f0       	breq	.+24     	; 0x648 <__fp_cmp+0x46>
 630:	23 2b       	or	r18, r19
 632:	24 2b       	or	r18, r20
 634:	25 2b       	or	r18, r21
 636:	21 f4       	brne	.+8      	; 0x640 <__fp_cmp+0x3e>
 638:	08 95       	ret
 63a:	0a 26       	eor	r0, r26
 63c:	09 f4       	brne	.+2      	; 0x640 <__fp_cmp+0x3e>
 63e:	a1 40       	sbci	r26, 0x01	; 1
 640:	a6 95       	lsr	r26
 642:	8f ef       	ldi	r24, 0xFF	; 255
 644:	81 1d       	adc	r24, r1
 646:	81 1d       	adc	r24, r1
 648:	08 95       	ret

0000064a <__fp_inf>:
 64a:	97 f9       	bld	r25, 7
 64c:	9f 67       	ori	r25, 0x7F	; 127
 64e:	80 e8       	ldi	r24, 0x80	; 128
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	08 95       	ret

00000656 <__fp_nan>:
 656:	9f ef       	ldi	r25, 0xFF	; 255
 658:	80 ec       	ldi	r24, 0xC0	; 192
 65a:	08 95       	ret

0000065c <__fp_pscA>:
 65c:	00 24       	eor	r0, r0
 65e:	0a 94       	dec	r0
 660:	16 16       	cp	r1, r22
 662:	17 06       	cpc	r1, r23
 664:	18 06       	cpc	r1, r24
 666:	09 06       	cpc	r0, r25
 668:	08 95       	ret

0000066a <__fp_pscB>:
 66a:	00 24       	eor	r0, r0
 66c:	0a 94       	dec	r0
 66e:	12 16       	cp	r1, r18
 670:	13 06       	cpc	r1, r19
 672:	14 06       	cpc	r1, r20
 674:	05 06       	cpc	r0, r21
 676:	08 95       	ret

00000678 <__fp_round>:
 678:	09 2e       	mov	r0, r25
 67a:	03 94       	inc	r0
 67c:	00 0c       	add	r0, r0
 67e:	11 f4       	brne	.+4      	; 0x684 <__fp_round+0xc>
 680:	88 23       	and	r24, r24
 682:	52 f0       	brmi	.+20     	; 0x698 <__fp_round+0x20>
 684:	bb 0f       	add	r27, r27
 686:	40 f4       	brcc	.+16     	; 0x698 <__fp_round+0x20>
 688:	bf 2b       	or	r27, r31
 68a:	11 f4       	brne	.+4      	; 0x690 <__fp_round+0x18>
 68c:	60 ff       	sbrs	r22, 0
 68e:	04 c0       	rjmp	.+8      	; 0x698 <__fp_round+0x20>
 690:	6f 5f       	subi	r22, 0xFF	; 255
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	8f 4f       	sbci	r24, 0xFF	; 255
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	08 95       	ret

0000069a <__fp_split3>:
 69a:	57 fd       	sbrc	r21, 7
 69c:	90 58       	subi	r25, 0x80	; 128
 69e:	44 0f       	add	r20, r20
 6a0:	55 1f       	adc	r21, r21
 6a2:	59 f0       	breq	.+22     	; 0x6ba <__fp_splitA+0x10>
 6a4:	5f 3f       	cpi	r21, 0xFF	; 255
 6a6:	71 f0       	breq	.+28     	; 0x6c4 <__fp_splitA+0x1a>
 6a8:	47 95       	ror	r20

000006aa <__fp_splitA>:
 6aa:	88 0f       	add	r24, r24
 6ac:	97 fb       	bst	r25, 7
 6ae:	99 1f       	adc	r25, r25
 6b0:	61 f0       	breq	.+24     	; 0x6ca <__fp_splitA+0x20>
 6b2:	9f 3f       	cpi	r25, 0xFF	; 255
 6b4:	79 f0       	breq	.+30     	; 0x6d4 <__fp_splitA+0x2a>
 6b6:	87 95       	ror	r24
 6b8:	08 95       	ret
 6ba:	12 16       	cp	r1, r18
 6bc:	13 06       	cpc	r1, r19
 6be:	14 06       	cpc	r1, r20
 6c0:	55 1f       	adc	r21, r21
 6c2:	f2 cf       	rjmp	.-28     	; 0x6a8 <__fp_split3+0xe>
 6c4:	46 95       	lsr	r20
 6c6:	f1 df       	rcall	.-30     	; 0x6aa <__fp_splitA>
 6c8:	08 c0       	rjmp	.+16     	; 0x6da <__fp_splitA+0x30>
 6ca:	16 16       	cp	r1, r22
 6cc:	17 06       	cpc	r1, r23
 6ce:	18 06       	cpc	r1, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	f1 cf       	rjmp	.-30     	; 0x6b6 <__fp_splitA+0xc>
 6d4:	86 95       	lsr	r24
 6d6:	71 05       	cpc	r23, r1
 6d8:	61 05       	cpc	r22, r1
 6da:	08 94       	sec
 6dc:	08 95       	ret

000006de <__fp_zero>:
 6de:	e8 94       	clt

000006e0 <__fp_szero>:
 6e0:	bb 27       	eor	r27, r27
 6e2:	66 27       	eor	r22, r22
 6e4:	77 27       	eor	r23, r23
 6e6:	cb 01       	movw	r24, r22
 6e8:	97 f9       	bld	r25, 7
 6ea:	08 95       	ret

000006ec <__gesf2>:
 6ec:	8a df       	rcall	.-236    	; 0x602 <__fp_cmp>
 6ee:	08 f4       	brcc	.+2      	; 0x6f2 <__gesf2+0x6>
 6f0:	8f ef       	ldi	r24, 0xFF	; 255
 6f2:	08 95       	ret

000006f4 <__mulsf3>:
 6f4:	0b d0       	rcall	.+22     	; 0x70c <__mulsf3x>
 6f6:	c0 cf       	rjmp	.-128    	; 0x678 <__fp_round>
 6f8:	b1 df       	rcall	.-158    	; 0x65c <__fp_pscA>
 6fa:	28 f0       	brcs	.+10     	; 0x706 <__mulsf3+0x12>
 6fc:	b6 df       	rcall	.-148    	; 0x66a <__fp_pscB>
 6fe:	18 f0       	brcs	.+6      	; 0x706 <__mulsf3+0x12>
 700:	95 23       	and	r25, r21
 702:	09 f0       	breq	.+2      	; 0x706 <__mulsf3+0x12>
 704:	a2 cf       	rjmp	.-188    	; 0x64a <__fp_inf>
 706:	a7 cf       	rjmp	.-178    	; 0x656 <__fp_nan>
 708:	11 24       	eor	r1, r1
 70a:	ea cf       	rjmp	.-44     	; 0x6e0 <__fp_szero>

0000070c <__mulsf3x>:
 70c:	c6 df       	rcall	.-116    	; 0x69a <__fp_split3>
 70e:	a0 f3       	brcs	.-24     	; 0x6f8 <__mulsf3+0x4>

00000710 <__mulsf3_pse>:
 710:	95 9f       	mul	r25, r21
 712:	d1 f3       	breq	.-12     	; 0x708 <__mulsf3+0x14>
 714:	95 0f       	add	r25, r21
 716:	50 e0       	ldi	r21, 0x00	; 0
 718:	55 1f       	adc	r21, r21
 71a:	62 9f       	mul	r22, r18
 71c:	f0 01       	movw	r30, r0
 71e:	72 9f       	mul	r23, r18
 720:	bb 27       	eor	r27, r27
 722:	f0 0d       	add	r31, r0
 724:	b1 1d       	adc	r27, r1
 726:	63 9f       	mul	r22, r19
 728:	aa 27       	eor	r26, r26
 72a:	f0 0d       	add	r31, r0
 72c:	b1 1d       	adc	r27, r1
 72e:	aa 1f       	adc	r26, r26
 730:	64 9f       	mul	r22, r20
 732:	66 27       	eor	r22, r22
 734:	b0 0d       	add	r27, r0
 736:	a1 1d       	adc	r26, r1
 738:	66 1f       	adc	r22, r22
 73a:	82 9f       	mul	r24, r18
 73c:	22 27       	eor	r18, r18
 73e:	b0 0d       	add	r27, r0
 740:	a1 1d       	adc	r26, r1
 742:	62 1f       	adc	r22, r18
 744:	73 9f       	mul	r23, r19
 746:	b0 0d       	add	r27, r0
 748:	a1 1d       	adc	r26, r1
 74a:	62 1f       	adc	r22, r18
 74c:	83 9f       	mul	r24, r19
 74e:	a0 0d       	add	r26, r0
 750:	61 1d       	adc	r22, r1
 752:	22 1f       	adc	r18, r18
 754:	74 9f       	mul	r23, r20
 756:	33 27       	eor	r19, r19
 758:	a0 0d       	add	r26, r0
 75a:	61 1d       	adc	r22, r1
 75c:	23 1f       	adc	r18, r19
 75e:	84 9f       	mul	r24, r20
 760:	60 0d       	add	r22, r0
 762:	21 1d       	adc	r18, r1
 764:	82 2f       	mov	r24, r18
 766:	76 2f       	mov	r23, r22
 768:	6a 2f       	mov	r22, r26
 76a:	11 24       	eor	r1, r1
 76c:	9f 57       	subi	r25, 0x7F	; 127
 76e:	50 40       	sbci	r21, 0x00	; 0
 770:	8a f0       	brmi	.+34     	; 0x794 <__mulsf3_pse+0x84>
 772:	e1 f0       	breq	.+56     	; 0x7ac <__mulsf3_pse+0x9c>
 774:	88 23       	and	r24, r24
 776:	4a f0       	brmi	.+18     	; 0x78a <__mulsf3_pse+0x7a>
 778:	ee 0f       	add	r30, r30
 77a:	ff 1f       	adc	r31, r31
 77c:	bb 1f       	adc	r27, r27
 77e:	66 1f       	adc	r22, r22
 780:	77 1f       	adc	r23, r23
 782:	88 1f       	adc	r24, r24
 784:	91 50       	subi	r25, 0x01	; 1
 786:	50 40       	sbci	r21, 0x00	; 0
 788:	a9 f7       	brne	.-22     	; 0x774 <__mulsf3_pse+0x64>
 78a:	9e 3f       	cpi	r25, 0xFE	; 254
 78c:	51 05       	cpc	r21, r1
 78e:	70 f0       	brcs	.+28     	; 0x7ac <__mulsf3_pse+0x9c>
 790:	5c cf       	rjmp	.-328    	; 0x64a <__fp_inf>
 792:	a6 cf       	rjmp	.-180    	; 0x6e0 <__fp_szero>
 794:	5f 3f       	cpi	r21, 0xFF	; 255
 796:	ec f3       	brlt	.-6      	; 0x792 <__mulsf3_pse+0x82>
 798:	98 3e       	cpi	r25, 0xE8	; 232
 79a:	dc f3       	brlt	.-10     	; 0x792 <__mulsf3_pse+0x82>
 79c:	86 95       	lsr	r24
 79e:	77 95       	ror	r23
 7a0:	67 95       	ror	r22
 7a2:	b7 95       	ror	r27
 7a4:	f7 95       	ror	r31
 7a6:	e7 95       	ror	r30
 7a8:	9f 5f       	subi	r25, 0xFF	; 255
 7aa:	c1 f7       	brne	.-16     	; 0x79c <__mulsf3_pse+0x8c>
 7ac:	fe 2b       	or	r31, r30
 7ae:	88 0f       	add	r24, r24
 7b0:	91 1d       	adc	r25, r1
 7b2:	96 95       	lsr	r25
 7b4:	87 95       	ror	r24
 7b6:	97 f9       	bld	r25, 7
 7b8:	08 95       	ret

000007ba <__divmodhi4>:
 7ba:	97 fb       	bst	r25, 7
 7bc:	07 2e       	mov	r0, r23
 7be:	16 f4       	brtc	.+4      	; 0x7c4 <__divmodhi4+0xa>
 7c0:	00 94       	com	r0
 7c2:	06 d0       	rcall	.+12     	; 0x7d0 <__divmodhi4_neg1>
 7c4:	77 fd       	sbrc	r23, 7
 7c6:	08 d0       	rcall	.+16     	; 0x7d8 <__divmodhi4_neg2>
 7c8:	0b d0       	rcall	.+22     	; 0x7e0 <__udivmodhi4>
 7ca:	07 fc       	sbrc	r0, 7
 7cc:	05 d0       	rcall	.+10     	; 0x7d8 <__divmodhi4_neg2>
 7ce:	3e f4       	brtc	.+14     	; 0x7de <__divmodhi4_exit>

000007d0 <__divmodhi4_neg1>:
 7d0:	90 95       	com	r25
 7d2:	81 95       	neg	r24
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	08 95       	ret

000007d8 <__divmodhi4_neg2>:
 7d8:	70 95       	com	r23
 7da:	61 95       	neg	r22
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255

000007de <__divmodhi4_exit>:
 7de:	08 95       	ret

000007e0 <__udivmodhi4>:
 7e0:	aa 1b       	sub	r26, r26
 7e2:	bb 1b       	sub	r27, r27
 7e4:	51 e1       	ldi	r21, 0x11	; 17
 7e6:	07 c0       	rjmp	.+14     	; 0x7f6 <__udivmodhi4_ep>

000007e8 <__udivmodhi4_loop>:
 7e8:	aa 1f       	adc	r26, r26
 7ea:	bb 1f       	adc	r27, r27
 7ec:	a6 17       	cp	r26, r22
 7ee:	b7 07       	cpc	r27, r23
 7f0:	10 f0       	brcs	.+4      	; 0x7f6 <__udivmodhi4_ep>
 7f2:	a6 1b       	sub	r26, r22
 7f4:	b7 0b       	sbc	r27, r23

000007f6 <__udivmodhi4_ep>:
 7f6:	88 1f       	adc	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	5a 95       	dec	r21
 7fc:	a9 f7       	brne	.-22     	; 0x7e8 <__udivmodhi4_loop>
 7fe:	80 95       	com	r24
 800:	90 95       	com	r25
 802:	bc 01       	movw	r22, r24
 804:	cd 01       	movw	r24, r26
 806:	08 95       	ret

00000808 <_exit>:
 808:	f8 94       	cli

0000080a <__stop_program>:
 80a:	ff cf       	rjmp	.-2      	; 0x80a <__stop_program>
