
Teclado_Biblioteca.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084e  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000644  00000000  00000000  00000a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000352  00000000  00000000  000010ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b8  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021b  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  64:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Inicializar_Teclado>:
void Inicializar_Teclado(void);
uint8_t Obtener_Tecla(void);
uint8_t Detectar_Tecla(uint8_t,uint8_t,uint8_t,uint8_t);

void Inicializar_Teclado(void){
	DDR_Teclado=0xF0;//(1<<DDD7)|(1<<DDD6)|(1<<DDD5)|(1<<DDD4)|(0<DDD3)|(0<<DDD2)|(0<<DDD1)|(0<<DDD0);
  6c:	80 ef       	ldi	r24, 0xF0	; 240
  6e:	81 bb       	out	0x11, r24	; 17
	Puerto_Teclado=0xFF;//(1<<PB7)|(1<<PB6)|(1<<PB5)|(1<<PB4)|(1<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	82 bb       	out	0x12, r24	; 18
  74:	08 95       	ret

00000076 <Detectar_Tecla>:
	else{
	return Tecla_Nula;}
}

uint8_t Detectar_Tecla(uint8_t C1,uint8_t C2,uint8_t C3,uint8_t C4){
	uint8_t var=Pin_Teclado&(0x0F);
  76:	90 b3       	in	r25, 0x10	; 16
  78:	9f 70       	andi	r25, 0x0F	; 15
	uint8_t Tecla_Presionada=Tecla_Nula;
	if (var==0x0E){//((1<<PB3)|(1<<PB2)|(1<<PB1)|(0<<PB0))
  7a:	9e 30       	cpi	r25, 0x0E	; 14
  7c:	69 f0       	breq	.+26     	; 0x98 <Detectar_Tecla+0x22>
		Tecla_Presionada=C4;
	}
	else if(var==0x0D){//((1<<PB3)|(1<<PB2)|(0<<PB1)|(1<<PB0))
  7e:	9d 30       	cpi	r25, 0x0D	; 13
  80:	31 f0       	breq	.+12     	; 0x8e <Detectar_Tecla+0x18>
		Tecla_Presionada=C3;
	}
	else if(var==0x0B){//((1<<PB3)|(1<<PB2)|(0<<PB1)|(1<<PB0))
  82:	9b 30       	cpi	r25, 0x0B	; 11
  84:	31 f0       	breq	.+12     	; 0x92 <Detectar_Tecla+0x1c>
		Tecla_Presionada=C2;
	}
	else if(var==0x07){//((0<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0))
  86:	97 30       	cpi	r25, 0x07	; 7
  88:	31 f4       	brne	.+12     	; 0x96 <Detectar_Tecla+0x20>
		Tecla_Presionada=C1;
  8a:	28 2f       	mov	r18, r24
  8c:	05 c0       	rjmp	.+10     	; 0x98 <Detectar_Tecla+0x22>
	uint8_t Tecla_Presionada=Tecla_Nula;
	if (var==0x0E){//((1<<PB3)|(1<<PB2)|(1<<PB1)|(0<<PB0))
		Tecla_Presionada=C4;
	}
	else if(var==0x0D){//((1<<PB3)|(1<<PB2)|(0<<PB1)|(1<<PB0))
		Tecla_Presionada=C3;
  8e:	24 2f       	mov	r18, r20
  90:	03 c0       	rjmp	.+6      	; 0x98 <Detectar_Tecla+0x22>
	}
	else if(var==0x0B){//((1<<PB3)|(1<<PB2)|(0<<PB1)|(1<<PB0))
		Tecla_Presionada=C2;
  92:	26 2f       	mov	r18, r22
  94:	01 c0       	rjmp	.+2      	; 0x98 <Detectar_Tecla+0x22>
	return Tecla_Nula;}
}

uint8_t Detectar_Tecla(uint8_t C1,uint8_t C2,uint8_t C3,uint8_t C4){
	uint8_t var=Pin_Teclado&(0x0F);
	uint8_t Tecla_Presionada=Tecla_Nula;
  96:	2b ee       	ldi	r18, 0xEB	; 235
	}
	else if(var==0x07){//((0<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0))
		Tecla_Presionada=C1;
	}
	return Tecla_Presionada;
  98:	82 2f       	mov	r24, r18
  9a:	08 95       	ret

0000009c <Obtener_Tecla>:
	Puerto_Teclado=0xFF;//(1<<PB7)|(1<<PB6)|(1<<PB5)|(1<<PB4)|(1<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
}

uint8_t Obtener_Tecla(void){//Filas(7-4) Salidas, Columnas(3-0) Entradas
	uint8_t Tecla, Entrada;
	Puerto_Teclado=0x0F;//(0<<PB7)|(0<<PB6)|(0<<PB5)|(0<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);//Verificar Estado sin modificar pullup.
  9c:	8f e0       	ldi	r24, 0x0F	; 15
  9e:	82 bb       	out	0x12, r24	; 18
	Entrada=Pin_Teclado&(0x0F);
  a0:	80 b3       	in	r24, 0x10	; 16
	if(Entrada<0x0F){
  a2:	8f 70       	andi	r24, 0x0F	; 15
  a4:	8f 30       	cpi	r24, 0x0F	; 15
  a6:	08 f0       	brcs	.+2      	; 0xaa <Obtener_Tecla+0xe>
  a8:	3f c0       	rjmp	.+126    	; 0x128 <Obtener_Tecla+0x8c>
		Puerto_Teclado=0x7F;//(0<<PB7)|(1<<PB6)|(1<<PB5)|(1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
  aa:	8f e7       	ldi	r24, 0x7F	; 127
  ac:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	89 ef       	ldi	r24, 0xF9	; 249
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <Obtener_Tecla+0x16>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <Obtener_Tecla+0x1c>
  b8:	00 00       	nop
		_delay_ms(1);
		Tecla=Detectar_Tecla(Tecla_1,Tecla_2,Tecla_3,Tecla_A);
  ba:	21 e4       	ldi	r18, 0x41	; 65
  bc:	43 e3       	ldi	r20, 0x33	; 51
  be:	62 e3       	ldi	r22, 0x32	; 50
  c0:	81 e3       	ldi	r24, 0x31	; 49
  c2:	0e 94 3b 00 	call	0x76	; 0x76 <Detectar_Tecla>
		if (Tecla==Tecla_Nula)
  c6:	8b 3e       	cpi	r24, 0xEB	; 235
  c8:	81 f5       	brne	.+96     	; 0x12a <Obtener_Tecla+0x8e>
		{
			Puerto_Teclado=0xBF;//(1<<PB7)|(0<<PB6)|(1<PB5)|(1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
  ca:	8f eb       	ldi	r24, 0xBF	; 191
  cc:	82 bb       	out	0x12, r24	; 18
  ce:	89 ef       	ldi	r24, 0xF9	; 249
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <Obtener_Tecla+0x36>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <Obtener_Tecla+0x3c>
  d8:	00 00       	nop
			_delay_ms(1);
			Tecla=Detectar_Tecla(Tecla_4,Tecla_5,Tecla_6,Tecla_B);
  da:	22 e4       	ldi	r18, 0x42	; 66
  dc:	46 e3       	ldi	r20, 0x36	; 54
  de:	65 e3       	ldi	r22, 0x35	; 53
  e0:	84 e3       	ldi	r24, 0x34	; 52
  e2:	0e 94 3b 00 	call	0x76	; 0x76 <Detectar_Tecla>
			if (Tecla==Tecla_Nula)
  e6:	8b 3e       	cpi	r24, 0xEB	; 235
  e8:	01 f5       	brne	.+64     	; 0x12a <Obtener_Tecla+0x8e>
			{
				Puerto_Teclado=0xDF;//(1<<PB7)|(1<<PB6)|(0<<PB5)|(1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
  ea:	8f ed       	ldi	r24, 0xDF	; 223
  ec:	82 bb       	out	0x12, r24	; 18
  ee:	89 ef       	ldi	r24, 0xF9	; 249
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <Obtener_Tecla+0x56>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <Obtener_Tecla+0x5c>
  f8:	00 00       	nop
				_delay_ms(1);
				Tecla=Detectar_Tecla(Tecla_7,Tecla_8,Tecla_9,Tecla_C);
  fa:	23 e4       	ldi	r18, 0x43	; 67
  fc:	49 e3       	ldi	r20, 0x39	; 57
  fe:	68 e3       	ldi	r22, 0x38	; 56
 100:	87 e3       	ldi	r24, 0x37	; 55
 102:	0e 94 3b 00 	call	0x76	; 0x76 <Detectar_Tecla>
				if (Tecla==Tecla_Nula)
 106:	8b 3e       	cpi	r24, 0xEB	; 235
 108:	81 f4       	brne	.+32     	; 0x12a <Obtener_Tecla+0x8e>
				{
					Puerto_Teclado=0xEF;//(1<<PB7)|(1<<PB6)|(1<<PB5)|(0<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
 10a:	8f ee       	ldi	r24, 0xEF	; 239
 10c:	82 bb       	out	0x12, r24	; 18
 10e:	89 ef       	ldi	r24, 0xF9	; 249
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <Obtener_Tecla+0x76>
 116:	00 c0       	rjmp	.+0      	; 0x118 <Obtener_Tecla+0x7c>
 118:	00 00       	nop
					_delay_ms(1);
					Tecla=Detectar_Tecla(Tecla_Ast,Tecla_0,Tecla_Num,Tecla_D);
 11a:	24 e4       	ldi	r18, 0x44	; 68
 11c:	43 e2       	ldi	r20, 0x23	; 35
 11e:	60 e3       	ldi	r22, 0x30	; 48
 120:	8a e2       	ldi	r24, 0x2A	; 42
 122:	0e 94 3b 00 	call	0x76	; 0x76 <Detectar_Tecla>
 126:	08 95       	ret
			}
		}
		return Tecla;
	}
	else{
	return Tecla_Nula;}
 128:	8b ee       	ldi	r24, 0xEB	; 235
}
 12a:	08 95       	ret

0000012c <main>:
#include <avr/io.h>
#include <Teclado_Matricial_lib.h>

int main(void)
{
	DDRA=0xFF;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	8a bb       	out	0x1a, r24	; 26
	Inicializar_Teclado();
 130:	0e 94 36 00 	call	0x6c	; 0x6c <Inicializar_Teclado>
    /* Replace with your application code */
    while (1) 
    {
		PORTA=Obtener_Tecla();
 134:	0e 94 4e 00 	call	0x9c	; 0x9c <Obtener_Tecla>
 138:	8b bb       	out	0x1b, r24	; 27
 13a:	fc cf       	rjmp	.-8      	; 0x134 <main+0x8>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
