
328_i2c_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000035a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f89  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082e  00000000  00000000  000013ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fc  00000000  00000000  00001c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dc  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000661  00000000  00000000  0000295c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002fbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
  88:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_requested>:
{
  // clear acknowledge and enable bits
  cli();
  TWCR = 0;
  TWAR = 0;
  sei();
  90:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <data>
  94:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  98:	08 95       	ret

0000009a <LCD_cmd>:
  9a:	28 2f       	mov	r18, r24
  9c:	20 7f       	andi	r18, 0xF0	; 240
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	35 95       	asr	r19
  a2:	27 95       	ror	r18
  a4:	35 95       	asr	r19
  a6:	27 95       	ror	r18
  a8:	25 b9       	out	0x05, r18	; 5
  aa:	92 2f       	mov	r25, r18
  ac:	92 60       	ori	r25, 0x02	; 2
  ae:	95 b9       	out	0x05, r25	; 5
  b0:	e9 ef       	ldi	r30, 0xF9	; 249
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_cmd+0x1a>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_cmd+0x20>
  ba:	00 00       	nop
  bc:	25 b9       	out	0x05, r18	; 5
  be:	e9 ef       	ldi	r30, 0xF9	; 249
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_cmd+0x28>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_cmd+0x2e>
  c8:	00 00       	nop
  ca:	95 b1       	in	r25, 0x05	; 5
  cc:	9c 73       	andi	r25, 0x3C	; 60
  ce:	95 b9       	out	0x05, r25	; 5
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	99 27       	eor	r25, r25
  da:	95 95       	asr	r25
  dc:	87 95       	ror	r24
  de:	95 95       	asr	r25
  e0:	87 95       	ror	r24
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	98 2f       	mov	r25, r24
  e6:	92 60       	ori	r25, 0x02	; 2
  e8:	95 b9       	out	0x05, r25	; 5
  ea:	e9 ef       	ldi	r30, 0xF9	; 249
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_cmd+0x54>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_cmd+0x5a>
  f4:	00 00       	nop
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	89 ef       	ldi	r24, 0xF9	; 249
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_cmd+0x62>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_cmd+0x68>
 102:	00 00       	nop
 104:	08 95       	ret

00000106 <LCD_init>:
 106:	8f e3       	ldi	r24, 0x3F	; 63
 108:	84 b9       	out	0x04, r24	; 4
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	15 b8       	out	0x05, r1	; 5
 10e:	83 e3       	ldi	r24, 0x33	; 51
 110:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_cmd>
 114:	8f e0       	ldi	r24, 0x0F	; 15
 116:	97 e2       	ldi	r25, 0x27	; 39
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_init+0x12>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_init+0x18>
 11e:	00 00       	nop
 120:	82 e3       	ldi	r24, 0x32	; 50
 122:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_cmd>
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	97 e2       	ldi	r25, 0x27	; 39
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_init+0x24>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_init+0x2a>
 130:	00 00       	nop
 132:	88 e2       	ldi	r24, 0x28	; 40
 134:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_cmd>
 138:	83 ec       	ldi	r24, 0xC3	; 195
 13a:	99 e0       	ldi	r25, 0x09	; 9
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_init+0x36>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_init+0x3c>
 142:	00 00       	nop
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_cmd>
 14a:	83 ec       	ldi	r24, 0xC3	; 195
 14c:	99 e0       	ldi	r25, 0x09	; 9
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_init+0x48>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_init+0x4e>
 154:	00 00       	nop
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_cmd>
 15c:	83 ec       	ldi	r24, 0xC3	; 195
 15e:	99 e0       	ldi	r25, 0x09	; 9
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_init+0x5a>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_init+0x60>
 166:	00 00       	nop
 168:	86 e0       	ldi	r24, 0x06	; 6
 16a:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_cmd>
 16e:	83 ec       	ldi	r24, 0xC3	; 195
 170:	99 e0       	ldi	r25, 0x09	; 9
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_init+0x6c>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_init+0x72>
 178:	00 00       	nop
 17a:	08 95       	ret

0000017c <LCD_data>:
 17c:	9f e3       	ldi	r25, 0x3F	; 63
 17e:	94 b9       	out	0x04, r25	; 4
 180:	15 b8       	out	0x05, r1	; 5
 182:	28 2f       	mov	r18, r24
 184:	20 7f       	andi	r18, 0xF0	; 240
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	35 95       	asr	r19
 18a:	27 95       	ror	r18
 18c:	35 95       	asr	r19
 18e:	27 95       	ror	r18
 190:	92 2f       	mov	r25, r18
 192:	91 60       	ori	r25, 0x01	; 1
 194:	95 b9       	out	0x05, r25	; 5
 196:	23 60       	ori	r18, 0x03	; 3
 198:	25 b9       	out	0x05, r18	; 5
 19a:	e9 ef       	ldi	r30, 0xF9	; 249
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LCD_data+0x22>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <LCD_data+0x28>
 1a4:	00 00       	nop
 1a6:	95 b9       	out	0x05, r25	; 5
 1a8:	e9 ef       	ldi	r30, 0xF9	; 249
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_data+0x30>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_data+0x36>
 1b2:	00 00       	nop
 1b4:	f0 e1       	ldi	r31, 0x10	; 16
 1b6:	8f 9f       	mul	r24, r31
 1b8:	c0 01       	movw	r24, r0
 1ba:	11 24       	eor	r1, r1
 1bc:	99 27       	eor	r25, r25
 1be:	95 95       	asr	r25
 1c0:	87 95       	ror	r24
 1c2:	95 95       	asr	r25
 1c4:	87 95       	ror	r24
 1c6:	98 2f       	mov	r25, r24
 1c8:	91 60       	ori	r25, 0x01	; 1
 1ca:	95 b9       	out	0x05, r25	; 5
 1cc:	83 60       	ori	r24, 0x03	; 3
 1ce:	85 b9       	out	0x05, r24	; 5
 1d0:	e9 ef       	ldi	r30, 0xF9	; 249
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_data+0x58>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_data+0x5e>
 1da:	00 00       	nop
 1dc:	95 b9       	out	0x05, r25	; 5
 1de:	89 ef       	ldi	r24, 0xF9	; 249
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_data+0x66>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCD_data+0x6c>
 1e8:	00 00       	nop
 1ea:	08 95       	ret

000001ec <I2C_received>:
 1ec:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <data>
 1f0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <data>
 1f4:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_data>
 1f8:	08 95       	ret

000001fa <I2C_init>:
 1fa:	f8 94       	cli
 1fc:	88 0f       	add	r24, r24
 1fe:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
 202:	85 ec       	ldi	r24, 0xC5	; 197
 204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 208:	78 94       	sei
 20a:	08 95       	ret

0000020c <__vector_24>:
}

ISR(TWI_vect)
{
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
  switch(TW_STATUS)
 22e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 232:	88 7f       	andi	r24, 0xF8	; 248
 234:	80 38       	cpi	r24, 0x80	; 128
 236:	49 f0       	breq	.+18     	; 0x24a <__vector_24+0x3e>
 238:	18 f4       	brcc	.+6      	; 0x240 <__vector_24+0x34>
 23a:	88 23       	and	r24, r24
 23c:	19 f1       	breq	.+70     	; 0x284 <__vector_24+0x78>
 23e:	28 c0       	rjmp	.+80     	; 0x290 <__vector_24+0x84>
 240:	88 3a       	cpi	r24, 0xA8	; 168
 242:	71 f0       	breq	.+28     	; 0x260 <__vector_24+0x54>
 244:	88 3b       	cpi	r24, 0xB8	; 184
 246:	a9 f0       	breq	.+42     	; 0x272 <__vector_24+0x66>
 248:	23 c0       	rjmp	.+70     	; 0x290 <__vector_24+0x84>
  {
    case TW_SR_DATA_ACK:
      // received data from master, call the receive callback
      I2C_recv(TWDR); 
 24a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 24e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <I2C_recv>
 252:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <I2C_recv+0x1>
 256:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 258:	85 ec       	ldi	r24, 0xC5	; 197
 25a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      break;
 25e:	1b c0       	rjmp	.+54     	; 0x296 <__vector_24+0x8a>
    case TW_ST_SLA_ACK:
      // master is requesting data, call the request callback
      I2C_req();
 260:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 264:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 268:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 26a:	85 ec       	ldi	r24, 0xC5	; 197
 26c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      break;
 270:	12 c0       	rjmp	.+36     	; 0x296 <__vector_24+0x8a>
    case TW_ST_DATA_ACK:
      // master is requesting data, call the request callback
      I2C_req();
 272:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 276:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 27a:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 27c:	85 ec       	ldi	r24, 0xC5	; 197
 27e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      break;
 282:	09 c0       	rjmp	.+18     	; 0x296 <__vector_24+0x8a>
    case TW_BUS_ERROR:
      // some sort of erroneous state, prepare TWI to be readdressed
      TWCR = 0;
 284:	ec eb       	ldi	r30, 0xBC	; 188
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	10 82       	st	Z, r1
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN); 
 28a:	85 ec       	ldi	r24, 0xC5	; 197
 28c:	80 83       	st	Z, r24
      break;
 28e:	03 c0       	rjmp	.+6      	; 0x296 <__vector_24+0x8a>
    default:
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 290:	85 ec       	ldi	r24, 0xC5	; 197
 292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      break;
  }
} 
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <setup>:
static void (*I2C_recv)(uint8_t);		//isr routines for i2c
static void (*I2C_req)();

void I2C_setCallbacks(void (*recv)(uint8_t), void (*req)())
{
  I2C_recv = recv;
 2b8:	86 ef       	ldi	r24, 0xF6	; 246
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <I2C_recv+0x1>
 2c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <I2C_recv>
  I2C_req = req;
 2c4:	88 e4       	ldi	r24, 0x48	; 72
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
{
	// set received/requested callbacks
	I2C_setCallbacks(I2C_received, I2C_requested);

	// init I2C
	I2C_init(I2C_ADDR);
 2d0:	80 e1       	ldi	r24, 0x10	; 16
 2d2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <I2C_init>
 2d6:	08 95       	ret

000002d8 <main>:
}

int main()
{
	setup();		//in this we only print the received data and echo it back when data is requested from master
 2d8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <setup>
	LCD_init();
 2dc:	0e 94 83 00 	call	0x106	; 0x106 <LCD_init>
	// Main program loop
	while(1);
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <main+0x8>

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
