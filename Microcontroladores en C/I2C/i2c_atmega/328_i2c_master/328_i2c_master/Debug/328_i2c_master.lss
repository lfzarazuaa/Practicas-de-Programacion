
328_i2c_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000492  00000526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000492  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010e  0080010e  00000534  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f7  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087f  00000000  00000000  0000194b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c9  00000000  00000000  000021ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00002a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c0  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1b  00000000  00000000  0000314c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003d67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
   4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
   8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
   c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  1c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  24:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  40:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  48:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  4c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  54:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  58:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  5c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  60:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  68:	a3 01       	movw	r20, r6
  6a:	a5 01       	movw	r20, r10
  6c:	a5 01       	movw	r20, r10
  6e:	a5 01       	movw	r20, r10
  70:	a1 01       	movw	r20, r2
  72:	a5 01       	movw	r20, r10
  74:	9f 01       	movw	r18, r30
  76:	9d 01       	movw	r18, r26
  78:	a5 01       	movw	r20, r10
  7a:	a5 01       	movw	r20, r10
  7c:	a5 01       	movw	r20, r10
  7e:	a5 01       	movw	r20, r10
  80:	a5 01       	movw	r20, r10
  82:	a5 01       	movw	r20, r10
  84:	a5 01       	movw	r20, r10
  86:	a5 01       	movw	r20, r10
  88:	a5 01       	movw	r20, r10
  8a:	a5 01       	movw	r20, r10
  8c:	a5 01       	movw	r20, r10
  8e:	a5 01       	movw	r20, r10
  90:	a5 01       	movw	r20, r10
  92:	a5 01       	movw	r20, r10
  94:	a5 01       	movw	r20, r10
  96:	a5 01       	movw	r20, r10
  98:	a5 01       	movw	r20, r10
  9a:	a5 01       	movw	r20, r10
  9c:	a5 01       	movw	r20, r10
  9e:	a5 01       	movw	r20, r10
  a0:	a5 01       	movw	r20, r10
  a2:	a5 01       	movw	r20, r10
  a4:	a5 01       	movw	r20, r10
  a6:	a5 01       	movw	r20, r10
  a8:	9b 01       	movw	r18, r22
  aa:	a5 01       	movw	r20, r10
  ac:	a5 01       	movw	r20, r10
  ae:	a5 01       	movw	r20, r10
  b0:	99 01       	movw	r18, r18
  b2:	a5 01       	movw	r20, r10
  b4:	97 01       	movw	r18, r14
  b6:	95 01       	movw	r18, r10
  b8:	a5 01       	movw	r20, r10
  ba:	a5 01       	movw	r20, r10
  bc:	a5 01       	movw	r20, r10
  be:	a5 01       	movw	r20, r10
  c0:	a5 01       	movw	r20, r10
  c2:	a5 01       	movw	r20, r10
  c4:	a5 01       	movw	r20, r10
  c6:	a5 01       	movw	r20, r10
  c8:	93 01       	movw	r18, r6
  ca:	a5 01       	movw	r20, r10
  cc:	a5 01       	movw	r20, r10
  ce:	a5 01       	movw	r20, r10
  d0:	91 01       	movw	r18, r2
  d2:	a5 01       	movw	r20, r10
  d4:	8f 01       	movw	r16, r30
  d6:	ae 01       	movw	r20, r28

000000d8 <__ctors_end>:
  d8:	11 24       	eor	r1, r1
  da:	1f be       	out	0x3f, r1	; 63
  dc:	cf ef       	ldi	r28, 0xFF	; 255
  de:	d8 e0       	ldi	r29, 0x08	; 8
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
  e4:	11 e0       	ldi	r17, 0x01	; 1
  e6:	a0 e0       	ldi	r26, 0x00	; 0
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	e2 e9       	ldi	r30, 0x92	; 146
  ec:	f4 e0       	ldi	r31, 0x04	; 4
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <__do_copy_data+0x10>
  f0:	05 90       	lpm	r0, Z+
  f2:	0d 92       	st	X+, r0
  f4:	ae 30       	cpi	r26, 0x0E	; 14
  f6:	b1 07       	cpc	r27, r17
  f8:	d9 f7       	brne	.-10     	; 0xf0 <__do_copy_data+0xc>

000000fa <__do_clear_bss>:
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	ae e0       	ldi	r26, 0x0E	; 14
  fe:	b1 e0       	ldi	r27, 0x01	; 1
 100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
 102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
 104:	af 30       	cpi	r26, 0x0F	; 15
 106:	b2 07       	cpc	r27, r18
 108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>
 10a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
 10e:	0c 94 47 02 	jmp	0x48e	; 0x48e <_exit>

00000112 <__bad_interrupt>:
 112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <LCD_cmd>:
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 116:	28 2f       	mov	r18, r24
 118:	20 7f       	andi	r18, 0xF0	; 240
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	35 95       	asr	r19
 11e:	27 95       	ror	r18
 120:	35 95       	asr	r19
 122:	27 95       	ror	r18
 124:	25 b9       	out	0x05, r18	; 5
 126:	92 2f       	mov	r25, r18
 128:	92 60       	ori	r25, 0x02	; 2
 12a:	95 b9       	out	0x05, r25	; 5
 12c:	e9 ef       	ldi	r30, 0xF9	; 249
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_cmd+0x1a>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_cmd+0x20>
 136:	00 00       	nop
 138:	25 b9       	out	0x05, r18	; 5
 13a:	e9 ef       	ldi	r30, 0xF9	; 249
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_cmd+0x28>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_cmd+0x2e>
 144:	00 00       	nop
 146:	95 b1       	in	r25, 0x05	; 5
 148:	9c 73       	andi	r25, 0x3C	; 60
 14a:	95 b9       	out	0x05, r25	; 5
 14c:	f0 e1       	ldi	r31, 0x10	; 16
 14e:	8f 9f       	mul	r24, r31
 150:	c0 01       	movw	r24, r0
 152:	11 24       	eor	r1, r1
 154:	99 27       	eor	r25, r25
 156:	95 95       	asr	r25
 158:	87 95       	ror	r24
 15a:	95 95       	asr	r25
 15c:	87 95       	ror	r24
 15e:	85 b9       	out	0x05, r24	; 5
 160:	98 2f       	mov	r25, r24
 162:	92 60       	ori	r25, 0x02	; 2
 164:	95 b9       	out	0x05, r25	; 5
 166:	e9 ef       	ldi	r30, 0xF9	; 249
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_cmd+0x54>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_cmd+0x5a>
 170:	00 00       	nop
 172:	85 b9       	out	0x05, r24	; 5
 174:	89 ef       	ldi	r24, 0xF9	; 249
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_cmd+0x62>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_cmd+0x68>
 17e:	00 00       	nop
 180:	08 95       	ret

00000182 <LCD_init>:
 182:	8f e3       	ldi	r24, 0x3F	; 63
 184:	84 b9       	out	0x04, r24	; 4
 186:	85 b1       	in	r24, 0x05	; 5
 188:	15 b8       	out	0x05, r1	; 5
 18a:	83 e3       	ldi	r24, 0x33	; 51
 18c:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_cmd>
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	97 e2       	ldi	r25, 0x27	; 39
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_init+0x12>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_init+0x18>
 19a:	00 00       	nop
 19c:	82 e3       	ldi	r24, 0x32	; 50
 19e:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_cmd>
 1a2:	8f e0       	ldi	r24, 0x0F	; 15
 1a4:	97 e2       	ldi	r25, 0x27	; 39
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_init+0x24>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_init+0x2a>
 1ac:	00 00       	nop
 1ae:	88 e2       	ldi	r24, 0x28	; 40
 1b0:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_cmd>
 1b4:	83 ec       	ldi	r24, 0xC3	; 195
 1b6:	99 e0       	ldi	r25, 0x09	; 9
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_init+0x36>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_init+0x3c>
 1be:	00 00       	nop
 1c0:	8c e0       	ldi	r24, 0x0C	; 12
 1c2:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_cmd>
 1c6:	83 ec       	ldi	r24, 0xC3	; 195
 1c8:	99 e0       	ldi	r25, 0x09	; 9
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_init+0x48>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_init+0x4e>
 1d0:	00 00       	nop
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_cmd>
 1d8:	83 ec       	ldi	r24, 0xC3	; 195
 1da:	99 e0       	ldi	r25, 0x09	; 9
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_init+0x5a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_init+0x60>
 1e2:	00 00       	nop
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_cmd>
 1ea:	83 ec       	ldi	r24, 0xC3	; 195
 1ec:	99 e0       	ldi	r25, 0x09	; 9
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_init+0x6c>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_init+0x72>
 1f4:	00 00       	nop
 1f6:	08 95       	ret

000001f8 <LCD_data>:
 1f8:	9f e3       	ldi	r25, 0x3F	; 63
 1fa:	94 b9       	out	0x04, r25	; 4
 1fc:	15 b8       	out	0x05, r1	; 5
 1fe:	28 2f       	mov	r18, r24
 200:	20 7f       	andi	r18, 0xF0	; 240
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	35 95       	asr	r19
 206:	27 95       	ror	r18
 208:	35 95       	asr	r19
 20a:	27 95       	ror	r18
 20c:	92 2f       	mov	r25, r18
 20e:	91 60       	ori	r25, 0x01	; 1
 210:	95 b9       	out	0x05, r25	; 5
 212:	23 60       	ori	r18, 0x03	; 3
 214:	25 b9       	out	0x05, r18	; 5
 216:	e9 ef       	ldi	r30, 0xF9	; 249
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCD_data+0x22>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <LCD_data+0x28>
 220:	00 00       	nop
 222:	95 b9       	out	0x05, r25	; 5
 224:	e9 ef       	ldi	r30, 0xF9	; 249
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_data+0x30>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_data+0x36>
 22e:	00 00       	nop
 230:	f0 e1       	ldi	r31, 0x10	; 16
 232:	8f 9f       	mul	r24, r31
 234:	c0 01       	movw	r24, r0
 236:	11 24       	eor	r1, r1
 238:	99 27       	eor	r25, r25
 23a:	95 95       	asr	r25
 23c:	87 95       	ror	r24
 23e:	95 95       	asr	r25
 240:	87 95       	ror	r24
 242:	98 2f       	mov	r25, r24
 244:	91 60       	ori	r25, 0x01	; 1
 246:	95 b9       	out	0x05, r25	; 5
 248:	83 60       	ori	r24, 0x03	; 3
 24a:	85 b9       	out	0x05, r24	; 5
 24c:	e9 ef       	ldi	r30, 0xF9	; 249
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_data+0x58>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_data+0x5e>
 256:	00 00       	nop
 258:	95 b9       	out	0x05, r25	; 5
 25a:	89 ef       	ldi	r24, 0xF9	; 249
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <LCD_data+0x66>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LCD_data+0x6c>
 264:	00 00       	nop
 266:	08 95       	ret

00000268 <LCD_string>:
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	ec 01       	movw	r28, r24
 26e:	88 81       	ld	r24, Y
 270:	88 23       	and	r24, r24
 272:	31 f0       	breq	.+12     	; 0x280 <LCD_string+0x18>
 274:	21 96       	adiw	r28, 0x01	; 1
 276:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_data>
 27a:	89 91       	ld	r24, Y+
 27c:	81 11       	cpse	r24, r1
 27e:	fb cf       	rjmp	.-10     	; 0x276 <LCD_string+0xe>
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <keypad_init>:
 286:	1b b8       	out	0x0b, r1	; 11
 288:	8f e3       	ldi	r24, 0x3F	; 63
 28a:	8a b9       	out	0x0a, r24	; 10
 28c:	08 95       	ret

0000028e <get_key_pressed>:
 28e:	0e 94 43 01 	call	0x286	; 0x286 <keypad_init>
 292:	8f e8       	ldi	r24, 0x8F	; 143
 294:	8a b9       	out	0x0a, r24	; 10
 296:	8f e7       	ldi	r24, 0x7F	; 127
 298:	8b b9       	out	0x0b, r24	; 11
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	a9 ef       	ldi	r26, 0xF9	; 249
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	11 97       	sbiw	r26, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <get_key_pressed+0x18>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <get_key_pressed+0x1e>
 2ac:	00 00       	nop
 2ae:	fa 01       	movw	r30, r20
 2b0:	08 2e       	mov	r0, r24
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <get_key_pressed+0x2a>
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <get_key_pressed+0x26>
 2bc:	2e 2f       	mov	r18, r30
 2be:	20 95       	com	r18
 2c0:	2b b9       	out	0x0b, r18	; 11
 2c2:	a9 ef       	ldi	r26, 0xF9	; 249
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	11 97       	sbiw	r26, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <get_key_pressed+0x38>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <get_key_pressed+0x3e>
 2cc:	00 00       	nop
 2ce:	29 b1       	in	r18, 0x09	; 9
 2d0:	2f 68       	ori	r18, 0x8F	; 143
 2d2:	2f 3f       	cpi	r18, 0xFF	; 255
 2d4:	e1 f1       	breq	.+120    	; 0x34e <get_key_pressed+0xc0>
 2d6:	a1 ee       	ldi	r26, 0xE1	; 225
 2d8:	b4 e0       	ldi	r27, 0x04	; 4
 2da:	11 97       	sbiw	r26, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <get_key_pressed+0x4c>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <get_key_pressed+0x52>
 2e0:	00 00       	nop
 2e2:	29 b1       	in	r18, 0x09	; 9
 2e4:	2f 68       	ori	r18, 0x8F	; 143
 2e6:	2f 3f       	cpi	r18, 0xFF	; 255
 2e8:	91 f1       	breq	.+100    	; 0x34e <get_key_pressed+0xc0>
 2ea:	e0 95       	com	r30
 2ec:	ef 70       	andi	r30, 0x0F	; 15
 2ee:	20 7f       	andi	r18, 0xF0	; 240
 2f0:	e2 2b       	or	r30, r18
 2f2:	89 b1       	in	r24, 0x09	; 9
 2f4:	8f 68       	ori	r24, 0x8F	; 143
 2f6:	8f 3f       	cpi	r24, 0xFF	; 255
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <get_key_pressed+0x64>
 2fa:	89 ef       	ldi	r24, 0xF9	; 249
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <get_key_pressed+0x70>
 302:	00 c0       	rjmp	.+0      	; 0x304 <get_key_pressed+0x76>
 304:	00 00       	nop
 306:	8e 2f       	mov	r24, r30
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	fc 01       	movw	r30, r24
 30c:	e7 5b       	subi	r30, 0xB7	; 183
 30e:	f1 09       	sbc	r31, r1
 310:	e8 33       	cpi	r30, 0x38	; 56
 312:	f1 05       	cpc	r31, r1
 314:	d0 f4       	brcc	.+52     	; 0x34a <get_key_pressed+0xbc>
 316:	ec 5c       	subi	r30, 0xCC	; 204
 318:	ff 4f       	sbci	r31, 0xFF	; 255
 31a:	0c 94 41 02 	jmp	0x482	; 0x482 <__tablejump2__>
 31e:	87 e3       	ldi	r24, 0x37	; 55
 320:	08 95       	ret
 322:	84 e3       	ldi	r24, 0x34	; 52
 324:	08 95       	ret
 326:	81 e3       	ldi	r24, 0x31	; 49
 328:	08 95       	ret
 32a:	80 e3       	ldi	r24, 0x30	; 48
 32c:	08 95       	ret
 32e:	88 e3       	ldi	r24, 0x38	; 56
 330:	08 95       	ret
 332:	85 e3       	ldi	r24, 0x35	; 53
 334:	08 95       	ret
 336:	82 e3       	ldi	r24, 0x32	; 50
 338:	08 95       	ret
 33a:	83 e2       	ldi	r24, 0x23	; 35
 33c:	08 95       	ret
 33e:	89 e3       	ldi	r24, 0x39	; 57
 340:	08 95       	ret
 342:	86 e3       	ldi	r24, 0x36	; 54
 344:	08 95       	ret
 346:	83 e3       	ldi	r24, 0x33	; 51
 348:	08 95       	ret
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	08 95       	ret
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	84 30       	cpi	r24, 0x04	; 4
 352:	91 05       	cpc	r25, r1
 354:	09 f0       	breq	.+2      	; 0x358 <get_key_pressed+0xca>
 356:	a5 cf       	rjmp	.-182    	; 0x2a2 <get_key_pressed+0x14>
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	08 95       	ret
 35c:	8a e2       	ldi	r24, 0x2A	; 42
 35e:	08 95       	ret

00000360 <i2c_start>:
 360:	ec eb       	ldi	r30, 0xBC	; 188
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	10 82       	st	Z, r1
 366:	94 ea       	ldi	r25, 0xA4	; 164
 368:	90 83       	st	Z, r25
 36a:	90 81       	ld	r25, Z
 36c:	99 23       	and	r25, r25
 36e:	ec f7       	brge	.-6      	; 0x36a <i2c_start+0xa>
 370:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 374:	98 7f       	andi	r25, 0xF8	; 248
 376:	98 30       	cpi	r25, 0x08	; 8
 378:	a1 f4       	brne	.+40     	; 0x3a2 <i2c_start+0x42>
 37a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 37e:	84 e8       	ldi	r24, 0x84	; 132
 380:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 384:	ec eb       	ldi	r30, 0xBC	; 188
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	88 23       	and	r24, r24
 38c:	ec f7       	brge	.-6      	; 0x388 <i2c_start+0x28>
 38e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 392:	98 7f       	andi	r25, 0xF8	; 248
 394:	98 31       	cpi	r25, 0x18	; 24
 396:	39 f0       	breq	.+14     	; 0x3a6 <i2c_start+0x46>
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 34       	cpi	r25, 0x40	; 64
 39c:	29 f4       	brne	.+10     	; 0x3a8 <i2c_start+0x48>
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	08 95       	ret
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	08 95       	ret
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	08 95       	ret

000003aa <i2c_write>:
 3aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3ae:	84 e8       	ldi	r24, 0x84	; 132
 3b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3b4:	ec eb       	ldi	r30, 0xBC	; 188
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	88 23       	and	r24, r24
 3bc:	ec f7       	brge	.-6      	; 0x3b8 <i2c_write+0xe>
 3be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3c2:	98 7f       	andi	r25, 0xF8	; 248
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	98 32       	cpi	r25, 0x28	; 40
 3c8:	09 f4       	brne	.+2      	; 0x3cc <i2c_write+0x22>
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret

000003ce <i2c_read_ack>:
 3ce:	84 ec       	ldi	r24, 0xC4	; 196
 3d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3d4:	ec eb       	ldi	r30, 0xBC	; 188
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	88 23       	and	r24, r24
 3dc:	ec f7       	brge	.-6      	; 0x3d8 <i2c_read_ack+0xa>
 3de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3e2:	08 95       	ret

000003e4 <i2c_read_nack>:
 3e4:	84 e8       	ldi	r24, 0x84	; 132
 3e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3ea:	ec eb       	ldi	r30, 0xBC	; 188
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	88 23       	and	r24, r24
 3f2:	ec f7       	brge	.-6      	; 0x3ee <i2c_read_nack+0xa>
 3f4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3f8:	08 95       	ret

000003fa <main>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 3fa:	8d ef       	ldi	r24, 0xFD	; 253
 3fc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

char data_received; //
int main(void)
{
	i2c_init();		
	LCD_init();
 400:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_init>
	LCD_string("Transmitter:");		//first we print on LCD
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	0e 94 34 01 	call	0x268	; 0x268 <LCD_string>
		case 0: cmd= 0x80 + column; break;
		case 1: cmd = 0xc0 + column; break;
		case 2: cmd = 0x94 + column; break;
		case 3: cmd = 0xd4 +column;
	}
	LCD_cmd(cmd);
 40c:	80 ec       	ldi	r24, 0xC0	; 192
 40e:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 412:	89 ef       	ldi	r24, 0xF9	; 249
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 41e:	0c eb       	ldi	r16, 0xBC	; 188
 420:	10 e0       	ldi	r17, 0x00	; 0
 422:	d4 e9       	ldi	r29, 0x94	; 148
	LCD_setCursor(0,1);
    /* Replace with your application code */
    while (1) 
    {
		char key=get_key_pressed();		//checking key press
 424:	0e 94 47 01 	call	0x28e	; 0x28e <get_key_pressed>
 428:	c8 2f       	mov	r28, r24
		if(key != NO_KEY)		//if any key is pressed
 42a:	8f 3f       	cpi	r24, 0xFF	; 255
 42c:	d9 f3       	breq	.-10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		{			
			i2c_start(0x10<<1 | I2C_WRITE);		//starts i2c comm here in writing mode
 42e:	80 e2       	ldi	r24, 0x20	; 32
 430:	0e 94 b0 01 	call	0x360	; 0x360 <i2c_start>
			i2c_write(key);		//send pressed key char
 434:	8c 2f       	mov	r24, r28
 436:	0e 94 d5 01 	call	0x3aa	; 0x3aa <i2c_write>
 43a:	f8 01       	movw	r30, r16
 43c:	d0 83       	st	Z, r29
 43e:	ff eb       	ldi	r31, 0xBF	; 191
 440:	27 e2       	ldi	r18, 0x27	; 39
 442:	89 e0       	ldi	r24, 0x09	; 9
 444:	f1 50       	subi	r31, 0x01	; 1
 446:	20 40       	sbci	r18, 0x00	; 0
 448:	80 40       	sbci	r24, 0x00	; 0
 44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop
 450:	80 ec       	ldi	r24, 0xC0	; 192
 452:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_cmd>
 456:	e9 ef       	ldi	r30, 0xF9	; 249
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	31 97       	sbiw	r30, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 460:	00 00       	nop
			i2c_stop();				//stop i2c here
			_delay_ms(3000);		//wait 3 secs  for giving next i2c command
			LCD_setCursor(0,1);
			i2c_start(0x10<<1 | I2C_READ);		//here we start i2c in read mode where we request a byte
 462:	81 e2       	ldi	r24, 0x21	; 33
 464:	0e 94 b0 01 	call	0x360	; 0x360 <i2c_start>
			data_received=i2c_read_ack();	//read the byte 
 468:	0e 94 e7 01 	call	0x3ce	; 0x3ce <i2c_read_ack>
 46c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			i2c_read_nack();				// read the neg ack
 470:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <i2c_read_nack>
			LCD_data(data_received);		//print the received byte
 474:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 478:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_data>
 47c:	f8 01       	movw	r30, r16
 47e:	d0 83       	st	Z, r29
 480:	d1 cf       	rjmp	.-94     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>

00000482 <__tablejump2__>:
 482:	ee 0f       	add	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	05 90       	lpm	r0, Z+
 488:	f4 91       	lpm	r31, Z
 48a:	e0 2d       	mov	r30, r0
 48c:	09 94       	ijmp

0000048e <_exit>:
 48e:	f8 94       	cli

00000490 <__stop_program>:
 490:	ff cf       	rjmp	.-2      	; 0x490 <__stop_program>
