
Generador_de_Funciones_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000070e  00800200  000004a8  0000053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016f  0080090e  0080090e  00000c4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000111d  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d0f  00000000  00000000  00001e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f4  00000000  00000000  00002b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00003144  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000708  00000000  00000000  00003264  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000414  00000000  00000000  0000396c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003d80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	07 c2       	rjmp	.+1038   	; 0x43c <__vector_11>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	dd c0       	rjmp	.+442    	; 0x200 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	19 e0       	ldi	r17, 0x09	; 9
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ea       	ldi	r30, 0xA8	; 168
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 30       	cpi	r26, 0x0E	; 14
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2a e0       	ldi	r18, 0x0A	; 10
 110:	ae e0       	ldi	r26, 0x0E	; 14
 112:	b9 e0       	ldi	r27, 0x09	; 9
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 37       	cpi	r26, 0x7D	; 125
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	d6 d0       	rcall	.+428    	; 0x2cc <main>
 120:	c1 c1       	rjmp	.+898    	; 0x4a4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Inicializar_Teclado>:
void Cambiar_Senal(void);
void Decrementar_Tiempo(void);
void Incrementar_Tiempo(void);
uint8_t Ultima_Tecla_Presionada=Tecla_Nula;
void Inicializar_Teclado(void){
	DDR_Teclado=0xF0;//(1<<DDD7)|(1<<DDD6)|(1<<DDD5)|(1<<DDD4)|(0<DDD3)|(0<<DDD2)|(0<<DDD1)|(0<<DDD0);
 124:	80 ef       	ldi	r24, 0xF0	; 240
 126:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	Puerto_Teclado=0x0F;//(1<<PB7)|(1<<PB6)|(1<<PB5)|(1<<PB4)|(1<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
 12a:	8f e0       	ldi	r24, 0x0F	; 15
 12c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
    //Configuración de Interrupciones;
    MCUCR=(0<<JTD)|(0<<6)|(0<<5)|(0<<PUD)|(0<<3)|(0<<2)|(0<<IVSEL)|(0<<IVCE);//Configuracion Flancos de bajada en INT0.
 130:	15 be       	out	0x35, r1	; 53
    PCICR=(0<<7)|(0<<6)|(0<<5)|(0<<4)|(0<<3)|(0<<PCIE2)|(0<<PCIE1)|(0<<PCIE0);
 132:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
    PCMSK2=(0<<PCINT23)|(0<<PCINT22)|(0<<PCINT21)|(0<<PCINT20)|(1<<PCINT19)|(1<<PCINT18)|(1<<PCINT17)|(1<<PCINT16);
 136:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>
 13a:	08 95       	ret

0000013c <Detectar_Tecla>:
	Ultima_Tecla_Presionada=Tecla_Nula;
	return Tecla_Nula;}
}

uint8_t Detectar_Tecla(uint8_t C1,uint8_t C2,uint8_t C3,uint8_t C4){
	uint8_t var=Pin_Teclado&(0x0F);
 13c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 140:	9f 70       	andi	r25, 0x0F	; 15
	uint8_t Tecla_Presionada=Tecla_Nula;
	if (var==0x0E){//((1<<PB3)|(1<<PB2)|(1<<PB1)|(0<<PB0))
 142:	9e 30       	cpi	r25, 0x0E	; 14
 144:	69 f0       	breq	.+26     	; 0x160 <Detectar_Tecla+0x24>
		Tecla_Presionada=C4;
	}
	else if(var==0x0D){//((1<<PB3)|(1<<PB2)|(0<<PB1)|(1<<PB0))
 146:	9d 30       	cpi	r25, 0x0D	; 13
 148:	31 f0       	breq	.+12     	; 0x156 <Detectar_Tecla+0x1a>
		Tecla_Presionada=C3;
	}
	else if(var==0x0B){//((1<<PB3)|(1<<PB2)|(0<<PB1)|(1<<PB0))
 14a:	9b 30       	cpi	r25, 0x0B	; 11
 14c:	31 f0       	breq	.+12     	; 0x15a <Detectar_Tecla+0x1e>
		Tecla_Presionada=C2;
	}
	else if(var==0x07){//((0<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0))
 14e:	97 30       	cpi	r25, 0x07	; 7
 150:	31 f4       	brne	.+12     	; 0x15e <Detectar_Tecla+0x22>
		Tecla_Presionada=C1;
 152:	28 2f       	mov	r18, r24
 154:	05 c0       	rjmp	.+10     	; 0x160 <Detectar_Tecla+0x24>
	uint8_t Tecla_Presionada=Tecla_Nula;
	if (var==0x0E){//((1<<PB3)|(1<<PB2)|(1<<PB1)|(0<<PB0))
		Tecla_Presionada=C4;
	}
	else if(var==0x0D){//((1<<PB3)|(1<<PB2)|(0<<PB1)|(1<<PB0))
		Tecla_Presionada=C3;
 156:	24 2f       	mov	r18, r20
 158:	03 c0       	rjmp	.+6      	; 0x160 <Detectar_Tecla+0x24>
	}
	else if(var==0x0B){//((1<<PB3)|(1<<PB2)|(0<<PB1)|(1<<PB0))
		Tecla_Presionada=C2;
 15a:	26 2f       	mov	r18, r22
 15c:	01 c0       	rjmp	.+2      	; 0x160 <Detectar_Tecla+0x24>
	return Tecla_Nula;}
}

uint8_t Detectar_Tecla(uint8_t C1,uint8_t C2,uint8_t C3,uint8_t C4){
	uint8_t var=Pin_Teclado&(0x0F);
	uint8_t Tecla_Presionada=Tecla_Nula;
 15e:	2b ee       	ldi	r18, 0xEB	; 235
	}
	else if(var==0x07){//((0<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0))
		Tecla_Presionada=C1;
	}
	return Tecla_Presionada;
}
 160:	82 2f       	mov	r24, r18
 162:	08 95       	ret

00000164 <Obtener_Tecla>:
    PCMSK2=(0<<PCINT23)|(0<<PCINT22)|(0<<PCINT21)|(0<<PCINT20)|(1<<PCINT19)|(1<<PCINT18)|(1<<PCINT17)|(1<<PCINT16);
}

uint8_t Obtener_Tecla(void){//Filas(7-4) Salidas, Columnas(3-0) Entradas
	uint8_t Tecla, Entrada;
	Puerto_Teclado=0x0F;//(0<<PB7)|(0<<PB6)|(0<<PB5)|(0<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);//Verificar Estado sin modificar pullup.
 164:	8f e0       	ldi	r24, 0x0F	; 15
 166:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	Entrada=Pin_Teclado&(0x0F);
 16a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
	if(Entrada<0x0F){
 16e:	8f 70       	andi	r24, 0x0F	; 15
 170:	8f 30       	cpi	r24, 0x0F	; 15
 172:	08 f0       	brcs	.+2      	; 0x176 <Obtener_Tecla+0x12>
 174:	41 c0       	rjmp	.+130    	; 0x1f8 <Obtener_Tecla+0x94>
		Puerto_Teclado=0x7F;//(0<<PB7)|(1<<PB6)|(1<<PB5)|(1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
 176:	8f e7       	ldi	r24, 0x7F	; 127
 178:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	8f e9       	ldi	r24, 0x9F	; 159
 17e:	9f e0       	ldi	r25, 0x0F	; 15
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <Obtener_Tecla+0x1c>
 184:	00 c0       	rjmp	.+0      	; 0x186 <Obtener_Tecla+0x22>
 186:	00 00       	nop
		_delay_ms(1);
		Tecla=Detectar_Tecla(Tecla_1,Tecla_2,Tecla_3,Tecla_A);
 188:	21 e4       	ldi	r18, 0x41	; 65
 18a:	43 e3       	ldi	r20, 0x33	; 51
 18c:	62 e3       	ldi	r22, 0x32	; 50
 18e:	81 e3       	ldi	r24, 0x31	; 49
 190:	d5 df       	rcall	.-86     	; 0x13c <Detectar_Tecla>
		if (Tecla==Tecla_Nula)
 192:	8b 3e       	cpi	r24, 0xEB	; 235
 194:	71 f5       	brne	.+92     	; 0x1f2 <Obtener_Tecla+0x8e>
		{
			Puerto_Teclado=0xBF;//(1<<PB7)|(0<<PB6)|(1<PB5)|(1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
 196:	8f eb       	ldi	r24, 0xBF	; 191
 198:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 19c:	8f e9       	ldi	r24, 0x9F	; 159
 19e:	9f e0       	ldi	r25, 0x0F	; 15
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <Obtener_Tecla+0x3c>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <Obtener_Tecla+0x42>
 1a6:	00 00       	nop
			_delay_ms(1);
			Tecla=Detectar_Tecla(Tecla_4,Tecla_5,Tecla_6,Tecla_B);
 1a8:	22 e4       	ldi	r18, 0x42	; 66
 1aa:	46 e3       	ldi	r20, 0x36	; 54
 1ac:	65 e3       	ldi	r22, 0x35	; 53
 1ae:	84 e3       	ldi	r24, 0x34	; 52
 1b0:	c5 df       	rcall	.-118    	; 0x13c <Detectar_Tecla>
			if (Tecla==Tecla_Nula)
 1b2:	8b 3e       	cpi	r24, 0xEB	; 235
 1b4:	f1 f4       	brne	.+60     	; 0x1f2 <Obtener_Tecla+0x8e>
			{
				Puerto_Teclado=0xDF;//(1<<PB7)|(1<<PB6)|(0<<PB5)|(1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
 1b6:	8f ed       	ldi	r24, 0xDF	; 223
 1b8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 1bc:	8f e9       	ldi	r24, 0x9F	; 159
 1be:	9f e0       	ldi	r25, 0x0F	; 15
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <Obtener_Tecla+0x5c>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <Obtener_Tecla+0x62>
 1c6:	00 00       	nop
				_delay_ms(1);
				Tecla=Detectar_Tecla(Tecla_7,Tecla_8,Tecla_9,Tecla_C);
 1c8:	23 e4       	ldi	r18, 0x43	; 67
 1ca:	49 e3       	ldi	r20, 0x39	; 57
 1cc:	68 e3       	ldi	r22, 0x38	; 56
 1ce:	87 e3       	ldi	r24, 0x37	; 55
 1d0:	b5 df       	rcall	.-150    	; 0x13c <Detectar_Tecla>
				if (Tecla==Tecla_Nula)
 1d2:	8b 3e       	cpi	r24, 0xEB	; 235
 1d4:	71 f4       	brne	.+28     	; 0x1f2 <Obtener_Tecla+0x8e>
				{
					Puerto_Teclado=0xEF;//(1<<PB7)|(1<<PB6)|(1<<PB5)|(0<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
 1d6:	8f ee       	ldi	r24, 0xEF	; 239
 1d8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 1dc:	8f e9       	ldi	r24, 0x9F	; 159
 1de:	9f e0       	ldi	r25, 0x0F	; 15
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <Obtener_Tecla+0x7c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <Obtener_Tecla+0x82>
 1e6:	00 00       	nop
					_delay_ms(1);
					Tecla=Detectar_Tecla(Tecla_Ast,Tecla_0,Tecla_Num,Tecla_D);
 1e8:	24 e4       	ldi	r18, 0x44	; 68
 1ea:	43 e2       	ldi	r20, 0x23	; 35
 1ec:	60 e3       	ldi	r22, 0x30	; 48
 1ee:	8a e2       	ldi	r24, 0x2A	; 42
 1f0:	a5 df       	rcall	.-182    	; 0x13c <Detectar_Tecla>
				}
			}
		}
		Ultima_Tecla_Presionada=Tecla;
 1f2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <Ultima_Tecla_Presionada>
		return Tecla;
 1f6:	08 95       	ret
	}
	else{
	Ultima_Tecla_Presionada=Tecla_Nula;
 1f8:	8b ee       	ldi	r24, 0xEB	; 235
 1fa:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <Ultima_Tecla_Presionada>
	return Tecla_Nula;}
}
 1fe:	08 95       	ret

00000200 <__vector_17>:
		Tecla_Presionada=C1;
	}
	return Tecla_Presionada;
}

ISR(TIMER1_COMPA_vect){
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	0b b6       	in	r0, 0x3b	; 59
 20c:	0f 92       	push	r0
 20e:	2f 93       	push	r18
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	OCR0A=Senal[contador];
 218:	e0 91 0f 09 	lds	r30, 0x090F	; 0x80090f <contador>
 21c:	f0 91 10 09 	lds	r31, 0x0910	; 0x800910 <contador+0x1>
 220:	ef 5e       	subi	r30, 0xEF	; 239
 222:	f6 4f       	sbci	r31, 0xF6	; 246
 224:	80 81       	ld	r24, Z
 226:	87 bd       	out	0x27, r24	; 39
	OCR0B=Senal[contador];
 228:	e0 91 0f 09 	lds	r30, 0x090F	; 0x80090f <contador>
 22c:	f0 91 10 09 	lds	r31, 0x0910	; 0x800910 <contador+0x1>
 230:	ef 5e       	subi	r30, 0xEF	; 239
 232:	f6 4f       	sbci	r31, 0xF6	; 246
 234:	80 81       	ld	r24, Z
 236:	88 bd       	out	0x28, r24	; 40
	contador++;
 238:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <contador>
 23c:	90 91 10 09 	lds	r25, 0x0910	; 0x800910 <contador+0x1>
 240:	01 96       	adiw	r24, 0x01	; 1
	if (contador>=Muestras)(contador=0);
 242:	89 36       	cpi	r24, 0x69	; 105
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	92 07       	cpc	r25, r18
 248:	28 f4       	brcc	.+10     	; 0x254 <__vector_17+0x54>
}

ISR(TIMER1_COMPA_vect){
	OCR0A=Senal[contador];
	OCR0B=Senal[contador];
	contador++;
 24a:	90 93 10 09 	sts	0x0910, r25	; 0x800910 <contador+0x1>
 24e:	80 93 0f 09 	sts	0x090F, r24	; 0x80090f <contador>
 252:	04 c0       	rjmp	.+8      	; 0x25c <__vector_17+0x5c>
	if (contador>=Muestras)(contador=0);
 254:	10 92 10 09 	sts	0x0910, r1	; 0x800910 <contador+0x1>
 258:	10 92 0f 09 	sts	0x090F, r1	; 0x80090f <contador>
}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0b be       	out	0x3b, r0	; 59
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <Incrementar_Tiempo>:
	{
		Numero_Senal=255;
	}
}
void Incrementar_Tiempo(void){
	OCR1A=OCR1A+Incremento;
 274:	e8 e8       	ldi	r30, 0x88	; 136
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	91 81       	ldd	r25, Z+1	; 0x01
 27c:	20 91 7c 0a 	lds	r18, 0x0A7C	; 0x800a7c <Incremento>
 280:	82 0f       	add	r24, r18
 282:	91 1d       	adc	r25, r1
 284:	91 83       	std	Z+1, r25	; 0x01
 286:	80 83       	st	Z, r24
	if(OCR1A>Maximo){
 288:	80 81       	ld	r24, Z
 28a:	91 81       	ldd	r25, Z+1	; 0x01
 28c:	8b 35       	cpi	r24, 0x5B	; 91
 28e:	91 41       	sbci	r25, 0x11	; 17
 290:	30 f0       	brcs	.+12     	; 0x29e <Incrementar_Tiempo+0x2a>
		OCR1A=Maximo;
 292:	8a e5       	ldi	r24, 0x5A	; 90
 294:	91 e1       	ldi	r25, 0x11	; 17
 296:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 29a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 29e:	08 95       	ret

000002a0 <Decrementar_Tiempo>:
	}
}
void Decrementar_Tiempo(void){
	OCR1A=OCR1A-Incremento;
 2a0:	e8 e8       	ldi	r30, 0x88	; 136
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	91 81       	ldd	r25, Z+1	; 0x01
 2a8:	20 91 7c 0a 	lds	r18, 0x0A7C	; 0x800a7c <Incremento>
 2ac:	82 1b       	sub	r24, r18
 2ae:	91 09       	sbc	r25, r1
 2b0:	91 83       	std	Z+1, r25	; 0x01
 2b2:	80 83       	st	Z, r24
	if(OCR1A<Minimo){
 2b4:	80 81       	ld	r24, Z
 2b6:	91 81       	ldd	r25, Z+1	; 0x01
 2b8:	88 3b       	cpi	r24, 0xB8	; 184
 2ba:	91 40       	sbci	r25, 0x01	; 1
 2bc:	30 f4       	brcc	.+12     	; 0x2ca <Decrementar_Tiempo+0x2a>
		OCR1A=Minimo;
 2be:	88 eb       	ldi	r24, 0xB8	; 184
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 2c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 2ca:	08 95       	ret

000002cc <main>:
	}
}
int main(void)
{
	DDRB=(1<<PB7)|(1<<PB6);
 2cc:	80 ec       	ldi	r24, 0xC0	; 192
 2ce:	84 b9       	out	0x04, r24	; 4
	DDRD=(0<<PD2)|(0<<PD1)|(0<<PD0);
 2d0:	1a b8       	out	0x0a, r1	; 10
	//DDRF=0xFF;
	//DDRK=0x00;
	PORTD=(1<<PD2)|(1<<PD1)|(1<<PD0);
 2d2:	87 e0       	ldi	r24, 0x07	; 7
 2d4:	8b b9       	out	0x0b, r24	; 11
	Inicializar_Teclado();
 2d6:	26 df       	rcall	.-436    	; 0x124 <Inicializar_Teclado>
	//Configuracion Timer 0 en Fast PWM (16e6/256)
	TCCR0A=(1<<COM0A1)|(0<<COM0A0)|(1<<COM0B1)|(1<<COM0B0)|(0<<5)|(0<<4)|(1<<WGM01)|(1<<WGM00);//Conectar OC0A normal y OC0B invertido en modo PWM.
 2d8:	83 eb       	ldi	r24, 0xB3	; 179
 2da:	84 bd       	out	0x24, r24	; 36
	TCCR0B=(0<<FOC0A)|(0<<FOC0B)|(0<<5)|(0<<4)|(0<<WGM02)|(0<<CS02)|(0<<CS01)|(1<<CS00);//Modo PWM y Prescalador a 1.
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	85 bd       	out	0x25, r24	; 37
	TIMSK0=(0<<7)|(0<<6)|(0<<5)|(0<<4)|(0<<3)|(0<<OCIE0B)|(0<<OCIE0A)|(0<<TOIE0);//Sin Interrupciones.
 2e0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	TCNT0=0x0000;
 2e4:	16 bc       	out	0x26, r1	; 38
	OCR0A=0;
 2e6:	17 bc       	out	0x27, r1	; 39
	OCR0B=0;
 2e8:	18 bc       	out	0x28, r1	; 40
	//Configuracion Timer 1 en CTC (220-36.1991KHz y 2221-3.6004KHz)
	TCCR1A=(0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<COM1C1)|(0<<COM1C0)|(0<<WGM11)|(0<<WGM10);//Desconectar OC1A y Modo CTC.
 2ea:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B=(0<<ICNC1)|(0<<ICES1)|(0<<5)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(0<<CS11)|(1<<CS10);//Modo CTC y Prescalador a 1.
 2ee:	89 e0       	ldi	r24, 0x09	; 9
 2f0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TCCR1C=(0<<FOC1A)|(0<<FOC1B)|(0<<FOC1C)|(0<<4)|(0<<3)|(0<<2)|(0<<1)|(0<<0);//Sin forzar comparaciones.
 2f4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
	TIMSK1=(0<<7)|(0<<6)|(0<<ICIE1)|(0<<4)|(0<<OCIE1C)|(0<<OCIE1B)|(1<<OCIE1A)|(0<<TOIE1);//Interrupciones por CompA.
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	TCNT1=0x0000;
 2fe:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 302:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	ICR1=0x0000;
 306:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 30a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	OCR1A=220;
 30e:	8c ed       	ldi	r24, 0xDC	; 220
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 316:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	OCR2A=0x0000;
 31a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
	OCR1C=0x0000;
 31e:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
 322:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
	//EICRA=(0<<ISC31)|(0<<ISC30)|(1<<ISC21)|(0<<ISC20)|(1<<ISC11)|(0<<ISC10)|(1<<ISC01)|(0<<ISC00);
	//EICRB=(0<<ISC71)|(0<<ISC70)|(0<<ISC61)|(0<<ISC60)|(0<<ISC51)|(0<<ISC50)|(0<<ISC41)|(0<<ISC40);
	//EIMSK=(0<<INT7)|(0<<INT6)|(0<<INT5)|(0<<INT4)|(0<<INT3)|(1<<INT2)|(1<<INT1)|(1<<INT0);//Habilitar Interrupcion por INT0.
	//Cargar Señal Inicial;
	Incremento=(Maximo-Minimo)/Divisiones;
 326:	88 ec       	ldi	r24, 0xC8	; 200
 328:	80 93 7c 0a 	sts	0x0A7C, r24	; 0x800a7c <Incremento>
 32c:	e5 ea       	ldi	r30, 0xA5	; 165
 32e:	f7 e0       	ldi	r31, 0x07	; 7
 330:	a1 e1       	ldi	r26, 0x11	; 17
 332:	b9 e0       	ldi	r27, 0x09	; 9
 334:	8e e0       	ldi	r24, 0x0E	; 14
 336:	99 e0       	ldi	r25, 0x09	; 9
	for(i=0;i<Muestras;i++)(Senal[i]=Senal_Rampa[i]);
 338:	21 91       	ld	r18, Z+
 33a:	2d 93       	st	X+, r18
 33c:	e8 17       	cp	r30, r24
 33e:	f9 07       	cpc	r31, r25
 340:	d9 f7       	brne	.-10     	; 0x338 <main+0x6c>
 342:	89 e6       	ldi	r24, 0x69	; 105
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <i+0x1>
 34a:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <i>
	sei();
 34e:	78 94       	sei
 350:	ff cf       	rjmp	.-2      	; 0x350 <main+0x84>

00000352 <Elegir_Senal>:
		
	}
}

void Elegir_Senal(uint8_t Num_Senal){
	Numero_Senal=Num_Senal;
 352:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <__data_end>
	switch(Num_Senal){
 356:	82 30       	cpi	r24, 0x02	; 2
 358:	d9 f0       	breq	.+54     	; 0x390 <Elegir_Senal+0x3e>
 35a:	18 f4       	brcc	.+6      	; 0x362 <Elegir_Senal+0x10>
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	31 f0       	breq	.+12     	; 0x36c <Elegir_Senal+0x1a>
 360:	4d c0       	rjmp	.+154    	; 0x3fc <Elegir_Senal+0xaa>
 362:	83 30       	cpi	r24, 0x03	; 3
 364:	39 f1       	breq	.+78     	; 0x3b4 <Elegir_Senal+0x62>
 366:	84 30       	cpi	r24, 0x04	; 4
 368:	b9 f1       	breq	.+110    	; 0x3d8 <Elegir_Senal+0x86>
 36a:	48 c0       	rjmp	.+144    	; 0x3fc <Elegir_Senal+0xaa>
 36c:	e5 ea       	ldi	r30, 0xA5	; 165
 36e:	f7 e0       	ldi	r31, 0x07	; 7
 370:	a1 e1       	ldi	r26, 0x11	; 17
 372:	b9 e0       	ldi	r27, 0x09	; 9
 374:	2e e0       	ldi	r18, 0x0E	; 14
 376:	39 e0       	ldi	r19, 0x09	; 9
		case 1:
		for(i=0;i<Muestras;i++)(Senal[i]=Senal_Rampa[i]);
 378:	81 91       	ld	r24, Z+
 37a:	8d 93       	st	X+, r24
 37c:	e2 17       	cp	r30, r18
 37e:	f3 07       	cpc	r31, r19
 380:	d9 f7       	brne	.-10     	; 0x378 <Elegir_Senal+0x26>
 382:	89 e6       	ldi	r24, 0x69	; 105
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <i+0x1>
 38a:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <i>
 38e:	08 95       	ret
 390:	ec e3       	ldi	r30, 0x3C	; 60
 392:	f6 e0       	ldi	r31, 0x06	; 6
 394:	a1 e1       	ldi	r26, 0x11	; 17
 396:	b9 e0       	ldi	r27, 0x09	; 9
 398:	25 ea       	ldi	r18, 0xA5	; 165
 39a:	37 e0       	ldi	r19, 0x07	; 7
		break;
		case 2:
		for(i=0;i<Muestras;i++)(Senal[i]=Senal_Seno[i]);
 39c:	81 91       	ld	r24, Z+
 39e:	8d 93       	st	X+, r24
 3a0:	e2 17       	cp	r30, r18
 3a2:	f3 07       	cpc	r31, r19
 3a4:	d9 f7       	brne	.-10     	; 0x39c <Elegir_Senal+0x4a>
 3a6:	89 e6       	ldi	r24, 0x69	; 105
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <i+0x1>
 3ae:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <i>
 3b2:	08 95       	ret
 3b4:	e3 ed       	ldi	r30, 0xD3	; 211
 3b6:	f4 e0       	ldi	r31, 0x04	; 4
 3b8:	a1 e1       	ldi	r26, 0x11	; 17
 3ba:	b9 e0       	ldi	r27, 0x09	; 9
 3bc:	2c e3       	ldi	r18, 0x3C	; 60
 3be:	36 e0       	ldi	r19, 0x06	; 6
		break;
		case 3:
		for(i=0;i<Muestras;i++)(Senal[i]=Senal_Triangular[i]);
 3c0:	81 91       	ld	r24, Z+
 3c2:	8d 93       	st	X+, r24
 3c4:	e2 17       	cp	r30, r18
 3c6:	f3 07       	cpc	r31, r19
 3c8:	d9 f7       	brne	.-10     	; 0x3c0 <Elegir_Senal+0x6e>
 3ca:	89 e6       	ldi	r24, 0x69	; 105
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <i+0x1>
 3d2:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <i>
 3d6:	08 95       	ret
 3d8:	ea e6       	ldi	r30, 0x6A	; 106
 3da:	f3 e0       	ldi	r31, 0x03	; 3
 3dc:	a1 e1       	ldi	r26, 0x11	; 17
 3de:	b9 e0       	ldi	r27, 0x09	; 9
 3e0:	23 ed       	ldi	r18, 0xD3	; 211
 3e2:	34 e0       	ldi	r19, 0x04	; 4
		break;
		case 4:
		for(i=0;i<Muestras;i++)(Senal[i]=Senal_Circular[i]);
 3e4:	81 91       	ld	r24, Z+
 3e6:	8d 93       	st	X+, r24
 3e8:	e2 17       	cp	r30, r18
 3ea:	f3 07       	cpc	r31, r19
 3ec:	d9 f7       	brne	.-10     	; 0x3e4 <Elegir_Senal+0x92>
 3ee:	89 e6       	ldi	r24, 0x69	; 105
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <i+0x1>
 3f6:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <i>
 3fa:	08 95       	ret
 3fc:	e1 e0       	ldi	r30, 0x01	; 1
 3fe:	f2 e0       	ldi	r31, 0x02	; 2
 400:	a1 e1       	ldi	r26, 0x11	; 17
 402:	b9 e0       	ldi	r27, 0x09	; 9
 404:	2a e6       	ldi	r18, 0x6A	; 106
 406:	33 e0       	ldi	r19, 0x03	; 3
		break;
		default:
		for(i=0;i<Muestras;i++)(Senal[i]=Senal_Cuadrada[i]);
 408:	81 91       	ld	r24, Z+
 40a:	8d 93       	st	X+, r24
 40c:	e2 17       	cp	r30, r18
 40e:	f3 07       	cpc	r31, r19
 410:	d9 f7       	brne	.-10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 412:	89 e6       	ldi	r24, 0x69	; 105
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <i+0x1>
 41a:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <i>
 41e:	08 95       	ret

00000420 <Cambiar_Senal>:
			  Cambiar_Senal();
		  }
	sei();
}
void Cambiar_Senal(void){
	Numero_Senal++;
 420:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <__data_end>
 424:	8f 5f       	subi	r24, 0xFF	; 255
 426:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <__data_end>
	Elegir_Senal(Numero_Senal);
 42a:	93 df       	rcall	.-218    	; 0x352 <Elegir_Senal>
	if (Numero_Senal==5)
 42c:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <__data_end>
 430:	85 30       	cpi	r24, 0x05	; 5
 432:	19 f4       	brne	.+6      	; 0x43a <Cambiar_Senal+0x1a>
	{
		Numero_Senal=255;
 434:	8f ef       	ldi	r24, 0xFF	; 255
 436:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <__data_end>
 43a:	08 95       	ret

0000043c <__vector_11>:
	OCR0B=Senal[contador];
	contador++;
	if (contador>=Muestras)(contador=0);
}

ISR(PCINT2_vect){
 43c:	1f 92       	push	r1
 43e:	0f 92       	push	r0
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	0b b6       	in	r0, 0x3b	; 59
 448:	0f 92       	push	r0
 44a:	2f 93       	push	r18
 44c:	3f 93       	push	r19
 44e:	4f 93       	push	r20
 450:	5f 93       	push	r21
 452:	6f 93       	push	r22
 454:	7f 93       	push	r23
 456:	8f 93       	push	r24
 458:	9f 93       	push	r25
 45a:	af 93       	push	r26
 45c:	bf 93       	push	r27
 45e:	ef 93       	push	r30
 460:	ff 93       	push	r31
	cli();
 462:	f8 94       	cli
	      uint8_t Tecla=Obtener_Tecla();
 464:	7f de       	rcall	.-770    	; 0x164 <Obtener_Tecla>
		  if (Tecla==Tecla_1)
 466:	81 33       	cpi	r24, 0x31	; 49
		  {
			  Decrementar_Tiempo();
 468:	11 f4       	brne	.+4      	; 0x46e <__vector_11+0x32>
 46a:	1a df       	rcall	.-460    	; 0x2a0 <Decrementar_Tiempo>
 46c:	07 c0       	rjmp	.+14     	; 0x47c <__vector_11+0x40>
		  }
		  else if (Tecla==Tecla_2)
 46e:	82 33       	cpi	r24, 0x32	; 50
		  {
			  Incrementar_Tiempo();
 470:	11 f4       	brne	.+4      	; 0x476 <__vector_11+0x3a>
 472:	00 df       	rcall	.-512    	; 0x274 <Incrementar_Tiempo>
		  }
		  else if (Tecla==Tecla_3)
 474:	03 c0       	rjmp	.+6      	; 0x47c <__vector_11+0x40>
 476:	83 33       	cpi	r24, 0x33	; 51
		  {
			  Cambiar_Senal();
 478:	09 f4       	brne	.+2      	; 0x47c <__vector_11+0x40>
 47a:	d2 df       	rcall	.-92     	; 0x420 <Cambiar_Senal>
		  }
	sei();
 47c:	78 94       	sei
}
 47e:	ff 91       	pop	r31
 480:	ef 91       	pop	r30
 482:	bf 91       	pop	r27
 484:	af 91       	pop	r26
 486:	9f 91       	pop	r25
 488:	8f 91       	pop	r24
 48a:	7f 91       	pop	r23
 48c:	6f 91       	pop	r22
 48e:	5f 91       	pop	r21
 490:	4f 91       	pop	r20
 492:	3f 91       	pop	r19
 494:	2f 91       	pop	r18
 496:	0f 90       	pop	r0
 498:	0b be       	out	0x3b, r0	; 59
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <_exit>:
 4a4:	f8 94       	cli

000004a6 <__stop_program>:
 4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <__stop_program>
