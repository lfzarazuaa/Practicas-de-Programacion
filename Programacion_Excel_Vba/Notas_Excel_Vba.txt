Para configurar la macros se debe visualizar la cinta de opciones de programador.
Para desplegar la cinta de opciones de da clic derecho en la cinta luego personalizar cinta de opciones y se marca la casilla de programador.
En esa cinta se usaran principalmente el grupo código y el grupo controles.
Una macros graba todas las acciones que realizamos para posteriormente repetirlas, por lo tanto es necesario hacerla sin equivocaciones.
Para grabar macros se puede seleccionar desde cinta de programador, en la cinta de vista o el icono de la esquina inferior izquierda.
Para nombrar las macros deben ser nombres descriptivos, en mayuscula cada inicial, sin espacios y no usar nombre reservados por exel o vba.
Si se selecciona guardar la macros en un libro de marcos personal se guardara en un libro propio de excel.
Para detener la grabación se selecciona la opción detener grabación y como sugerencia se elimina todo lo que pueda sobreescribirse.
Para no perder la macros grabada se debe guardar el archivo y ademas al momento de guardarlo se debe guardar como libro macros.
Para abrir el archivo de macros se debe tener cuidado pues al ser un código de prgramación puede ser malintencionado.
Hay 3 opciones para abrir macros: Continuar sin Macros, Habilitar solo para la apertura actual, "Habilitar para siempre."
Para habilitar por una apertura la macros se presiona en "Las macros se han deshabilitado." alli en Información, Habilitar Contenido, Opciones Avanzadas y Habilitar contenido para esta sesión.
Cuando se habilita contenido se añade a la lista de confianza pero debe conservar la misma ruta y nombre.
Para ignorar los documentos de confianza se va a Seguridad de Macros en Programador, Documentos de confianza y se marca la casilla Deshabilitar documentos de confianza.
En Seguridad de Macros se puede configurar 4 opciones ya sea para no mostrar adevertencia, mostrarla, aceptar solo firmadas y aceptar todas las macros.
Para agregar una cinta personalizada se da clic derecho en la cinta de opciones->personalizar cinta de opciones->Nueva pestaña.
Para personalizar la pestaña se le da clic derecho en el elemento a modificar para desplegar las distintas opciones como cambiar nombre e icono.
Para agregar macros a la cinta se accede al menu de personalizar cinta de opciones y en comandos disponibles se selecciona macros de ahi se arrastra la macros deseada a la cinta que se quiera.
Para configurar solo para el archivo la opción se puede anclar en la barra de herramientas (superior izquierda)-> seleccionando barra de herramientas, la macros y en personalizar solo para el archivo.
Un control de formulario es menos tiene menos atributos por programación que uno ActiveX.
Para añadir un control de formulario se da clic en insertar de la pestaña Programador, luego se selecciona la macro que se quiere ejecutar con el elemento.
Para ocupar la macro se da clic izquierdo, para editarla clic derechosobre esta.
Al seleccionar la macros deseada y opciones se pueden editar las configuraciones de la macros que se piden al inicio como la descripción y su atajo con teclado.
Si a la macros se le asigna una combinación de teclas substituye a la default de excel (ctrl+i Ir a), mientras se tenga abierto el archivo ejecutando asi en nuevos libros la macros.
La recomendación para usar una combinación es que sea ctrl+shif+Letra siempre y cuando este disponible.
Las macros no siempre pueden grabar todos los pasos (caundo se muestran advertencias), por lo cual es necesario modificarla por código.
La macros no es capaz de ignorar las advertencias que se nos dieron al grabar, sino que se deben resolver por código.
Como alternativa se puede usar la macros para ver el código que deseamos agregar a nuestro código como eliminar un objeto o modificar alguna propiedad.
Con Application.DisplayAlerts = False se desactivan los mensajes de alerta que pueda llegar a mandar excel.
Con Application.ScreenUpdating = False se desactiva la actualización de pantalla mientras se está ejecutando la macros (esto la hace mas rapida).
Al momento de grabar una macros puede ser Absoluta(por defecto), la cual hace los cambios conforme a la celda  o celdas que se seleccionaron al momento de grabar.
Con las macros relativas se puede grabar con respecto a la celda presiona al momento de ejecutar la macros, calculando los offset necesarios.
Con Range("B1").Select se selecciona la celda a posicionarse.
ActiveCell.FormulaR1C1 = "Máquina A" Modifica el texto de la celda seleccionada.
Los efectos de las macros no se pueden deshacer, por lo cual hay que tener datos de prueba para realizar las acciones.
Al momento de la grabación se puede intercalar entre grabar absolutamente o relativamente.
Para activar las referencias relativas se debe seleccionar Usar referencias relativas en el menu de código.
Con ActiveCell.Offset(0, 1) se indica un desplazamiento relativo 0 hacia abajo, 1 a la derecha.
ActiveCell.Offset(0, 1).Range("A1").Select Con el offset y range se logra una selección relativa siendo A1 la primera celda conforme a la selección.
Para escribir código se accede al editor Visual Basic atraves de la Cinta de opciones Programador en la pestaña Código o usando la combinación de teclas Alt+F11.
Para un buen manejo del código es aconsejable tener en la barra de herramientas la de edición y la estándar para activarlas hay que hacer click derecho y darle click para que esten marcadas (o desmarcadas).
La parte de la izquierda de las ventana tiene el explorador de proyectos y la ventanas de propiedades (para activarlas se pueden configurar desde el menu Ver).
ThisWorkbook representa al documento en completo.
Se divide en Microsoft Excel Objetos y Módulos.
En las Hojas de Microsoft Excel Objetos se colocan las funcionalidades referentes a la hoja en específico.
En los módulos se ponen funcionalidades generales que pueden ser usadas ya sea como macros o por las hojas.
En el menú Insertar se pueden insertar Procedimientos, UserForm, Módulos o Módulos de clase.
En la ventana de propiedades se mostraran las propiedades del objeto seleccionado.
En Excel las hojas tienen un nombre para el usuario y otro para el programador en vba.
En la esquina superior izquierda se encuentra un icono de excel que nos permite intercambiar de vba a Excel.
Una hoja tiene 3 formas de visible Visible, Hidden y VeryHidden, la VeryHidden solo puede ser vista por Vba y la hidden se puede mostrar desde la opción ocultar de Excel.
Para mostrar hoja se accede a Formato, ocultar y mostrar, y mostrar hoja (o ocultar hoja para ocultarla).
El proyecto de visual basic tambien se puede ocultar con usuario y contraseña para proteger el código y las opciones configuradas en él.
El nombre del módulo se cambia en la ventana de propiedades.
En Vba de Excel hay 3 estructuras de código: Funciones, procedimientos, y los procedimientos de eventos.
En Vba no hay comentarios multíneas, los comentarios se inician con '.
Para ejecutar el código también se puede desde Vba en los iconos de play, pero se debe tener el cursor sobre el método a ejecutar.
Para lograr una efectiva programación en Vba de Excel se usan eventos.
Los eventos son los momentos en los que se realizan acciones determinadas como pulsar un botón, pasar el mouse sobre el, pulsar una tecla, etc.
En un control Active X se entra en sus propiedades y se debe seleccionar modo diseño para su mejor edicción, para ejecutarla se debe desactivar el modo diseño.
La propiedad name cambia el nombre identificador del botón.
La propiedad caption modifica el texto visible.
Celda.Value nos da el valor de una celda.
Celda.Interior.Color nos dice el color de relleno de la celda (color-rojo vbRed).
Haciendo doble click sobre un botón nos lleva a su evento principal en el caso del botón es el click.
Para ver los distintos eventos de un control se verifica en la ventana del código en la esquina superior izquierda que control se está eligiendo y en la superior derecha se sitúan los distintos eventos.
Errores en tiempo de ejecución y tiempo de compilación.
Con click derecho
El editor de excel cuando detecta una sentencia incorrecta nos da una adevertencia, cuando se trata de una variable lo detecta hasta compilarlo.
En las sugerencias los métodos se representan con verde y las propiedades con azul.
Range("F6").Value = Range("F6").Value + 1 'Aumenta en 1 el valor de la celda.
Range("F6") = Range("F6") + 1 'Interpreta la propiedad mas importante de una celda (Value).
El evento change verifica cuando se cambia el valor en una celda y accede a el desde el elemento worksheet.
Operadores en Vba =,>,<,>=,<=,<>(diferente),NOT(negación).
En la ventana Inmediato se pueden evaluar expresiones sin necesidad de crear un documento, si se antecede por ? despliega el carácter.
Private Sub Worksheet_Change(ByVal Target As Range) Target es el objeto de celda (Range) cambiada.
Con Target.Offset(0, 1).Value se accede al valor de la celda a la derecha.
Format(Target.Value, "dddd") Regresa el valor con el formato deseado, en este caso "dddd" es el día.
If Target.Column = 1 And Target.Row >= 2 Then 'Verifica que sea la Columna 1 y mayor a la fila 2. Condicionales con And Or.
MsgBox "El dato introducido no es una fecha, corrígelo.", vbCritical, "Error." ' Despliega un mensaje (mensaje, tipo, título).
En el MsgBox se muestra iconos de vbCritical-tache, vbInformation-Signo de Admiración, vbExclamation-Advertencia,vbQuestion-Pregunta
Al usar el autocompletar de EXcel para el Msgbox nos muestra los distintos objetos.
If Weekday(Target) = 7 Or Weekday(Target) = 1 Then 'Si es Sábado(7) o Domingo(1)
    Target.Offset(0, 1).Interior.Color = rgbOrange 'Marca la celda de anaranjado.
End If
If Weekday(Target) = Martes Or Weekday(Target) = Miercoles Then
    Target.Offset(0, 1).Interior.Color = vbBlue
ElseIf Weekday(Target) = Jueves Or Weekday(Target) = Viernes Then
    Target.Offset(0, 1).Interior.Color = vbYellow
Else 'Sabado y Domingo
    Target.Offset(0, 1).Interior.Color = vbRed
End If
Target.Address = "$F$5" Verifica que casilla es.
Application.EnableEvents = False 'Desactiva los eventos porque también se ejecutan al correr código.
Select Case Weekday(Target)
    Case 2: Target.Interior.Color = 11854022
    Case 3, 4: Target.Interior.Color = 15189684
    Case 5 To 6: Target.Interior.Color = 4127996
    Case Else:
        Target.Interior.Color = 6740479
        MsgBox "La fecha es sábado o domingo, verifícalo.", vbInformation, "Advertencia."
End Select
El case también funciona con String
Select Case Target.Offset(0, 1)
    Case "martes", "miercoles": Target.Interior.Color = 15189684
    Case Else: Target.Interior.Color = 6740479
End Select
Select Case con Is para reañiza comparación con el valor.
Select Case Target.Value
            Case Is <= Range("K3"): Target.Offset(0, 1) = Range("H3") 'Verifica que la celda(target) sea menor o igual que 500 (k3).
            Case Is <= Range("K2"): Target.Offset(0, 1) = Range("H2") 'Verifica que la celda(target) sea menor o igual que 1000 (k3).
            Case Is > 1000: Target.Offset(0, 1) = Range("H1") 'Verifica que la celda(target) sea mayor que 1000.
End Select
Las variables en Excel se declaran con Dim.
MsgBox("Seguro que quieres eliminar esta factura", vbCritical + vbYesNo + vbDefaultButton2, "Cuidado.") 'MsgBox se usa con paréntesis cuando se quiere asignar su valor a una variable con vbDefaultButton2 asigna por default el boton 2.
OK-1, Cancel-2, Abort-3, Retry-4, Ignore-5, Yes-6, No-7.
Para consultar el valor de un boton en inmediato se puede poner ?vbyes.
En Excel se pueden crear variables sin declaracción previa que por default van a ser variant.
Option Explicit 'Forza declarar variables antes de usarlas.
Excel al compilar primero el programa crea todas las variables necesarias para su ejecución inicial con lo cual trabaja option explicit para detectar problemas de compilación.
Para ejecutar línea a línea el código se usa F8 y puntos de interrupción.
Las variables variant son genéricas pues reciben todo tipo de valores.
Las variables se destruyen cuando termina su bloque de código que los contenga (procedimiento, módulo).
Para forzar la declaración de variables se debe ingresar a herramientas-opciones en vba y alli marcar la casilla de requerir declaración de variables.
Al marcar la casilla de requerir declaración de variables se ejecutará hasta crear un nuevo modulo o código en Excel.
Mensaje = "¿Deseas guardar esta información?" & vbCrLf'Concatena usando el operador &.
Mensaje = Mensaje  & "Fecha: " & Fecha & vbCrLf'Para agregar un salto de linea se usa vbCrLf.
Fila = ActiveSheet.Cells(1048576, "A").End(xlUp).Row + 1'Obtiene la ultima con datos en la columna A, contando desde la celda 1048576.
Static Fila As Long'Declaración de variable estática la cual mantiene su valor a pesar que se termine su función.
If (Fila = 0) Then 'Si es cero significa que el documento se acaba de abrir u ocurrió un error en tiempo de ejecución al ser estáticos.
    Fila = ActiveSheet.Cells(1048576, "A").End(xlUp).Row + 1'Obtiene la ultima con datos en la columna A, contando desde la celda 1048576.
Else
    Fila = Fila + 1'Guarda el valor de la ultima fila a modificar.
End If
Dim ProductoA As Integer, ProductoB As Integer, ProductoC As Integer, Boton As Integer'Declaración multiples variables.
Cuando una variable String es de longitud definida entonces la rellena con espacios en blanco donde no haya texto.
Application es el método de Excel.
Application.Inputbox es mejor que Inputbox ya que puede verificar el tipo de la variable.
ProductoA = Application.InputBox("Introduce las unidades producidas del Producto A.", "Producto A.", , , , , , 1) 'Paso de parámetros por posición.
ProductoB = Application.InputBox(Prompt:="Introduce las unidades producidas del Producto B.", Title:="Producto B.", Type:=1) 'Paso de parámetros por argumento Type=1 acepta enteros.
        