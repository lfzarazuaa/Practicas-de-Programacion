/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto_app;

import java.awt.Dimension;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import static proyecto_app.Proyecto_APP.Panel_Opcion;
import static proyecto_app.Proyecto_APP.Principal;

/**
 *
 * @author LuisFernando
 */
public class Ventana_Filtros extends javax.swing.JFrame {
    private Numero_Compuesto Resistencia1,Capacitancia,Frecuencia1;
    private Numero_Compuesto Resistencia2,Inductancia,Frecuencia2;
    public double pi=3.14159265359;
    public int opcionFiltro;
    /**
     * Creates new form Ventana_Filtros
     */
    public Ventana_Filtros() {
        initComponents();
        opcionFiltro=ComboFiltro.getSelectedIndex();
        Resistencia1=new Numero_Compuesto(1.2,5);
        Actualizar_Resistencia1(Resistencia1.absoluto);
        Capacitancia=new Numero_Compuesto(100,1);
        Actualizar_Capacitancia(Capacitancia.absoluto);
        double freq=1/(2*pi*Resistencia1.absoluto*Capacitancia.absoluto);
        Frecuencia1=new Numero_Compuesto(freq);
        Actualizar_Frecuencia1(freq);
        Resistencia2=new Numero_Compuesto(22,5);
        Inductancia=new Numero_Compuesto(18,3);
        freq=Resistencia2.absoluto/(2*pi*Inductancia.absoluto);
        Frecuencia2=new Numero_Compuesto(freq);
    }

    private void Actualizar_Resistencia1(double Numero){
     Resistencia1.Actualizar_Absoluto(Numero);
     txtResistencia.setText(Resistencia1.Redondear4(Resistencia1.getRelativo())+Resistencia1.getSprefijo()+"Ω");
    }
    private void Actualizar_Capacitancia(double Numero){
     Capacitancia.Actualizar_Absoluto(Numero);
     txtCapacitancia.setText(Capacitancia.Redondear4(Capacitancia.getRelativo())+Capacitancia.getSprefijo()+"F");
    }
    private void Actualizar_Frecuencia1(double Numero){
     Frecuencia1.Actualizar_Absoluto(Numero);
     txtFrecuencia.setText(Frecuencia1.Redondear4(Frecuencia1.getRelativo())+Frecuencia1.getSprefijo()+"Hz");
    }
    private void Actualizar_Resistencia2(double Numero){
     Resistencia2.Actualizar_Absoluto(Numero);
     txtResistencia.setText(Resistencia2.Redondear4(Resistencia2.getRelativo())+Resistencia2.getSprefijo()+"Ω");
    }
    private void Actualizar_Inductancia(double Numero){
     Inductancia.Actualizar_Absoluto(Numero);
     txtCapacitancia.setText(Inductancia.Redondear4(Inductancia.getRelativo())+Inductancia.getSprefijo()+"H");
    }
    private void Actualizar_Frecuencia2(double Numero){
     Frecuencia2.Actualizar_Absoluto(Numero);
     txtFrecuencia.setText(Frecuencia2.Redondear4(Frecuencia2.getRelativo())+Frecuencia2.getSprefijo()+"Hz");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblCapInd = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ComboFiltro = new javax.swing.JComboBox<>();
        txtResistencia = new javax.swing.JFormattedTextField();
        txtCapacitancia = new javax.swing.JFormattedTextField();
        txtFrecuencia = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        btnRegresar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("R");

        lblCapInd.setText("C");

        jLabel3.setText("Frecuencia");

        ComboFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Filtro R-C", "Filtro R-L" }));
        ComboFiltro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboFiltroItemStateChanged(evt);
            }
        });
        ComboFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboFiltroActionPerformed(evt);
            }
        });

        txtResistencia.setEditable(false);
        txtResistencia.setText("GG");
        txtResistencia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtResistenciaMouseClicked(evt);
            }
        });
        txtResistencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtResistenciaActionPerformed(evt);
            }
        });

        txtCapacitancia.setEditable(false);
        txtCapacitancia.setText("GG");
        txtCapacitancia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtCapacitanciaMouseClicked(evt);
            }
        });
        txtCapacitancia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCapacitanciaActionPerformed(evt);
            }
        });

        txtFrecuencia.setEditable(false);
        txtFrecuencia.setText("GG");
        txtFrecuencia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtFrecuenciaMouseClicked(evt);
            }
        });
        txtFrecuencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFrecuenciaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 148, Short.MAX_VALUE)
        );

        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(txtResistencia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 249, Short.MAX_VALUE)
                                .addComponent(txtCapacitancia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnRegresar)
                                        .addGap(95, 95, 95)
                                        .addComponent(ComboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(215, 215, 215)
                                        .addComponent(jLabel3)))
                                .addGap(124, 124, 124))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblCapInd)
                                .addGap(48, 48, 48))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(194, 194, 194)
                                .addComponent(txtFrecuencia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ComboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRegresar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCapInd, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtResistencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCapacitancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtFrecuencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenu1.setText("Acciones");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Regresar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtResistenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtResistenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtResistenciaActionPerformed

    private void txtCapacitanciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCapacitanciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCapacitanciaActionPerformed

    private void txtFrecuenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFrecuenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFrecuenciaActionPerformed

    private void txtResistenciaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtResistenciaMouseClicked
        // TODO add your handling code here:
     if (opcionFiltro==0){
      Ingresar_Resistencia1();}
     else{
      Ingresar_Resistencia2();}
    }//GEN-LAST:event_txtResistenciaMouseClicked

    private void txtCapacitanciaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCapacitanciaMouseClicked
        // TODO add your handling code here:
      if (opcionFiltro==0){
       Ingresar_Capacitancia();}
      else{
       Ingresar_Inductancia();
      }
    }//GEN-LAST:event_txtCapacitanciaMouseClicked

    private void txtFrecuenciaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFrecuenciaMouseClicked
        // TODO add your handling code here:
      if (opcionFiltro==0){
       Ingresar_Frecuencia1();}
      else{
       Ingresar_Frecuencia2();
      }
    }//GEN-LAST:event_txtFrecuenciaMouseClicked

    private void ComboFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboFiltroActionPerformed
        // TODO add your handling code here:
      double freq;
      int valor=ComboFiltro.getSelectedIndex();
      if (opcionFiltro!=valor){
        opcionFiltro=valor;
        if (opcionFiltro==0){//Filtro RC
         Actualizar_Resistencia1(Resistencia1.absoluto);
         Actualizar_Capacitancia(Capacitancia.absoluto);
         freq=1/(2*pi*Resistencia1.absoluto*Capacitancia.absoluto);
         Actualizar_Frecuencia1(freq);
         lblCapInd.setText("C");
        }
        else{
         Actualizar_Resistencia2(Resistencia2.absoluto);
         Actualizar_Inductancia(Inductancia.absoluto);
         freq=Resistencia2.absoluto/(2*pi*Inductancia.absoluto);
         Actualizar_Frecuencia2(freq);
         lblCapInd.setText("I");
        }
      } 
    }//GEN-LAST:event_ComboFiltroActionPerformed

    private void ComboFiltroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboFiltroItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboFiltroItemStateChanged

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        Principal.setVisible(true);
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        Principal.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana_Filtros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana_Filtros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana_Filtros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana_Filtros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana_Filtros().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboFiltro;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblCapInd;
    private javax.swing.JFormattedTextField txtCapacitancia;
    private javax.swing.JFormattedTextField txtFrecuencia;
    private javax.swing.JFormattedTextField txtResistencia;
    // End of variables declaration//GEN-END:variables

    private void Ingresar_Resistencia1() {
     Panel_Opcion.removeAllItems_comboPrefijo();
        Panel_Opcion.addItem_comboPrefijo("pΩ");
        Panel_Opcion.addItem_comboPrefijo("nΩ");
        Panel_Opcion.addItem_comboPrefijo("uΩ");
        Panel_Opcion.addItem_comboPrefijo("mΩ");
        Panel_Opcion.addItem_comboPrefijo("Ω");
        Panel_Opcion.addItem_comboPrefijo("kΩ");
        Panel_Opcion.addItem_comboPrefijo("MΩ");
        Panel_Opcion.addItem_comboPrefijo("GΩ");
        Panel_Opcion.setText_txtCantidad(String.valueOf(Resistencia1.relativo));
        Panel_Opcion.setSelectedItem_comboPrefijo(Resistencia1.nprefijo);
        UIManager.put("OptionPane.minimumSize",new Dimension(250,150));
        int seleccion = JOptionPane.showOptionDialog( null,"Ingrese la resistencia",
        "Ingreso de Parámetros",JOptionPane.YES_NO_CANCEL_OPTION,
        JOptionPane.QUESTION_MESSAGE,null,// null para icono por defecto.
        new Object[] {Panel_Opcion,"Aceptar"},"Aceptar");
        if (seleccion==1){
            if (Panel_Opcion.getNumber_txtCantidad()>0){
             Resistencia1.Actualizar_Numero(Panel_Opcion.getNumber_txtCantidad(),Panel_Opcion.getSelectedIndex_comboPrefijo());
             txtResistencia.setText(Resistencia1.getRelativo()+Resistencia1.getSprefijo()+"Ω");
             int opcion = JOptionPane.showOptionDialog( null,"¿Qué desea calcular?",
             "Ingreso de Parámetros",JOptionPane.YES_NO_CANCEL_OPTION,
             JOptionPane.QUESTION_MESSAGE,null,// null para icono por defecto.
             new Object[] {"Capacitancia","Frecuencia"},"Capacitancia");
             if (opcion==0){
               Actualizar_Capacitancia(1/(2*pi*Resistencia1.absoluto*Frecuencia1.absoluto));
              }
             else if(opcion==1){
               Actualizar_Frecuencia1(1/(2*pi*Resistencia1.absoluto*Capacitancia.absoluto));
              }
             }
        }
    }

    private void Ingresar_Capacitancia() {
    Panel_Opcion.removeAllItems_comboPrefijo();
        Panel_Opcion.addItem_comboPrefijo("pF");
        Panel_Opcion.addItem_comboPrefijo("nF");
        Panel_Opcion.addItem_comboPrefijo("uF");
        Panel_Opcion.addItem_comboPrefijo("mF");
        Panel_Opcion.addItem_comboPrefijo("F");
        Panel_Opcion.addItem_comboPrefijo("kF");
        Panel_Opcion.addItem_comboPrefijo("MF");
        Panel_Opcion.addItem_comboPrefijo("GF");
        Panel_Opcion.setText_txtCantidad(String.valueOf(Capacitancia.relativo));
        Panel_Opcion.setSelectedItem_comboPrefijo(Capacitancia.nprefijo);
        UIManager.put("OptionPane.minimumSize",new Dimension(250,150));
        int seleccion = JOptionPane.showOptionDialog( null,"Ingrese la capacitancia",
        "Ingreso de Parámetros",JOptionPane.YES_NO_CANCEL_OPTION,
        JOptionPane.QUESTION_MESSAGE,null,// null para icono por defecto.
        new Object[] {Panel_Opcion,"Aceptar"},"Aceptar");
        if (seleccion==1){
            if (Panel_Opcion.getNumber_txtCantidad()>0){
             Capacitancia.Actualizar_Numero(Panel_Opcion.getNumber_txtCantidad(),Panel_Opcion.getSelectedIndex_comboPrefijo());
             txtCapacitancia.setText(Capacitancia.getRelativo()+Capacitancia.getSprefijo()+"F");
             int opcion = JOptionPane.showOptionDialog( null,"¿Qué desea calcular?",
             "Ingreso de Parámetros",JOptionPane.YES_NO_CANCEL_OPTION,
             JOptionPane.QUESTION_MESSAGE,null,// null para icono por defecto.
             new Object[] {"Resistencia","Frecuencia"},"Resistencia");
             if (opcion==0){
               Actualizar_Resistencia1(1/(2*pi*Frecuencia1.absoluto*Capacitancia.absoluto));
              }
             else if(opcion==1){
               Actualizar_Frecuencia1(1/(2*pi*Resistencia1.absoluto*Capacitancia.absoluto));
              }
             }
        }
    }

    private void Ingresar_Frecuencia1() {
        Panel_Opcion.removeAllItems_comboPrefijo();
        Panel_Opcion.addItem_comboPrefijo("pHz");
        Panel_Opcion.addItem_comboPrefijo("nHz");
        Panel_Opcion.addItem_comboPrefijo("uHz");
        Panel_Opcion.addItem_comboPrefijo("mHz");
        Panel_Opcion.addItem_comboPrefijo("Hz");
        Panel_Opcion.addItem_comboPrefijo("kHz");
        Panel_Opcion.addItem_comboPrefijo("MHz");
        Panel_Opcion.addItem_comboPrefijo("GHz");
        Panel_Opcion.setText_txtCantidad(String.valueOf(Frecuencia1.relativo));
        Panel_Opcion.setSelectedItem_comboPrefijo(Frecuencia1.nprefijo);
        UIManager.put("OptionPane.minimumSize",new Dimension(250,150));
        int seleccion = JOptionPane.showOptionDialog( null,"Ingrese la frecuencia",
        "Ingreso de Parámetros",JOptionPane.YES_NO_CANCEL_OPTION,
        JOptionPane.QUESTION_MESSAGE,null,// null para icono por defecto.
        new Object[] {Panel_Opcion,"Aceptar"},"Aceptar");
        if (seleccion==1){
            if (Panel_Opcion.getNumber_txtCantidad()>0){
             Frecuencia1.Actualizar_Numero(Panel_Opcion.getNumber_txtCantidad(),Panel_Opcion.getSelectedIndex_comboPrefijo());
             txtFrecuencia.setText(Frecuencia1.getRelativo()+Frecuencia1.getSprefijo()+"Hz");
             int opcion = JOptionPane.showOptionDialog( null,"¿Qué desea calcular?",
             "Ingreso de Parámetros",JOptionPane.YES_NO_CANCEL_OPTION,
             JOptionPane.QUESTION_MESSAGE,null,// null para icono por defecto.
             new Object[] {"Resistencia","Capacitancia"},"Resistencia");
             if (opcion==0){
               Actualizar_Resistencia1(1/(2*pi*Frecuencia1.absoluto*Capacitancia.absoluto));
              }
             else if(opcion==1){
               Actualizar_Capacitancia(1/(2*pi*Frecuencia1.absoluto*Resistencia1.absoluto));
              }
             }
        } 
    }

    private void Ingresar_Resistencia2() {
        Panel_Opcion.removeAllItems_comboPrefijo();
        Panel_Opcion.addItem_comboPrefijo("pΩ");
        Panel_Opcion.addItem_comboPrefijo("nΩ");
        Panel_Opcion.addItem_comboPrefijo("uΩ");
        Panel_Opcion.addItem_comboPrefijo("mΩ");
        Panel_Opcion.addItem_comboPrefijo("Ω");
        Panel_Opcion.addItem_comboPrefijo("kΩ");
        Panel_Opcion.addItem_comboPrefijo("MΩ");
        Panel_Opcion.addItem_comboPrefijo("GΩ");
        Panel_Opcion.setText_txtCantidad(String.valueOf(Resistencia2.relativo));
        Panel_Opcion.setSelectedItem_comboPrefijo(Resistencia2.nprefijo);
        UIManager.put("OptionPane.minimumSize",new Dimension(250,150));
        int seleccion = JOptionPane.showOptionDialog( null,"Ingrese la resistencia",
        "Ingreso de Parámetros",JOptionPane.YES_NO_CANCEL_OPTION,
        JOptionPane.QUESTION_MESSAGE,null,// null para icono por defecto.
        new Object[] {Panel_Opcion,"Aceptar"},"Aceptar");
        if (seleccion==1){
            if (Panel_Opcion.getNumber_txtCantidad()>0){
             Resistencia2.Actualizar_Numero(Panel_Opcion.getNumber_txtCantidad(),Panel_Opcion.getSelectedIndex_comboPrefijo());
             txtResistencia.setText(Resistencia2.getRelativo()+Resistencia2.getSprefijo()+"Ω");
             int opcion = JOptionPane.showOptionDialog( null,"¿Qué desea calcular?",
             "Ingreso de Parámetros",JOptionPane.YES_NO_CANCEL_OPTION,
             JOptionPane.QUESTION_MESSAGE,null,// null para icono por defecto.
             new Object[] {"Inductancia","Frecuencia"},"Inductancia");
             if (opcion==0){
               Actualizar_Inductancia(Resistencia2.absoluto/(2*pi*Frecuencia2.absoluto));
              }
             else if(opcion==1){
               Actualizar_Frecuencia2(Resistencia2.absoluto/(2*pi*Inductancia.absoluto));
              }
             }
        }
    }

    private void Ingresar_Inductancia() {
        Panel_Opcion.removeAllItems_comboPrefijo();
        Panel_Opcion.addItem_comboPrefijo("pH");
        Panel_Opcion.addItem_comboPrefijo("nH");
        Panel_Opcion.addItem_comboPrefijo("uH");
        Panel_Opcion.addItem_comboPrefijo("mH");
        Panel_Opcion.addItem_comboPrefijo("H");
        Panel_Opcion.addItem_comboPrefijo("kH");
        Panel_Opcion.addItem_comboPrefijo("MH");
        Panel_Opcion.addItem_comboPrefijo("GH");
        Panel_Opcion.setText_txtCantidad(String.valueOf(Inductancia.relativo));
        Panel_Opcion.setSelectedItem_comboPrefijo(Inductancia.nprefijo);
        UIManager.put("OptionPane.minimumSize",new Dimension(250,150));
        int seleccion = JOptionPane.showOptionDialog( null,"Ingrese la inductancia",
        "Ingreso de Parámetros",JOptionPane.YES_NO_CANCEL_OPTION,
        JOptionPane.QUESTION_MESSAGE,null,// null para icono por defecto.
        new Object[] {Panel_Opcion,"Aceptar"},"Aceptar");
        if (seleccion==1){
            if (Panel_Opcion.getNumber_txtCantidad()>0){
             Inductancia.Actualizar_Numero(Panel_Opcion.getNumber_txtCantidad(),Panel_Opcion.getSelectedIndex_comboPrefijo());
             txtCapacitancia.setText(Inductancia.getRelativo()+Inductancia.getSprefijo()+"H");
             int opcion = JOptionPane.showOptionDialog( null,"¿Qué desea calcular?",
             "Ingreso de Parámetros",JOptionPane.YES_NO_CANCEL_OPTION,
             JOptionPane.QUESTION_MESSAGE,null,// null para icono por defecto.
             new Object[] {"Resistencia","Frecuencia"},"Resistencia");
             if (opcion==0){
               Actualizar_Resistencia2(2*pi*Frecuencia2.absoluto*Inductancia.absoluto);
              }
             else if(opcion==1){
               Actualizar_Frecuencia2(Resistencia2.absoluto/(2*pi*Inductancia.absoluto));
              }
             }
        }
    }

    private void Ingresar_Frecuencia2() {
        Panel_Opcion.removeAllItems_comboPrefijo();
        Panel_Opcion.addItem_comboPrefijo("pHz");
        Panel_Opcion.addItem_comboPrefijo("nHz");
        Panel_Opcion.addItem_comboPrefijo("uHz");
        Panel_Opcion.addItem_comboPrefijo("mHz");
        Panel_Opcion.addItem_comboPrefijo("Hz");
        Panel_Opcion.addItem_comboPrefijo("kHz");
        Panel_Opcion.addItem_comboPrefijo("MHz");
        Panel_Opcion.addItem_comboPrefijo("GHz");
        Panel_Opcion.setText_txtCantidad(String.valueOf(Frecuencia2.relativo));
        Panel_Opcion.setSelectedItem_comboPrefijo(Frecuencia2.nprefijo);
        UIManager.put("OptionPane.minimumSize",new Dimension(250,150));
        int seleccion = JOptionPane.showOptionDialog( null,"Ingrese la frecuencia",
        "Ingreso de Parámetros",JOptionPane.YES_NO_CANCEL_OPTION,
        JOptionPane.QUESTION_MESSAGE,null,// null para icono por defecto.
        new Object[] {Panel_Opcion,"Aceptar"},"Aceptar");
        if (seleccion==1){
            if (Panel_Opcion.getNumber_txtCantidad()>0){
             Frecuencia2.Actualizar_Numero(Panel_Opcion.getNumber_txtCantidad(),Panel_Opcion.getSelectedIndex_comboPrefijo());
             txtFrecuencia.setText(Frecuencia2.getRelativo()+Frecuencia2.getSprefijo()+"Hz");
             int opcion = JOptionPane.showOptionDialog( null,"¿Qué desea calcular?",
             "Ingreso de Parámetros",JOptionPane.YES_NO_CANCEL_OPTION,
             JOptionPane.QUESTION_MESSAGE,null,// null para icono por defecto.
             new Object[] {"Resistencia","Inductancia"},"Resistencia");
             if (opcion==0){
               Actualizar_Resistencia2(2*pi*Frecuencia2.absoluto*Inductancia.absoluto);
              }
             else if(opcion==1){
               Actualizar_Frecuencia2(Resistencia2.absoluto/(2*pi*Inductancia.absoluto));
              }
             }
        } 
    }

}
