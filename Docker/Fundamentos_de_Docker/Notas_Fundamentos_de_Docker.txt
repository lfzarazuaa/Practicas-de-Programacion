Docker es Open Source, que facilita el desarrollo.
Docker no es para dar los primeros pasos en programación sino para resolver problemas que van mas alla de solo la escritura de código logrando hacer el trabajo de 3 personas de hace 10 años.
Docker es un proyecto lanzado en el 2013 que de forma flexible ayuda al despliegue de aplicaciones dentro de contenedores de software, dentro de sus características más importantes se incluye el hecho de que no requiere de utilizar un sistema operativo independiente, lo que lo hace más ligero y rápido, para esto, cuenta con funcionalidades Kernel de Linux ; además de esto Docker posee una manera característica para hacer uso de los elementos de tu equipo, sin necesidad de mayor configuración.
Problemas al construir:
-Dependencias de desarrollo.
-Versiones de entornos de ejecución.
-Equivalencia de entornos de desarrollo.
-Equivalencia de entornos de producción.
-Versiones / compatibilidad.
Problemas al Distribuir:
-Generaciones del build diferentes.
-Acceso a servidores de producción.
-Ejecución nativa vs la distribuida.
-Serverless
Problemas al Ejecutar:
-Dependencias de aplicación.
-Compatibilidad de sistema operativo.
-Disponibilidad de servicios externos.
-Recursos de hardware.
Docker permite:
Construir, distribuir y correr tu código en cualquier lado.
Al construir código tiene dependencias pues no solo es escribir código sino depender de programas, librerias, versiones.
Otro problema común es cuando un programa corre en tu pc pero no en la de alguien más por las dependencias que tiene.
Al ejecutar hay que considerar al servidor que tiene que correr varias versiones a la vez, el hardware que tiene disponible, el sistema opertivo.
Docker permite distribuir, construir y ejecutar el código en cualquier lado sin problemas.
Qué es Docker?
-Docker Permite resolver problemas de construir, distribuir y ejecutar software en diferentes plataformas.
Containarization: un estándar para llevar algo dentro. Agrupadores de procesos.
Versátiles:
-En el orden de los MB.
-Tienen todas las dependencias que necesitan para funcionar correctamente.
-Funcionan igual en todos lados.
Eficientes:
-Comparten archivos simultáneos con otros contenedores.
-Solo se ejecutan procesos, no un SS.OO completo.
Aislados:
-Lo que pasa en el container queda en el container.
-No pueden alterar su entorno de ejecución (a menos que explícitamente se indique lo contrario)
Virtualization: es una imagen o archivo que contiene información dentro. Por lo general son pesadas de administración costosa y son lentas.
Pesadas:
-En el orden de los GB.
-Muchas VMs en el mismo host suelen repetirse en lo que contienen.
Administración costosa:
-Una VM tiene que ser administrada como cualquier otra computadora: patching, update, etc
-Hay que administrar la seguridad interna entre apps
Lentas:
-Correr nuestro código en una VM implica no solo arrancar aplicaciones, sino también esperar el boot de la VM en sí.
Los contenedores son agrupaciones de procesos que están aislados de toda la máquina, parecidas a máquinas virtuales, pero muy distintas.
Para descargar docker se debe instalar docker community for windows y registrarnos en la página de docker.
Se puede configurar cuanta memoria y cpu puede usar docker.
docker --version //Muestra la version.
docker info //Muestra información de docker.
docker necesita windows 10 pro para poder ejecutarse correctamente.
Si se tiene menos de 8gb de ram es mejor iniciar con docker apagado.
Al ejecutar docker run hello-world, si docker no encuentra localmente la imagen entonces la busca en la web, la descarga y corre la aplicación.
La siguiente vez que se ejecute ya no lo descarga sino que usa lo que tiene localmente.
La arquitectura de docker funciona con un cliente que le hace la petición al servicio de docker(daemon), este servicio se encarga de levantar cada contenedor y ponerlo en ejecución, por lo cual el servicio de docker puede estar corriendo en una máquina distinta a la del cliente sin problemas.
Un contenedor ejecuta sus procesos de forma nativa como si fuera cualquier otro proceso del SO, los procesos que se ejecutan dentro del contenedor no pueden ver afuera del contenedor.
Los contenedores no pueden disponer de mas memoria que la asignada.
El único software que se comparte entre docker y el SO es el kernel.
Los servidores productivos de docker se usa Linux ya que ahi corre nativamente en mac y windows hace un tipo de virtualización.
Para un contenedor el root o su ruta origen es donde se empieza a ejecutar el contenedor, no sabrá si existe algún archivo en otra parte de la pc.
https://itnext.io/chroot-cgroups-and-namespaces-an-overview-37124d995e3d
docker ps -a //Nos muestra todos los contenedores aun los que ya terminaron.
docker inspect e0b9d623ad6a//Nos da la información del contenedor dado su id o nombre, con eso podemos saber información del contenedor al momento de programar.
docker ps = lista los contenedores
docker ps -a = lista contenedores a detalles
docker ps -aq = lista solo los ID de los contenedores (la q significa quiet, tranquilo o silencioso)
docker inspect id_contenedor = detalles internos del contenedor
docker inspect nombre_contenedor = lo mismo que el anterior
docker inspect -f {{}} nombre_contenedor = filtra una variable especifico del contenedor
docker rm nombre_contenedor = elimina un contenedor
docker rm $(ps -aq) = borra TODOS los contenedores que no se esten ejecutando.
Listar contendores en ejecución
docker ps
Listar todos los contenedores
docker ps -a
Cargar / Ejecutar una imagen de contenedor
docker run [image]
Imagino q “image” es la fuente del contenedor.
Cargar / Ejecutar una imagen de contenedor con un nombre específico
docker run --name [name a asignar] [image]
Ver metadata de un contenedor
docker inspect [name/id contenedor]
Ver un dato exacto de la metadata de un contenedor:
docker inspect -f '{{ json .Config.Env }}' [name/id]
docker inspect -f "{{ json .Config.Env }}" [name/id]// En windows.
Aquí se utiliza el template de filtro del leguaje GO q es el lenguaje en q fue programado DOCKER.
LINUX … ver el path
echo $PATH
Cambiar el nombre de un contendor descargado
docker rename [name actual] [name nuevo]
Ver las salidas de contenedores ya ejecutados o cargados
docker logs [name/id]
Obtener como salida sólo los ID de los contendores cargados
docker ps -aq
Eliminar / Desmantelar contenedores
docker rm [name/id]
Para eliminar/desmantelar todos los contenedores cargados, utilizamos el comando q nos genera la salida de todos los ID de contendores cargados dentro de un docker rm y el comando quedaría así:
docker rm $(docker ps -aq)
Las rutas nombradas son con respecto al contenedor y no con respecto a la ruta de la pc principal.
docker run genera un contenedor nuevo a partir de una imagen.