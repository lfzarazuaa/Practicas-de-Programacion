Java Script es debilmente tipado, orientado a objetos y dinámico.
Javascript al hacer sumas del tipo int mas string asume que todo es string.
4 + "7" = 47
4 * "7" = 28
Javascript es un lenguaje dinámico (corre en el Runtime), no estático (como c# que tiene que ser compilado).
El motor de javascript es v8.
El navegador toma el javascript, luego interpreta el código, hace la compilación y entrega el binario.
Forwards significa que las nuevas versiones serán compatibles con código antiguo.
Javascript es Backwards pues no podrás utilizar funcionalidades nuevas (librerías) en el código nuevo.
Para solucionar este problema existen compiladores como Babel que traducen el código nuevo al antiguo que entienda el navegador.
Javascript tienes muchas aplicaciones y proyectos.
Con node js puedes trabajar backend usando javascript.
Hay dos elementos principales en javascript, las variables y las funciones.
Los valores placeholder son null o undefined cuando se necisita forzosamente un valor.
En la sección de console se prueba lo relacionado con js.
Con la palabra reservada typeof nos dice de que tipo es la variable.
Con la palabra reservada var se indica que es una variable.
En javascript se puede declarar una variable sin inicializarla.
var edad;
edad = 30;
Para declar un objeto sin crear una clase se usa la siguiente sintaxis.
var persona = {
    nombre: "Diego",
    edad: 30
}
Las funciones en Javascript pueden ser declarativas (con nombre), o expresivas (anónimas).
//Función declarativa
function miFuncion() {
    return 3;
}
//Función expresiva o anónima
var miFuncion = function(a,b){
    return a + b;
}
Diferencias:
A las funciones declarativas se les aplica hoisting, y a la expresión de función, no. Ya que el hoisting solo se aplica en las palabras reservadas var y function.
Lo que quiere decir que con las funciones declarativas, podemos mandar llamar la función antes de que ésta sea declarada, y con la expresión de función, no, tendríamos que declararla primero, y después mandarla llamar.
En la expresión de función, la función podría o no llevar nombre, aunque es más común que se hagan anónimas.
Con console.log() imprimimos en el html.
El scope de una variable es que alcance puede tener, en términos básicos puede ser global o local.
El scope también se aplica a las funciones.
El hoisting es cuando las variables y funciones se procesan antes de ejecutar cualquier tipo de código.
Cuando js trata de llamar una variable no definida en su proceso de compliación le asigna undefined.
Si mandamos a llamar una función antes de declarar (declarada abajo en el código), si se manda a llamar correctamente.
Una buena práctica es declarar la funcón al inicio del archivo.
Es esencial quedarnos con dos conceptos:
Las funciones siempre se mueven arriba del scope. Por lo tanto, podemos elegir donde declararlas y usarlas.
La declaración de las variables se mueven arriba del scope, pero no la asignación. Antes de usar una variable, habrá que crearla y asignarla.
https://developer.mozilla.org/es/docs/Glossary/Hoisting
https://medium.com/@anamartinezaguilar/qu%C3%A9-es-el-hoisting-327870f67b36

