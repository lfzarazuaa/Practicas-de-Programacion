Para comprender la terminal de comandos se sugiere ver:
-Qué es la terminal.
-Por qué usar la terminal.
-Como usar la terminal.
-Como aprovechar la terminal al máximo.
En la pc tenemos una memoria donde de almacenan datos e instrucciones, la pc revisa periodicamente la memoria y conforme a los datos va modificando el contenido de la memoria. Para lograr que siga las instrucciones que nosotros deseamos mandarle debemos expresarlo pero ya que las computadoras no hablan, debe haber un intermediario que se encarge de eso.
La terminal de comandos es entonces la encargada de recibir nuestras instrucciones por medio de texto y de esta manera ser nuestro de medio de comunicación con la pc y el SO.
La terminal se usa en vez de una interfaz gráfica cuando se desea tener mayor eficiencia, sacrificando la parte gráfica.
Para ingresar instrucciones a través de la terminal, se usa comandos los cuales estan conformados por el nombre de un programa, parámetros y modificadores, comando -flag1 -flag2 -arg1 arg2.
El comando date nos muestra la fecha y hora actual.
Con el comando man podemos ver el manual del comando a ejecutar por ejemplo "man date".
La terminal aparte de comandos también contiene utilidades propias como combinaciones de teclas, comodines y substitución de comandos.
Al presionar las iniciales de un comando y presionando la tecla tab se nos muestran las posibilades o se autocompleta el comando a ejecutar si es el unico posible.
Al presionar las direccionales de arriba o abajo nos muestra los comandos usados en el orden en el que fueron llamados.
Con ctrl+shift+r se hace una búsqueda de un comando usado anteriormente.
Con history se muestra el historial de todos los comandos ejecutados.
Usando el signo de admiración y el número de comando del historial nos permite ejecutar ese comando ejemplo !108.
Para instalar la terminal de ubuntu en windows se debe ejecutar el comando siguiente comando en powershell: Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux .
Una vez realizado esto se abre la Microsoft store y desde allí se descarga la versión deseada de ubuntu y en automático la instalará.
Para organizar la información en una pc se usan directorios y archivos, formando de tal forma el árbol de directorios.
El path se conforma por la ruta de directorios y el nombre del archivo.
Con ls se ven los archivos del directorio.
Con ls -a se ven todos los archivos incluyendo los ocultos.
Con .. se hace referencia al directorio padre y con . se hace referencia al directorio actual.
Con pwd (print working directory), se imprime el directorio actual.
Con cd se cambia al directorio que se le indique cd /home.
Con cd ~ nos manda al directorio principal o base.
Con cd - se manda al directorio anteriormente consultado.
Con mkdir se crea el directorio.
Con ls -l se listan los archivos y directorios así como sus permisos.
Con cp se copia un archivo o directorio, cd ruta_archivo_origen directorio_destino.
Con rm se borra el archivo indicado, rm ruta_archivo.
Con rmdir se borra un directorio, pero este debe estar vacío.
Lista los archivos que se encuentran en el directorio sobre el que estamos trabajando: > ls
Lista todos los archivos incluyendo aquellos que se han definido como ocultos: > ls -a
Todos los directorios contienen los archivos . y .., estos son punteros a directorios: .. --> directorio padre, . --> directorio actual.
Otros parámetros que puedes usar con el comando ls:
-Ordena los archivos por fecha de modificación: > ls -t
-Ordena elementos primero por nombre y después por extensión: > ls -x
-Ordena los elementos primero por extensión y luego por nombre: > ls -X
-Muestra toda la información: usuario, grupo, permisos, tamaño, fecha y hora de creación: > ls -l
-Muestra la misma información que ls -l pero con las unidades de tamaño en KB, MB: > ls -lh
-Muestra el contenido de todos los subdirectorios de forma recursiva: > ls -R
-Ordena los resultados por tamaño de archivo: > ls -S
Comandos para cambiar de ubicación:
-Print Working Directory: se usa para mostrar el directorio actual en el que nos encontramos trabajando: > pwd
-cd: se utiliza para cambiar de directorio. Luego del comando se debe especificar la ruta del directorio al que nos queremos mover. Por ejemplo: > cd /home/mi_usuario.
Comandos para mover, copiar o borrar:
-cp: copiar un archivo hacia un directorio: > cp [archivo que se va a copiar] [directorio hacia el que se va a mover].
-rm: eliminar un archivo: > rm archivo.txt
-mv: mover un archivo, cambiar su ubicación. La sintaxis es así: >mv [ruta del archivo] [directorio hacia el que se va a mover]
rmdir: eliminar un directorio. En este caso es importante resaltar que, para que el directorio pueda ser eliminado, no puede contener archivos u otros directorios en su interior: > rmdir [ruta / nombre del directorio a eliminar].
En la pc los archivos se guardan en binario y en archivos de texto, siendo los archivos binarios aquellos que solo pueden ser ejecutados por una pc y en programa adecuado, algunos ejemplos son documentos, executables, fotos, videos. Los archivos de texto son aquellos que al abrirse con un editor de texto pueden ser leídos por humanos ya que tienen una codificación como ascci, utf, etc, ejemplos son código fuente, configuraciones y páginas web.
En linux hay 2 editores comunes de texto vim y nano.
En Vim para empezar a editar texto se presiona la letra i, con escape se sale del modo edición y con :w se guarda el archivo y con :q se sale del editor VIM.
En nano siempre que se abre se está en modo edición y abajo aprecen los comandos para realizar diversas instrucciones como guardar, salir, buscar.
Utilidades batch o de procesamiento por lotes: Programas que procesan texto y emiten el resultado.
cat: Nos muestra el contenido completo de un archivo cat nombre_archivo.
head: Nos muestra las primeras líneas del archivo head -n #delíneas nombre_archivo. 
tail: Nos muestra las ultimas líneas del archivo tail -n #delíneas nombre_archivo.
grep: Búsqueda por expresiones regulares en el archivo.
grep Hanks dump1.sql : Busca si existe la palabra en el archivo y devuelve la línea.
grep -i hanks dump1.sql : Busca la palabra sin distinción de mayúsculas o minúsculas.
grep -i "hanks$" dump1.sql : Busca que haya una línea que termine con la palabra hanks
Sed (spread editor): Tratamiento de flujo de caracteres, nos muestra como quedaría un archivo si se remplazará una parte, pero no lo sobreescribe.
sed 's/Hanks/Selleck/g' dump1.ql : Cambia la palabra Hanks por Selleck.
sed '$d$ dump1.sql : Elimina la ultima línea del archivo.
Awk: Se usa para Tratamiento de texto delimitado, sirve para texto separado por comas, punto y coma, entre otros además que puede realizar operaciones y condicionales.
awk -F ',' '{print $1}' dump1.sql : Imprime todo lo que haya antes de la primera coma, con -F se indica el parámetro, con ',' el caracter delimitador y {print $1} indica que solo se imprime antes de la primera coma.
awk -F ';' 'NR > 1 && $3 > 0 {print $1, $3 * $4}' dump1.sql : Usa ";" como delimitador y verifica que el número de línea sea mayor a 1 que el argumento 3 de cada renglon sea mayor a 0 e imprime el argumento 1 seguido de la multiplicación del argumento 3*4.
Trabajo fundamental con archivos de texto:
- touch: nos permite crear archivos : > touch archivo.txt
- cat: nos permite visualizar todo el contenido de nuestros archivos: > cat archivo.txt
- head: es muy parecido al comando cat. También nos permite visualizar el contenido de nuestros archivos, pero debemos indicarle cuántas líneas nos debe mostrar. Por defecto nos mostrará las primeras 10: # primeras 10 líneas > head archivo.txt , # primeras 20 líneas > head -n 20 archivo.txt
tail: funciona igual que el comando head, pero al revés. También debemos indicarle cuántas líneas nos debe mostrar, la diferencia es que no las mostrará de abajo hacia arriba. Por defecto nos mostrará las últimas 10: # últimas 10 líneas > tail archivo.txt # últimas 5 líneas > tail -n 5 archivo.txt
Búsqueda y tratamiento de texto:
No solo podemos visualizar nuestros archivos (o parte de nuestros archivos) tal cual como escribimos, también podemos filtrar y cambiar el contenido que podemos ver en los archivos.
Por ejemplo: imagina que tenemos un archivo gigante, con cientos o incluso miles de líneas. Si imprimieramos el contenido de todo el archivo sería muy difícil encontrar el nombre de una persona o elemento específico.
Y se vuelve aún más complicado si necesitamos que las palabras que buscamos cumplan ciertas condiciones, como solo mayúsculas o minúsculas, que la siguiente o anterior palabra cumpla ciertas condiciones, etc.
En estos casos podemos utilizar el comando grep para filtrar las líneas que queremos visualizar utilizando (o no) expresiones regulares: > grep “palabra-clave” archivo_gigante.txt.
Si nos da igual si la palabra clave incluye mayúsculas o minúsculas podemos utilizar el flag -i: > grep -i “pAlaBra-cLAvE” archivo_gigante.txt.
También podemos verificar si la línea incluye esta palabra clave al final: > grep “palabra-clave$” archivo_gigante.txt.
O si la incluye al principio: > grep “^palabra-clave” archivo_gigante.txt.
También hay situaciones donde necesitamos modificar un poco la información que obtenemos de un archivo de texto.
Por ejemplo, imagina que nuestro archivo contiene un poema, frase o saludo para responderle a los usuarios de nuestra aplicación. El problema es que cada usuario tiene un nombre diferente. > ¡Hola, NOMBRE_USUARIO! Felicitaciones por completar tu desafío con PUNTOS_USUARIO puntos.
No queremos editar este archivo. Solo necesitamos cambiar los caracteres NOMBRE_USUARIO por el verdadero nombre del usuario.
Para esto podemos utilizar el comando sed. Solo debemos indicarle que queremos realizar una sustitución (s/), la palabra que vamos a cambiar (NOMBRE_USUARIO), la nueva palabra que vamos a incluir (Ana) y cerrar con el símbolo / : > sed ‘s/NOMBRE_USUARIO/Ana’ archivo-saludo.txt .
Ahora imagina que, además del nombre, debemos cambiar también la puntuación que obtuvo el usuario: > sed ‘s/NOMBRE_USUARIO/Ana/; s/PUNTOS_USUARIO/35/’ archivo-saludo.txt
Puedes ver muchos más usos del comando sed en este tutorial: https://likegeeks.com/es/sed-de-linux/.
