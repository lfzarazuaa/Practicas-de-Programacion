Responsive Design:
Son todas esas técnicas que usamos para adaptar nuestras aplicaciones web a la mayor cantidad de pantallas (tamaños de pantallas).
Responsive Design tiene patrones a seguir que nos da ejemplos o stiuaciones comunes de como aplicar responsive design en la práctica.
Ejemplos de patrones responsive design: https://mediaqueri.es/
Luke Wroblewski propone 5 técnicas para responsive design:
- Mostly Fluid.
- Colocación de Columnas.
- Layout shifter (cambia la disposición de horizontal a vertical en algunos paneles).
- Tiny tweaks (pequeñas modificaciones, por lo general cambiando el tamaño de fuente y de imágenes).
- Off Canvas (fuera del lienzo).
Conceptos útiles para responsive design:
Viewport: Es el área visible del navegador.
Portrait-Landscape: Define si vamos a ver el contenido en vertical o en horizontal.
Mobile First - Mobile First: De donde parte o inicia la orientación de la página a un dispositivo móvil o de escritorio.
En teoria es mejor partir de un mobile first y solo ir agregando código conforme la pantalla crezca y así hacer mas liviana la aplicación.
Para decidir cual usar siempre es conveniente desde donde se le presta atención a nuestro sitio en particular.
Developer tools para Responsive Design
Antes de empezar a aplicar las herramientas necesarias para realizar Responsive Design es fundamental que aprendas a visualizar y manejar el menú en donde se encuentran tales herramientas, el cual se encuentra en cualquier explorador desde el que trabajes.
En el menú toogle device toolbar (ubicado en el inspector a la izquierda) se pueden hacer pruebas para responsive design ya sea cambiando el tamaño del área visible manualmente o escogiendo la pantalla de algun dispositivo móvil.
La herramienta también tiene la opción para ver el dispositivo en un porcentaje de zoom y además la opción de rotar la pantalla.
La cinta en el menú (barras grises), nos permiten seleccionar entre distintos tamaños de dispositivos convencionales (Mobile-S, Mobile-M, Mobile-L, Tablet, laptop, etc).
También permite emular si está online, conexión móvil media, conexión móvil baja, o sin conexión.
También se puede tomar un screenshot de la pantalla con full size, cubriendo, mas allá del área visible en vertical.
En el donde se encuentran los 3 puntos (superior-derecho), hay opciones para ver con regla la aplicación, los configuración de los dispositivos.
La mejor convención para el mínimo de una pantalla de de 320p horizontal.
<meta name="viewport" content="width=320"> //Coloca el área visible a 320px.
<meta name="viewport" content="width=device-width, initial-scale=1"> //Con device width se tiene el ancho del dispositivo y el zoom inicial 100%=1
Con view port solo se cambian las medidas de la pantalla para que todo sea legible pero aun queda desacomodado.
Las medidas en CSS son maleables, en la medida en que dependen de su fuente de origen o medida madre.
Tipos de medidas en CSS:
- Porcentaje %: longitud referente al tamaño de los elementos padre).
- em : unidad relativa al tamaño de fuente especificada más cercano, incluye al elemento mismo, los elementos que no son font-size leen respecto al font-size del mismo elemento.
- rem : Unidad relativa al tamaño de fuente especificada en el ancestro más lejano, como html o body.
- vw/vh : Unidad relativa porcentual con respecto al Viewport(tamaño de la pantalla).
Media queries: Gracias a este módulo de CSS existe el Responsive Design pues posibilita dar el acomodo y medidas para determinados rangos de pantallas.
El media queries es un módulo de css3 que hace posible al responsive design, éste existe desde el 2010 y se encarga de adaptar la representación del contenido a características del dispositivo.
https://developer.mozilla.org/es/docs/CSS/Media_queries
@media media type and (condición){} Prototipo de un media querie.
@media screen and (max-width: 768px) and (min-width: 480 px) {} Para pantallas con un maximo de 768px en horizontal.
También se puede declar @media type para print que es cuando se manda a imprimir una página web y esta debe ir sin background para ahorrar tinta.
Diseño para una aplicación que use Mobile first, preferencia a pantallas pequeñas.
@media screen and (min-width: 320px) {} //Desde 320px.
@media screen and (min-width: 480px) {} //Desde 480px.
@media screen and (min-width: 768px) {} //Desde 768px.
@media screen and (min-width: 1024px) {} //Desde 1024px.
Diseño para una aplicación que use Desktop first, preferencia a pantallas grandes.
@media screen and (max-width: 1024px) {} //Hasta 1024px.
@media screen and (max-width: 768px) {} //Hasta 768px.
@media screen and (max-width: 480px) {} //Hasta 480px.
@media screen and (max-width: 320px) {} //Hasta 320px.
Los medias queries pueden aplicarse directo a un archivo de estilos con:
<link rel="stylesheet" href="css/media.css" media="screen and (max-width:768px)">
Cuando se aplican las 4 condiciones de media queries se cubre con un estándar que cubre la mayoria de los dispositivos.
https://github.com/LeonidasEsteban/responsive-design-portafolio
Para aplicar diseño responsivo se necesita poner medidas variables un ejemplo es usar max-width en vez de width.
Cuando un elemento no quepa lo mas aconsejable es usar flexbox y aplicar flex-wrap: wrap para permitir que los elementos se apilen abajo y no se salgan de la pantalla.
Si se usa en combinación para un contenedor max-width: 500px y width:100% logrará que el contenedor tenga el ancho del elemento padre hasta el maximo permitido, ocupando así todo el espacio para acomodarse.
Se puede usar display: block en un media query cuando queremos que se caiga un elemento que no cabe (posicionarlo por debajo) en determinadas posiciones de un media querie, sin importar su ancho.
Cuando se deba ajustar un elemento dentro de un flexbox es mejor usar flex:1 que width: 100% para permitirle incluir margenes.
Cuando se aplica un display block de muchos elementos que no caben se debe quitar el alto fijo y sustituirlo por uno automático width: auto.
Es mejor usar width: auto que width:100% para obtener un mejor rendimiento.
Para hacer una imagen responsive conforme a su contenedor se usa la propiedad max-width: 100%, logrando que asi siempre se adapte al tamaño del contenedor.
Una buena práctica para hacer responsive en el texto es definirle tamaño relativo a cada tamaño de texto de una sección con em y en cada media querie solo definir el tamaño de texto base.
Al momento de realizar responsive design no hay que descuidar darle responsive design al margen, margin: 0.4em 0;
Cuando el elemento se sale de pantatalla o para hacer responsive desing con un número de elementos predefinido conviene usar width: % y margin: % calculando con respecto al de elementos que se quieran visualizar y flex-wrap: wrap, en el contenedor.
Si un elemento tiene una clase y una etiqueta (ejemplo: img), la etiqueta prevalecerá arriba de la clase ignorando la clase.
Para centrar un elemento en un viewport mas pequeño se pude cambiar la disposición a block y centrar los elementos con text-align y margin auto.
Siempre es aconsejable revisar si la disposición es adecuada para todo el intervalo de media querie, si está bien modificar en la primera donde existan problemas.
https://codepen.io/LeonidasEsteban/pen/VGWzWK
Posiciones en css (position: (static, relative, absolute, fixed, sticky)):
static: Posición por defecto los elementos no se mezclan.
relative: De donde estaba ubicado originalmente se sale.
absolute: Se reubica conforme a body o html, o si hay un elemento con posición relativa se reubica conforme a ese.
fixed: Pone una posición fija, nunca se quita de pantalla.
sticky: Cuando el elemento llega a cierta posición indicada se pega o fija allí.
Propiedad z-index: n Se sobrepone sobre un elemento donde n un número donde el mayor tapará al menor.
Propiedades top, left, rigth y botoom: Se usan en conjunto con position para saber cuanto mover en que dirección.
Cuando se usan medias queries es recomendable ir ajustando los tamaños de fuente para que mantegan su proporción conforme se disminuye el tamaño.
Tamaño de la fuente que cumpla con los renglones (si se requiere) y propoción de la página.
Para insertar videos del mismo sitio se usa.
<video src="videos/viedowall.mp4" width="244" height="400" controls></video>
Los navegadores dejaron de implementar el autoplay en videos.
.html-video{
    width: 40%; /* Ancho fijo del video. */
    height: auto;/* Ajusta para respetar las proporciones del video. */
    margin: 0 30%;
    /* max-width: 100%; */   
}
Para incorporar videos de youtbe solo basta en poner compartir y seleccionar incorporar, allí nos aparece un tag con la instrucción para tener el video en html.
<iframe class="html-video" width="560" height="315" src="https://www.youtube.com/embed/5f5Ig_U2Bpk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
iframe inserta un video de otra página web en la nuestra sin la necesidad de ir a esa página.
iframe puede insertar otra página en nuestra página.
Para mantener las proporciones un iframe al ser insertado se usa height*100/width
.youtube-video{
    position: absolute;/* Posición absoluta para posicionarse en flexible-video. */
    top: 0;/* Estira el video a cada esquina. */
    bottom: 0;/* Estira el video a cada esquina. */
    right: 0;/* Estira el video a cada esquina. */
    left: 0;/* Estira el video a cada esquina. */
    width: 100%;/* Ocupar todo el espacio en horizontal. */
    height: 100%;/* Ocupar todo el espacio en vertical. */
    z-index: 3;    /* Indica que irá al frente de los elementos definidos por z-index 2 y 3. */
}

.flexible-video{/* Contenedor donde se moverá de posición el video. */
    width: 50%;/* Porcentaje que se desea ocupar en el contenedor padre. */
    height: 0;/* Altura 0, pues esta se establecerá por padding. */
    padding-top: 5.625%;/* Pd-t=Porcentaje/100*height*100/width*/
    position: relative;/* Relativo, para asi lograr que el absolute se posicione aqui. */
}
https://icomoon.io/ para crear iconos.
Se puede descargar como una fuente, una vez descargada se copia la carpeta fonts, postiormente se lee el archivo css del .zip y se copia al css de nuestra página asignandole la url correcta de la carpeta fonts.
Para mandar a llamar se usa <i class="icon-menu"></i>.
Burger Button (Menu de opciones) tratando una imagen como una fuente.
.burger-button{
    width: 40px;/* Tamaño del contenedor del burger-boton. */
    height: 40px;/* Tamaño del contenedor del burger-boton. */
    border-radius: 50%;/* Redondea el contenedor. */
    background-color: rgba(0, 0, 0, 0.8);/* Color del contenedor con opacidad. */
    display: none;/* Cambio de display inline a none para ocultarlo. */
    line-height: 40px;/* Igualar la posición del texto a la altura del contendor.*/
    text-align: center;/* Alinear el texto al centro. */
    position: fixed;/* Define el elemento estático. */
    z-index: 4;/* Pone hasta el frente de todos los elementos. */
    left: 5px;
    top: 5px;
    color: white;/* Color de la imagen, generada como una letra. */
    font-size: 15px;/* Hacer mas grande el ícono. */
}
Para desplegar un menú se puede otorgarle la posición de fixed al contenedor del menú e incluir dentro de su color de fondo una transparencia para poder seguir viendo el contenido.
.menu{
        position: fixed;/* Fija la posición del elemento en pantalla (no se ve afectada por scroll). */
        background: rgba(0, 100, 255, 0.8);/* Define color azul con trasnparencia. */
        z-index: 3;/* Encima de los elementos. */
        top: 0;/* Estira el contenedor. */
        left: -100vw;/* Estira el contenedor. */
        bottom: 0;/* Estira el contenedor. */
        width: 100vw;/* Ocupa todo el ancho de la pantalla. */
        display: flex;/* Display flexbox. */
        align-items: center;/* Alinea los elementos hacia el centro verticalmente */
        justify-content: center;/* Alinea los elementos al centro horizontalmente. */
        transition: .3s;
    }
Al momento de querer realizar una acción cuando dos clases esten presentes se necesitan colocar los selectores juntos.  
    .menu.es-activo{
        left: 0;/* Dadas las condiciones declaradas en menu hace visible en pantalla el menu. */
    }
Con document.querySelector(".menu") podemos obtener la clase y su contenido html.
Javascript para controlar un boton booleano.
const menu = document.querySelector(".menu");//Obtiene el elemento menu. 
const burgerbutton = document.getElementById("burger-menu");Obtiene el elemento burger-menu para ver eventos.
burgerbutton.addEventListener("click",hideShow);//Agrega unfunción para el evento de click.
function hideShow() {
    if (menu.classList.contains('es-activo')) {
        menu.classList.remove("es-activo");//Quita la clase eactivo a la lista.
    } else {
        menu.classList.add("es-activo");//Añade la clase eactivo a la lista.
    }
}
Para poder usar medias queries y ejecuttar el código solo cuando sea necesario se usa window.matchMedia.
console.log(window.matchMedia("screen and (max-width: 767px)"));
El método nos devuelve un objeto donde la propiedad matches nos indica si cumple con el media querie o no.
const pantallaTablet = window.matchMedia("screen and (max-width: 767px)");//Nos devuelve el estado de la pantalla.
pantallaTablet.addListener(validation);//Agrega función manejadora cada vez que hay un cambio en el objeto del media querie.
